"use strict";Object.defineProperty(exports, "__esModule", {value: true});



var _chunkY4DKEF7Yjs = require('./chunk-Y4DKEF7Y.js');



var _chunk2YE2P5BZjs = require('./chunk-2YE2P5BZ.js');

// src/internals/request.ts
var _snapsutils = require('@metamask/snaps-utils');
var _utils = require('@metamask/utils');
var _toolkit = require('@reduxjs/toolkit');
function handleRequest({
  snapId,
  store,
  executionService,
  handler,
  controllerMessenger,
  runSaga,
  request: { id = _toolkit.nanoid.call(void 0, ), origin = "https://metamask.io", ...options }
}) {
  const promise = executionService.handleRpcRequest(snapId, {
    origin,
    handler,
    request: {
      jsonrpc: "2.0",
      id: 1,
      ...options
    }
  }).then(async (result) => {
    const notifications = _chunk2YE2P5BZjs.getNotifications.call(void 0, store.getState());
    store.dispatch(_chunk2YE2P5BZjs.clearNotifications.call(void 0, ));
    const getInterfaceFn = await getInterfaceApi(
      result,
      snapId,
      controllerMessenger
    );
    return {
      id: String(id),
      response: {
        result: _utils.getSafeJson.call(void 0, result)
      },
      notifications,
      ...getInterfaceFn ? { getInterface: getInterfaceFn } : {}
    };
  }).catch((error) => {
    const [unwrappedError] = _snapsutils.unwrapError.call(void 0, error);
    return {
      id: String(id),
      response: {
        error: unwrappedError.serialize()
      },
      notifications: []
    };
  });
  promise.getInterface = async () => {
    return await runSaga(
      _chunkY4DKEF7Yjs.getInterface,
      runSaga,
      snapId,
      controllerMessenger
    ).toPromise();
  };
  return promise;
}
async function getInterfaceFromResult(result, snapId, controllerMessenger) {
  if (_utils.isPlainObject.call(void 0, result) && _utils.hasProperty.call(void 0, result, "id")) {
    return result.id;
  }
  if (_utils.isPlainObject.call(void 0, result) && _utils.hasProperty.call(void 0, result, "content")) {
    const id = await controllerMessenger.call(
      "SnapInterfaceController:createInterface",
      snapId,
      result.content
    );
    return id;
  }
  return void 0;
}
async function getInterfaceApi(result, snapId, controllerMessenger) {
  const interfaceId = await getInterfaceFromResult(
    result,
    snapId,
    controllerMessenger
  );
  if (interfaceId) {
    return () => {
      const { content } = controllerMessenger.call(
        "SnapInterfaceController:getInterface",
        snapId,
        interfaceId
      );
      return {
        content,
        clickElement: async (name) => {
          await _chunkY4DKEF7Yjs.clickElement.call(void 0, 
            controllerMessenger,
            interfaceId,
            content,
            snapId,
            name
          );
        },
        typeInField: async (name, value) => {
          await _chunkY4DKEF7Yjs.typeInField.call(void 0, 
            controllerMessenger,
            interfaceId,
            content,
            snapId,
            name,
            value
          );
        }
      };
    };
  }
  return void 0;
}





exports.handleRequest = handleRequest; exports.getInterfaceFromResult = getInterfaceFromResult; exports.getInterfaceApi = getInterfaceApi;
//# sourceMappingURL=chunk-6POKT4OO.js.map