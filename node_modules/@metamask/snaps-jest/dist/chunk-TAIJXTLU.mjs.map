{"version":3,"sources":["../src/internals/simulation/methods/specifications.ts"],"sourcesContent":["import type { GenericPermissionController } from '@metamask/permission-controller';\nimport {\n  endowmentPermissionBuilders,\n  buildSnapEndowmentSpecifications,\n  buildSnapRestrictedMethodSpecifications,\n} from '@metamask/snaps-rpc-methods';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport { DEFAULT_ENDOWMENTS } from '@metamask/snaps-utils';\n\nimport type { RootControllerMessenger } from '../controllers';\nimport type { SimulationOptions } from '../options';\nimport type { RunSagaFunction } from '../store';\nimport {\n  EXCLUDED_SNAP_ENDOWMENTS,\n  EXCLUDED_SNAP_PERMISSIONS,\n} from './constants';\nimport {\n  getGetLocaleMethodImplementation,\n  getClearSnapStateMethodImplementation,\n  getGetSnapStateMethodImplementation,\n  getUpdateSnapStateMethodImplementation,\n  getShowDialogImplementation,\n  getShowInAppNotificationImplementation,\n  getShowNativeNotificationImplementation,\n  getCreateInterfaceImplementation,\n  getGetInterfaceImplementation,\n} from './hooks';\n\nexport type PermissionSpecificationsHooks = {\n  /**\n   * A hook that returns the user's secret recovery phrase.\n   *\n   * @returns The user's secret recovery phrase.\n   */\n  getMnemonic: () => Promise<Uint8Array>;\n};\n\nexport type GetPermissionSpecificationsOptions = {\n  controllerMessenger: RootControllerMessenger;\n  hooks: PermissionSpecificationsHooks;\n  runSaga: RunSagaFunction;\n  options: SimulationOptions;\n};\n\n/**\n * Get a function which resolves with the specified result.\n *\n * @param result - The result to return.\n * @returns The function implementation.\n */\nexport function resolve(result: unknown) {\n  return () => result;\n}\n\n/**\n * Get a function which resolves with the specified result.\n *\n * @param result - The result to return. If not specified, the function will\n * resolve with `undefined`.\n * @returns The function implementation.\n */\nexport function asyncResolve(result?: unknown) {\n  return async () => result;\n}\n\n/**\n * Get the permission specifications for the Snap.\n *\n * @param options - The options.\n * @param options.controllerMessenger - The controller messenger.\n * @param options.hooks - The hooks.\n * @param options.runSaga - The function to run a saga outside the usual Redux\n * flow.\n * @param options.options - The simulation options.\n * @returns The permission specifications for the Snap.\n */\nexport function getPermissionSpecifications({\n  controllerMessenger,\n  hooks,\n  runSaga,\n  options,\n}: GetPermissionSpecificationsOptions) {\n  return {\n    ...buildSnapEndowmentSpecifications(EXCLUDED_SNAP_ENDOWMENTS),\n    ...buildSnapRestrictedMethodSpecifications(EXCLUDED_SNAP_PERMISSIONS, {\n      // Shared hooks.\n      ...hooks,\n\n      // Snaps-specific hooks.\n      clearSnapState: getClearSnapStateMethodImplementation(runSaga),\n      getLocale: getGetLocaleMethodImplementation(options),\n      getSnapState: getGetSnapStateMethodImplementation(runSaga),\n      getUnlockPromise: asyncResolve(true),\n\n      // TODO: Allow the user to specify the result of this function.\n      isOnPhishingList: resolve(false),\n\n      maybeUpdatePhishingList: asyncResolve(),\n      showDialog: getShowDialogImplementation(runSaga),\n      showInAppNotification: getShowInAppNotificationImplementation(runSaga),\n      showNativeNotification: getShowNativeNotificationImplementation(runSaga),\n      updateSnapState: getUpdateSnapStateMethodImplementation(runSaga),\n      createInterface: getCreateInterfaceImplementation(controllerMessenger),\n      getInterface: getGetInterfaceImplementation(controllerMessenger),\n    }),\n  };\n}\n\n/**\n * Get the endowments for the Snap.\n *\n * @param permissionController - The permission controller.\n * @param snapId - The ID of the Snap.\n * @returns The endowments for the Snap.\n */\nexport async function getEndowments(\n  permissionController: GenericPermissionController,\n  snapId: SnapId,\n) {\n  const allEndowments = await Object.keys(endowmentPermissionBuilders).reduce<\n    Promise<string[]>\n  >(async (promise, permissionName) => {\n    const accumulator = await promise;\n    if (permissionController.hasPermission(snapId, permissionName)) {\n      const endowments = await permissionController.getEndowments(\n        snapId,\n        permissionName,\n      );\n\n      if (endowments) {\n        return accumulator.concat(endowments as string[]);\n      }\n    }\n\n    return accumulator;\n  }, Promise.resolve([]));\n\n  return [...new Set([...DEFAULT_ENDOWMENTS, ...allEndowments])];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,0BAA0B;AA2C5B,SAAS,QAAQ,QAAiB;AACvC,SAAO,MAAM;AACf;AASO,SAAS,aAAa,QAAkB;AAC7C,SAAO,YAAY;AACrB;AAaO,SAAS,4BAA4B;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAuC;AACrC,SAAO;AAAA,IACL,GAAG,iCAAiC,wBAAwB;AAAA,IAC5D,GAAG,wCAAwC,2BAA2B;AAAA;AAAA,MAEpE,GAAG;AAAA;AAAA,MAGH,gBAAgB,sCAAsC,OAAO;AAAA,MAC7D,WAAW,iCAAiC,OAAO;AAAA,MACnD,cAAc,oCAAoC,OAAO;AAAA,MACzD,kBAAkB,aAAa,IAAI;AAAA;AAAA,MAGnC,kBAAkB,QAAQ,KAAK;AAAA,MAE/B,yBAAyB,aAAa;AAAA,MACtC,YAAY,4BAA4B,OAAO;AAAA,MAC/C,uBAAuB,uCAAuC,OAAO;AAAA,MACrE,wBAAwB,wCAAwC,OAAO;AAAA,MACvE,iBAAiB,uCAAuC,OAAO;AAAA,MAC/D,iBAAiB,iCAAiC,mBAAmB;AAAA,MACrE,cAAc,8BAA8B,mBAAmB;AAAA,IACjE,CAAC;AAAA,EACH;AACF;AASA,eAAsB,cACpB,sBACA,QACA;AACA,QAAM,gBAAgB,MAAM,OAAO,KAAK,2BAA2B,EAAE,OAEnE,OAAO,SAAS,mBAAmB;AACnC,UAAM,cAAc,MAAM;AAC1B,QAAI,qBAAqB,cAAc,QAAQ,cAAc,GAAG;AAC9D,YAAM,aAAa,MAAM,qBAAqB;AAAA,QAC5C;AAAA,QACA;AAAA,MACF;AAEA,UAAI,YAAY;AACd,eAAO,YAAY,OAAO,UAAsB;AAAA,MAClD;AAAA,IACF;AAEA,WAAO;AAAA,EACT,GAAG,QAAQ,QAAQ,CAAC,CAAC,CAAC;AAEtB,SAAO,CAAC,GAAG,oBAAI,IAAI,CAAC,GAAG,oBAAoB,GAAG,aAAa,CAAC,CAAC;AAC/D;","names":[]}