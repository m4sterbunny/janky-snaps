{"version":3,"sources":["../src/internals/request.ts"],"names":[],"mappings":";;;;;;;;;;;AAGA,SAAS,mBAAmB;AAC5B,SAAS,aAAa,aAAa,qBAAqB;AACxD,SAAS,cAAc;AA+ChB,SAAS,cAAc;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS,EAAE,KAAK,OAAO,GAAG,SAAS,uBAAuB,GAAG,QAAQ;AACvE,GAAsC;AACpC,QAAM,UAAU,iBACb,iBAAiB,QAAQ;AAAA,IACxB;AAAA,IACA;AAAA,IACA,SAAS;AAAA,MACP,SAAS;AAAA,MACT,IAAI;AAAA,MACJ,GAAG;AAAA,IACL;AAAA,EACF,CAAC,EACA,KAAK,OAAO,WAAW;AACtB,UAAM,gBAAgB,iBAAiB,MAAM,SAAS,CAAC;AACvD,UAAM,SAAS,mBAAmB,CAAC;AAEnC,UAAM,iBAAiB,MAAM;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,WAAO;AAAA,MACL,IAAI,OAAO,EAAE;AAAA,MACb,UAAU;AAAA,QACR,QAAQ,YAAY,MAAM;AAAA,MAC5B;AAAA,MACA;AAAA,MACA,GAAI,iBAAiB,EAAE,cAAc,eAAe,IAAI,CAAC;AAAA,IAC3D;AAAA,EACF,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,UAAM,CAAC,cAAc,IAAI,YAAY,KAAK;AAE1C,WAAO;AAAA,MACL,IAAI,OAAO,EAAE;AAAA,MACb,UAAU;AAAA,QACR,OAAO,eAAe,UAAU;AAAA,MAClC;AAAA,MACA,eAAe,CAAC;AAAA,IAClB;AAAA,EACF,CAAC;AAEH,UAAQ,eAAe,YAAY;AACjC,WAAO,MAAM;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,UAAU;AAAA,EACd;AAEA,SAAO;AACT;AAUA,eAAsB,uBACpB,QACA,QACA,qBACA;AACA,MAAI,cAAc,MAAM,KAAK,YAAY,QAAQ,IAAI,GAAG;AACtD,WAAO,OAAO;AAAA,EAChB;AAEA,MAAI,cAAc,MAAM,KAAK,YAAY,QAAQ,SAAS,GAAG;AAC3D,UAAM,KAAK,MAAM,oBAAoB;AAAA,MACnC;AAAA,MACA;AAAA,MACA,OAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAUA,eAAsB,gBACpB,QACA,QACA,qBACmD;AACnD,QAAM,cAAc,MAAM;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI,aAAa;AACf,WAAO,MAAM;AACX,YAAM,EAAE,QAAQ,IAAI,oBAAoB;AAAA,QACtC;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL;AAAA,QACA,cAAc,OAAO,SAAS;AAC5B,gBAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,QACA,aAAa,OAAO,MAAM,UAAU;AAClC,gBAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT","sourcesContent":["import type { AbstractExecutionService } from '@metamask/snaps-controllers';\nimport type { SnapId, Component } from '@metamask/snaps-sdk';\nimport type { HandlerType } from '@metamask/snaps-utils';\nimport { unwrapError } from '@metamask/snaps-utils';\nimport { getSafeJson, hasProperty, isPlainObject } from '@metamask/utils';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport type {\n  RequestOptions,\n  SnapHandlerInterface,\n  SnapRequest,\n} from '../types';\nimport {\n  clearNotifications,\n  clickElement,\n  getInterface,\n  getNotifications,\n  typeInField,\n} from './simulation';\nimport type { RunSagaFunction, Store } from './simulation';\nimport type { RootControllerMessenger } from './simulation/controllers';\n\nexport type HandleRequestOptions = {\n  snapId: SnapId;\n  store: Store;\n  executionService: AbstractExecutionService<unknown>;\n  handler: HandlerType;\n  controllerMessenger: RootControllerMessenger;\n  runSaga: RunSagaFunction;\n  request: RequestOptions;\n};\n\n/**\n * Send a JSON-RPC request to the Snap, and wrap the response in a\n * {@link SnapResponse} object.\n *\n * @param options - The request options.\n * @param options.snapId - The ID of the Snap to send the request to.\n * @param options.store - The Redux store.\n * @param options.executionService - The execution service to use to send the\n * request.\n * @param options.handler - The handler to use to send the request.\n * @param options.controllerMessenger - The controller messenger used to call actions.\n * @param options.runSaga - A function to run a saga outside the usual Redux\n * flow.\n * @param options.request - The request to send.\n * @param options.request.id - The ID of the request. If not provided, a random\n * ID will be generated.\n * @param options.request.origin - The origin of the request. Defaults to\n * `https://metamask.io`.\n * @returns The response, wrapped in a {@link SnapResponse} object.\n */\nexport function handleRequest({\n  snapId,\n  store,\n  executionService,\n  handler,\n  controllerMessenger,\n  runSaga,\n  request: { id = nanoid(), origin = 'https://metamask.io', ...options },\n}: HandleRequestOptions): SnapRequest {\n  const promise = executionService\n    .handleRpcRequest(snapId, {\n      origin,\n      handler,\n      request: {\n        jsonrpc: '2.0',\n        id: 1,\n        ...options,\n      },\n    })\n    .then(async (result) => {\n      const notifications = getNotifications(store.getState());\n      store.dispatch(clearNotifications());\n\n      const getInterfaceFn = await getInterfaceApi(\n        result,\n        snapId,\n        controllerMessenger,\n      );\n\n      return {\n        id: String(id),\n        response: {\n          result: getSafeJson(result),\n        },\n        notifications,\n        ...(getInterfaceFn ? { getInterface: getInterfaceFn } : {}),\n      };\n    })\n    .catch((error) => {\n      const [unwrappedError] = unwrapError(error);\n\n      return {\n        id: String(id),\n        response: {\n          error: unwrappedError.serialize(),\n        },\n        notifications: [],\n      };\n    }) as unknown as SnapRequest;\n\n  promise.getInterface = async () => {\n    return await runSaga(\n      getInterface,\n      runSaga,\n      snapId,\n      controllerMessenger,\n    ).toPromise();\n  };\n\n  return promise;\n}\n\n/**\n * Get the interface ID from the result if it's available or create a new interface if the result contains static components.\n *\n * @param result - The handler result object.\n * @param snapId - The Snap ID.\n * @param controllerMessenger - The controller messenger.\n * @returns The interface ID or undefined if the result doesn't include content.\n */\nexport async function getInterfaceFromResult(\n  result: unknown,\n  snapId: SnapId,\n  controllerMessenger: RootControllerMessenger,\n) {\n  if (isPlainObject(result) && hasProperty(result, 'id')) {\n    return result.id as string;\n  }\n\n  if (isPlainObject(result) && hasProperty(result, 'content')) {\n    const id = await controllerMessenger.call(\n      'SnapInterfaceController:createInterface',\n      snapId,\n      result.content as Component,\n    );\n\n    return id;\n  }\n\n  return undefined;\n}\n\n/**\n * Get the response content from the SnapInterfaceController and include the interaction methods.\n *\n * @param result - The handler result object.\n * @param snapId - The Snap ID.\n * @param controllerMessenger - The controller messenger.\n * @returns The content components if any.\n */\nexport async function getInterfaceApi(\n  result: unknown,\n  snapId: SnapId,\n  controllerMessenger: RootControllerMessenger,\n): Promise<(() => SnapHandlerInterface) | undefined> {\n  const interfaceId = await getInterfaceFromResult(\n    result,\n    snapId,\n    controllerMessenger,\n  );\n\n  if (interfaceId) {\n    return () => {\n      const { content } = controllerMessenger.call(\n        'SnapInterfaceController:getInterface',\n        snapId,\n        interfaceId,\n      );\n\n      return {\n        content,\n        clickElement: async (name) => {\n          await clickElement(\n            controllerMessenger,\n            interfaceId,\n            content,\n            snapId,\n            name,\n          );\n        },\n        typeInField: async (name, value) => {\n          await typeInField(\n            controllerMessenger,\n            interfaceId,\n            content,\n            snapId,\n            name,\n            value,\n          );\n        },\n      };\n    };\n  }\n\n  return undefined;\n}\n"]}