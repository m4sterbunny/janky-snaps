{"version":3,"sources":["../src/internals/structs.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ComponentStruct,\n  NotificationType,\n  enumValue,\n} from '@metamask/snaps-sdk';\nimport {\n  bytesToHex,\n  JsonStruct,\n  StrictHexStruct,\n  valueToBytes,\n} from '@metamask/utils';\nimport { randomBytes } from 'crypto';\nimport {\n  array,\n  assign,\n  bigint,\n  coerce,\n  defaulted,\n  instance,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n  record,\n  any,\n  func,\n  type,\n} from 'superstruct';\n\n// TODO: Export this from `@metamask/utils` instead.\nconst BytesLikeStruct = union([\n  bigint(),\n  number(),\n  string(),\n  instance(Uint8Array),\n]);\n\nexport const TransactionOptionsStruct = object({\n  /**\n   * The CAIP-2 chain ID to send the transaction on. Defaults to `eip155:1`.\n   */\n  chainId: defaulted(string(), 'eip155:1'),\n\n  /**\n   * The origin to send the transaction from. Defaults to `metamask.io`.\n   */\n  origin: defaulted(string(), 'metamask.io'),\n\n  /**\n   * The address to send the transaction from. Defaults to a randomly generated\n   * address.\n   */\n  // TODO: Move this coercer to `@metamask/utils`.\n  from: coerce(StrictHexStruct, optional(BytesLikeStruct), (value) => {\n    if (value) {\n      return bytesToHex(valueToBytes(value));\n    }\n\n    return bytesToHex(randomBytes(20));\n  }),\n\n  /**\n   * The address to send the transaction to. Defaults to a randomly generated\n   * address.\n   */\n  // TODO: Move this coercer to `@metamask/utils`.\n  to: coerce(StrictHexStruct, optional(BytesLikeStruct), (value) => {\n    if (value) {\n      return bytesToHex(valueToBytes(value));\n    }\n\n    return bytesToHex(randomBytes(20));\n  }),\n\n  /**\n   * The value to send with the transaction. The value may be specified as a\n   * `number`, `bigint`, `string`, or `Uint8Array`. Defaults to `0`.\n   */\n  value: defaulted(\n    coerce(StrictHexStruct, BytesLikeStruct, (value) =>\n      bytesToHex(valueToBytes(value)),\n    ),\n    '0x0',\n  ),\n\n  /**\n   * The gas limit to use for the transaction. The gas limit may be specified\n   * as a `number`, `bigint`, `string`, or `Uint8Array`. Defaults to `21_000`.\n   */\n  gasLimit: defaulted(\n    coerce(StrictHexStruct, BytesLikeStruct, (value) =>\n      bytesToHex(valueToBytes(value)),\n    ),\n    valueToBytes(21_000),\n  ),\n\n  /**\n   * The max fee per gas (in Wei) to use for the transaction. The max fee per\n   * gas may be specified as a `number`, `bigint`, `string`, or `Uint8Array`.\n   * Defaults to `1`.\n   */\n  maxFeePerGas: defaulted(\n    coerce(StrictHexStruct, BytesLikeStruct, (value) =>\n      bytesToHex(valueToBytes(value)),\n    ),\n    valueToBytes(1),\n  ),\n\n  /**\n   * The max priority fee per gas (in Wei) to use for the transaction. The max\n   * priority fee per gas may be specified as a `number`, `bigint`, `string`,\n   * or `Uint8Array`. Defaults to `1`.\n   */\n  maxPriorityFeePerGas: defaulted(\n    coerce(StrictHexStruct, BytesLikeStruct, (value) =>\n      bytesToHex(valueToBytes(value)),\n    ),\n    valueToBytes(1),\n  ),\n\n  /**\n   * The nonce to use for the transaction. The nonce may be specified as a\n   * `number`, `bigint`, `string`, or `Uint8Array`. Defaults to `0`.\n   */\n  nonce: defaulted(\n    coerce(StrictHexStruct, BytesLikeStruct, (value) =>\n      bytesToHex(valueToBytes(value)),\n    ),\n    valueToBytes(0),\n  ),\n\n  /**\n   * The data to send with the transaction. The data may be specified as a\n   * `number`, `bigint`, `string`, or `Uint8Array`. Defaults to `0x`.\n   */\n  data: defaulted(\n    coerce(union([StrictHexStruct, literal('0x')]), BytesLikeStruct, (value) =>\n      bytesToHex(valueToBytes(value)),\n    ),\n    '0x',\n  ),\n});\n\nexport const SignatureOptionsStruct = object({\n  /**\n   * The origin making the signature request.\n   */\n  origin: defaulted(string(), 'metamask.io'),\n\n  /**\n   * The address signing the signature request. Defaults to a randomly generated\n   * address.\n   */\n  from: coerce(StrictHexStruct, optional(BytesLikeStruct), (value) => {\n    if (value) {\n      return bytesToHex(valueToBytes(value));\n    }\n\n    return bytesToHex(randomBytes(20));\n  }),\n\n  /**\n   * The data to send with the transaction. The data may be specified as a\n   * `string`, an object, or an array of objects. This covers the data types\n   * for the supported signature methods. Defaults to `0x`.\n   */\n  data: defaulted(\n    union([\n      StrictHexStruct,\n      literal('0x'),\n      record(string(), any()),\n      array(record(string(), any())),\n    ]),\n    '0x',\n  ),\n\n  /**\n   * The signature method being used.\n   */\n  signatureMethod: defaulted(\n    union([\n      literal('eth_sign'),\n      literal('personal_sign'),\n      literal('eth_signTypedData'),\n      literal('eth_signTypedData_v3'),\n      literal('eth_signTypedData_v4'),\n    ]),\n    'personal_sign',\n  ),\n});\n\nexport const SnapOptionsStruct = object({\n  /**\n   * The timeout in milliseconds to use for requests to the snap. Defaults to\n   * `1000`.\n   */\n  timeout: defaulted(optional(number()), 1000),\n});\n\nexport const JsonRpcMockOptionsStruct = object({\n  method: string(),\n  result: JsonStruct,\n});\n\nexport const InterfaceStruct = type({\n  content: optional(ComponentStruct),\n});\n\nexport const SnapResponseWithoutInterfaceStruct = object({\n  id: string(),\n\n  response: union([\n    object({\n      result: JsonStruct,\n    }),\n    object({\n      error: JsonStruct,\n    }),\n  ]),\n\n  notifications: array(\n    object({\n      id: string(),\n      message: string(),\n      type: union([\n        enumValue(NotificationType.InApp),\n        enumValue(NotificationType.Native),\n      ]),\n    }),\n  ),\n});\n\nexport const SnapResponseWithInterfaceStruct = assign(\n  SnapResponseWithoutInterfaceStruct,\n  object({\n    getInterface: func(),\n  }),\n);\n\nexport const SnapResponseStruct = union([\n  SnapResponseWithoutInterfaceStruct,\n  SnapResponseWithInterfaceStruct,\n]);\n"]}