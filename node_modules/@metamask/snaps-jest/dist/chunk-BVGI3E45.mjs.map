{"version":3,"sources":["../src/matchers.ts"],"sourcesContent":["/* eslint-disable no-invalid-this */\n\n// Note: Because this file imports from `@jest/globals`, it can only be used in\n// a Jest environment. This is why it's not exported from the index file.\n\nimport type { MatcherFunction } from '@jest/expect';\nimport { expect } from '@jest/globals';\nimport type {\n  NotificationType,\n  EnumToUnion,\n  Component,\n} from '@metamask/snaps-sdk';\nimport type { Json } from '@metamask/utils';\nimport { hasProperty } from '@metamask/utils';\nimport type { MatcherHintOptions } from 'jest-matcher-utils';\nimport {\n  diff,\n  matcherErrorMessage,\n  matcherHint,\n  printReceived,\n  printWithType,\n  RECEIVED_COLOR,\n} from 'jest-matcher-utils';\nimport { is } from 'superstruct';\n\nimport { InterfaceStruct, SnapResponseStruct } from './internals';\nimport type { SnapResponse } from './types';\n\n/**\n * Ensure that the actual value is a response from the `request` function.\n *\n * @param actual - The actual value.\n * @param matcherName - The name of the matcher.\n * @param options - The matcher options.\n */\nfunction assertActualIsSnapResponse(\n  actual: unknown,\n  matcherName: string,\n  options?: MatcherHintOptions,\n): asserts actual is SnapResponse {\n  if (!is(actual, SnapResponseStruct)) {\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherName, undefined, undefined, options),\n        `${RECEIVED_COLOR(\n          'received',\n        )} value must be a response from the \\`request\\` function`,\n        printWithType('Received', actual, printReceived),\n      ),\n    );\n  }\n}\n\n/**\n * Ensure that the actual value is a response from the `request` function, and\n * that it has a `ui` property.\n *\n * @param actual - The actual value.\n * @param matcherName - The name of the matcher.\n * @param options - The matcher options.\n */\nfunction assertHasInterface(\n  actual: unknown,\n  matcherName: string,\n  options?: MatcherHintOptions,\n): asserts actual is { content: Component } {\n  if (!is(actual, InterfaceStruct) || !actual.content) {\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherName, undefined, undefined, options),\n        `${RECEIVED_COLOR('received')} value must have a \\`content\\` property`,\n        printWithType('Received', actual, printReceived),\n      ),\n    );\n  }\n}\n\n/**\n * Check if a JSON-RPC response matches the expected value. This matcher is\n * intended to be used with the `expect` global.\n *\n * @param actual - The actual response.\n * @param expected - The expected response.\n * @returns The status and message.\n */\nexport const toRespondWith: MatcherFunction<[expected: Json]> = function (\n  actual,\n  expected,\n) {\n  assertActualIsSnapResponse(actual, 'toRespondWith');\n\n  const { response } = actual;\n  if (hasProperty(response, 'error')) {\n    const message = () =>\n      `${this.utils.matcherHint('.toRespondWith')}\\n\\n` +\n      `Expected response: ${this.utils.printExpected(expected)}\\n` +\n      `Received error: ${this.utils.printReceived(response.error)}`;\n\n    return { message, pass: false };\n  }\n\n  const pass = this.equals(response.result, expected);\n  const message = pass\n    ? () =>\n        `${this.utils.matcherHint('.not.toRespondWith')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(response.result)}`\n    : () =>\n        `${this.utils.matcherHint('.toRespondWith')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(response.result)}`;\n\n  return { message, pass };\n};\n\nexport const toRespondWithError: MatcherFunction<[expected: Json]> = function (\n  actual,\n  expected,\n) {\n  assertActualIsSnapResponse(actual, 'toRespondWithError');\n\n  const { response } = actual;\n  if (hasProperty(response, 'result')) {\n    const message = () =>\n      `${this.utils.matcherHint('.toRespondWithError')}\\n\\n` +\n      `Expected error: ${this.utils.printExpected(expected)}\\n` +\n      `Received result: ${this.utils.printReceived(response.result)}`;\n\n    return { message, pass: false };\n  }\n\n  const pass = this.equals(response.error, expected);\n  const message = pass\n    ? () =>\n        `${this.utils.matcherHint('.not.toRespondWithError')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(response.error)}`\n    : () =>\n        `${this.utils.matcherHint('.toRespondWithError')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(response.error)}`;\n\n  return { message, pass };\n};\n\n/**\n * Check if the snap sent a notification with the expected message. This matcher\n * is intended to be used with the `expect` global.\n *\n * @param actual - The actual response.\n * @param expected - The expected notification message.\n * @param type - The expected notification type.\n * @returns The status and message.\n */\nexport const toSendNotification: MatcherFunction<\n  [expected: string, type?: EnumToUnion<NotificationType> | undefined]\n> = function (actual, expected, type) {\n  assertActualIsSnapResponse(actual, 'toSendNotification');\n\n  const { notifications } = actual;\n  const pass = notifications.some(\n    (notification) =>\n      this.equals(notification.message, expected) &&\n      (type === undefined || notification.type === type),\n  );\n\n  const message = pass\n    ? () =>\n        `${this.utils.matcherHint('.not.toSendNotification')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Expected type: ${this.utils.printExpected(type)}\\n` +\n        `Received: ${this.utils.printReceived(notifications)}`\n    : () =>\n        `${this.utils.matcherHint('.toSendNotification')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Expected type: ${this.utils.printExpected(type)}\\n` +\n        `Received: ${this.utils.printReceived(notifications)}`;\n\n  return { message, pass };\n};\n\nexport const toRender: MatcherFunction<[expected: Component]> = function (\n  actual,\n  expected,\n) {\n  assertHasInterface(actual, 'toRender');\n\n  const { content } = actual;\n  const pass = this.equals(content, expected);\n\n  // This is typed as `string | null`, but in practice it's always a string. The\n  // function only returns `null` if both the expected and actual values are\n  // numbers, bigints, or booleans, which is never the case here.\n  const difference = diff(expected, content);\n\n  const message = pass\n    ? () =>\n        `${this.utils.matcherHint('.not.toRender')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(content)}` +\n        `\\n\\nDifference:\\n\\n${difference as string}`\n    : () =>\n        `${this.utils.matcherHint('.toRender')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(content)}` +\n        `\\n\\nDifference:\\n\\n${difference as string}`;\n\n  return { message, pass };\n};\n\nexpect.extend({\n  toRespondWith,\n  toRespondWithError,\n  toSendNotification,\n  toRender,\n});\n"],"mappings":"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","names":["message"]}