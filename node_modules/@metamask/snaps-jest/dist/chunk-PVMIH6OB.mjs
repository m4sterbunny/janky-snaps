import {
  clickElement,
  getInterface,
  typeInField
} from "./chunk-I5P52IMF.mjs";
import {
  clearNotifications,
  getNotifications
} from "./chunk-LB4R3BUA.mjs";

// src/internals/request.ts
import { unwrapError } from "@metamask/snaps-utils";
import { getSafeJson, hasProperty, isPlainObject } from "@metamask/utils";
import { nanoid } from "@reduxjs/toolkit";
function handleRequest({
  snapId,
  store,
  executionService,
  handler,
  controllerMessenger,
  runSaga,
  request: { id = nanoid(), origin = "https://metamask.io", ...options }
}) {
  const promise = executionService.handleRpcRequest(snapId, {
    origin,
    handler,
    request: {
      jsonrpc: "2.0",
      id: 1,
      ...options
    }
  }).then(async (result) => {
    const notifications = getNotifications(store.getState());
    store.dispatch(clearNotifications());
    const getInterfaceFn = await getInterfaceApi(
      result,
      snapId,
      controllerMessenger
    );
    return {
      id: String(id),
      response: {
        result: getSafeJson(result)
      },
      notifications,
      ...getInterfaceFn ? { getInterface: getInterfaceFn } : {}
    };
  }).catch((error) => {
    const [unwrappedError] = unwrapError(error);
    return {
      id: String(id),
      response: {
        error: unwrappedError.serialize()
      },
      notifications: []
    };
  });
  promise.getInterface = async () => {
    return await runSaga(
      getInterface,
      runSaga,
      snapId,
      controllerMessenger
    ).toPromise();
  };
  return promise;
}
async function getInterfaceFromResult(result, snapId, controllerMessenger) {
  if (isPlainObject(result) && hasProperty(result, "id")) {
    return result.id;
  }
  if (isPlainObject(result) && hasProperty(result, "content")) {
    const id = await controllerMessenger.call(
      "SnapInterfaceController:createInterface",
      snapId,
      result.content
    );
    return id;
  }
  return void 0;
}
async function getInterfaceApi(result, snapId, controllerMessenger) {
  const interfaceId = await getInterfaceFromResult(
    result,
    snapId,
    controllerMessenger
  );
  if (interfaceId) {
    return () => {
      const { content } = controllerMessenger.call(
        "SnapInterfaceController:getInterface",
        snapId,
        interfaceId
      );
      return {
        content,
        clickElement: async (name) => {
          await clickElement(
            controllerMessenger,
            interfaceId,
            content,
            snapId,
            name
          );
        },
        typeInField: async (name, value) => {
          await typeInField(
            controllerMessenger,
            interfaceId,
            content,
            snapId,
            name,
            value
          );
        }
      };
    };
  }
  return void 0;
}

export {
  handleRequest,
  getInterfaceFromResult,
  getInterfaceApi
};
//# sourceMappingURL=chunk-PVMIH6OB.mjs.map