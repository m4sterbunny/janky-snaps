{"version":3,"sources":["../src/internals/simulation/controllers.ts"],"names":[],"mappings":";;;;;;;;AAOA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,+BAA+B;AAMxC;AAAA,EACE,wBAAwB;AAAA,EACxB,iCAAiC;AAAA,EACjC;AAAA,OACK;AAGP,SAAS,mBAAmB;AA0CrB,SAAS,eAAe,SAA6C;AAC1E,QAAM,EAAE,oBAAoB,IAAI;AAChC,QAAM,4BAA4B,IAAI,0BAA0B;AAAA,IAC9D,WAAW,oBAAoB,cAAc;AAAA,MAC3C,MAAM;AAAA,MACN,gBAAgB,CAAC;AAAA,MACjB,eAAe,CAAC;AAAA,IAClB,CAAC;AAAA,IACD,mBAAmB;AAAA,EACrB,CAAC;AAED,QAAM,sBAAsB,IAAI,wBAAwB;AAAA,IACtD,WAAW,oBAAoB,cAAc;AAAA,MAC3C,MAAM;AAAA,MACN,gBAAgB;AAAA,QACd;AAAA,QACA;AAAA,MACF;AAAA,MACA,eAAe,CAAC;AAAA,IAClB,CAAC;AAAA,EACH,CAAC;AAED,QAAM,uBAAuB,wBAAwB,OAAO;AAE5D,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAUA,SAAS,wBAAwB,SAAgC;AAC/D,QAAM,EAAE,oBAAoB,IAAI;AAChC,QAAM,2BAA2B,4BAA4B,OAAO;AACpE,SAAO,IAAI,qBAAqB;AAAA,IAC9B,WAAW,oBAAoB,cAAc;AAAA,MAC3C,MAAM;AAAA,MACN,gBAAgB;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,eAAe,CAAC;AAAA,IAClB,CAAC;AAAA,IACD,sBAAsB;AAAA,MACpB,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,IACA;AAAA,IACA,qBAAqB;AAAA,EACvB,CAAC;AACH;AAWA,eAAsB,aACpB,QACA,UACA;AAAA,EACE;AAAA,EACA;AACF,GACA;AACA,4BAA0B,mBAAmB;AAAA,IAC3C,QAAQ;AAAA,IACR,aAAa,YAAY;AAAA,EAC3B,CAAC;AAED,QAAM,sBAAsB;AAAA,IAC1B,YAAY,SAAS,kBAAkB;AAAA,EACzC;AAEA,uBAAqB,iBAAiB;AAAA,IACpC;AAAA,IACA,SAAS,EAAE,QAAQ,OAAO;AAAA,IAC1B,6BAA6B;AAAA,EAC/B,CAAC;AACH","sourcesContent":["import type { ControllerMessenger } from '@metamask/base-controller';\nimport type {\n  CaveatSpecificationConstraint,\n  PermissionSpecificationConstraint,\n  PermissionControllerActions,\n  SubjectMetadataControllerActions,\n} from '@metamask/permission-controller';\nimport {\n  PermissionController,\n  SubjectMetadataController,\n  SubjectType,\n} from '@metamask/permission-controller';\nimport { SnapInterfaceController } from '@metamask/snaps-controllers';\nimport type {\n  ExecutionServiceActions,\n  SnapInterfaceControllerActions,\n  SnapInterfaceControllerAllowedActions,\n} from '@metamask/snaps-controllers';\nimport {\n  caveatSpecifications as snapsCaveatsSpecifications,\n  endowmentCaveatSpecifications as snapsEndowmentCaveatSpecifications,\n  processSnapPermissions,\n} from '@metamask/snaps-rpc-methods';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport type { SnapManifest } from '@metamask/snaps-utils';\nimport { getSafeJson } from '@metamask/utils';\n\nimport { getPermissionSpecifications } from './methods';\nimport { UNRESTRICTED_METHODS } from './methods/constants';\nimport type { SimulationOptions } from './options';\nimport type { MiddlewareHooks } from './simulation';\nimport type { RunSagaFunction } from './store';\n\nexport type RootControllerAllowedActions =\n  | SnapInterfaceControllerActions\n  | SnapInterfaceControllerAllowedActions\n  | PermissionControllerActions\n  | ExecutionServiceActions\n  | SubjectMetadataControllerActions;\n\nexport type RootControllerMessenger = ControllerMessenger<\n  RootControllerAllowedActions,\n  any\n>;\n\nexport type GetControllersOptions = {\n  controllerMessenger: ControllerMessenger<any, any>;\n  hooks: MiddlewareHooks;\n  runSaga: RunSagaFunction;\n  options: SimulationOptions;\n};\n\nexport type Controllers = {\n  permissionController: PermissionController<\n    PermissionSpecificationConstraint,\n    CaveatSpecificationConstraint\n  >;\n  subjectMetadataController: SubjectMetadataController;\n  interfaceController: SnapInterfaceController;\n};\n\n/**\n * Get the controllers for the Snap.\n *\n * @param options - The options.\n * @returns The controllers for the Snap.\n */\nexport function getControllers(options: GetControllersOptions): Controllers {\n  const { controllerMessenger } = options;\n  const subjectMetadataController = new SubjectMetadataController({\n    messenger: controllerMessenger.getRestricted({\n      name: 'SubjectMetadataController',\n      allowedActions: [],\n      allowedEvents: [],\n    }),\n    subjectCacheLimit: 100,\n  });\n\n  const interfaceController = new SnapInterfaceController({\n    messenger: controllerMessenger.getRestricted({\n      name: 'SnapInterfaceController',\n      allowedActions: [\n        'PhishingController:maybeUpdateState',\n        'PhishingController:testOrigin',\n      ],\n      allowedEvents: [],\n    }),\n  });\n\n  const permissionController = getPermissionController(options);\n\n  return {\n    permissionController,\n    subjectMetadataController,\n    interfaceController,\n  };\n}\n\n/**\n * Get the permission controller for the Snap.\n *\n * @param options - The options.\n * @param options.controllerMessenger - The controller messenger.\n * @param options.options - Miscellaneous options.\n * @returns The permission controller for the Snap.\n */\nfunction getPermissionController(options: GetControllersOptions) {\n  const { controllerMessenger } = options;\n  const permissionSpecifications = getPermissionSpecifications(options);\n  return new PermissionController({\n    messenger: controllerMessenger.getRestricted({\n      name: 'PermissionController',\n      allowedActions: [\n        `ApprovalController:addRequest`,\n        `ApprovalController:hasRequest`,\n        `ApprovalController:acceptRequest`,\n        `ApprovalController:rejectRequest`,\n        `SnapController:getPermitted`,\n        `SnapController:install`,\n        `SubjectMetadataController:getSubjectMetadata`,\n      ],\n      allowedEvents: [],\n    }),\n    caveatSpecifications: {\n      ...snapsCaveatsSpecifications,\n      ...snapsEndowmentCaveatSpecifications,\n    },\n    permissionSpecifications,\n    unrestrictedMethods: UNRESTRICTED_METHODS,\n  });\n}\n\n/**\n * Register the Snap. This sets up the Snap's permissions and subject metadata.\n *\n * @param snapId - The ID of the Snap to install.\n * @param manifest - The parsed manifest.\n * @param controllers - The controllers for the Snap.\n * @param controllers.permissionController - The permission controller.\n * @param controllers.subjectMetadataController - The subject metadata controller.\n */\nexport async function registerSnap(\n  snapId: SnapId,\n  manifest: SnapManifest,\n  {\n    permissionController,\n    subjectMetadataController,\n  }: Omit<Controllers, 'interfaceController'>,\n) {\n  subjectMetadataController.addSubjectMetadata({\n    origin: snapId,\n    subjectType: SubjectType.Snap,\n  });\n\n  const approvedPermissions = processSnapPermissions(\n    getSafeJson(manifest.initialPermissions),\n  );\n\n  permissionController.grantPermissions({\n    approvedPermissions,\n    subject: { origin: snapId },\n    preserveExistingPermissions: false,\n  });\n}\n"]}