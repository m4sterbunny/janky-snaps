{"version":3,"sources":["../src/internals/simulation/store/ui.ts"],"names":[],"mappings":";AAEA,SAAS,cAAc,gBAAgB,mBAAmB;AAa1D,IAAM,gBAAyB;AAAA,EAC7B,SAAS;AACX;AAEO,IAAM,UAAU,YAAY;AAAA,EACjC,MAAM;AAAA,EACN,cAAc;AAAA,EACd,UAAU;AAAA,IACR,aAAa,OAAO,QAAkC;AACpD,YAAM,UAAU,OAAO;AAAA,IACzB;AAAA,IACA,eAAe,OAAO;AACpB,YAAM,UAAU;AAAA,IAClB;AAAA,EACF;AACF,CAAC;AAEM,IAAM,mBAAmB;AAAA,EAC9B,GAAG,QAAQ,IAAI;AACjB;AAEO,IAAM,EAAE,cAAc,eAAe,IAAI,QAAQ;AAEjD,IAAM,sBAAsB;AAAA,EACjC,CAAC,UAA4B,MAAM;AAAA,EACnC,CAAC,OAAO,GAAG;AACb","sourcesContent":["import type { DialogType } from '@metamask/snaps-sdk';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport { createAction, createSelector, createSlice } from '@reduxjs/toolkit';\n\nimport type { ApplicationState } from './store';\n\nexport type Interface = {\n  type: DialogType;\n  id: string;\n};\n\nexport type UiState = {\n  current?: Interface | null;\n};\n\nconst INITIAL_STATE: UiState = {\n  current: null,\n};\n\nexport const uiSlice = createSlice({\n  name: 'ui',\n  initialState: INITIAL_STATE,\n  reducers: {\n    setInterface(state, action: PayloadAction<Interface>) {\n      state.current = action.payload;\n    },\n    closeInterface(state) {\n      state.current = null;\n    },\n  },\n});\n\nexport const resolveInterface = createAction<unknown>(\n  `${uiSlice.name}/resolveInterface`,\n);\n\nexport const { setInterface, closeInterface } = uiSlice.actions;\n\nexport const getCurrentInterface = createSelector(\n  (state: ApplicationState) => state.ui,\n  (ui) => ui.current,\n);\n"]}