{"version":3,"sources":["../src/handlers.ts"],"sourcesContent":["import type {\n  OnCronjobHandler,\n  OnHomePageHandler,\n  OnInstallHandler,\n  OnKeyringRequestHandler,\n  OnNameLookupHandler,\n  OnRpcRequestHandler,\n  OnSignatureHandler,\n  OnTransactionHandler,\n  OnUpdateHandler,\n  OnUserInputHandler,\n} from '@metamask/snaps-sdk';\nimport { SeverityLevel, ComponentStruct } from '@metamask/snaps-sdk';\nimport {\n  assign,\n  literal,\n  nullable,\n  object,\n  optional,\n  string,\n  array,\n  size,\n  union,\n} from 'superstruct';\n\nimport type { SnapHandler } from './handler-types';\nimport { HandlerType } from './handler-types';\n\nexport type SnapRpcHookArgs = {\n  origin: string;\n  handler: HandlerType;\n  request: Record<string, unknown>;\n};\n\nexport const SNAP_EXPORTS = {\n  [HandlerType.OnRpcRequest]: {\n    type: HandlerType.OnRpcRequest,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnRpcRequestHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnTransaction]: {\n    type: HandlerType.OnTransaction,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnTransactionHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnCronjob]: {\n    type: HandlerType.OnCronjob,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnCronjobHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnNameLookup]: {\n    type: HandlerType.OnNameLookup,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnNameLookupHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnInstall]: {\n    type: HandlerType.OnInstall,\n    required: false,\n    validator: (snapExport: unknown): snapExport is OnInstallHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnUpdate]: {\n    type: HandlerType.OnUpdate,\n    required: false,\n    validator: (snapExport: unknown): snapExport is OnUpdateHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnKeyringRequest]: {\n    type: HandlerType.OnKeyringRequest,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnKeyringRequestHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnHomePage]: {\n    type: HandlerType.OnHomePage,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnHomePageHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnSignature]: {\n    type: HandlerType.OnSignature,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnSignatureHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n  [HandlerType.OnUserInput]: {\n    type: HandlerType.OnUserInput,\n    required: true,\n    validator: (snapExport: unknown): snapExport is OnUserInputHandler => {\n      return typeof snapExport === 'function';\n    },\n  },\n} as const;\n\nexport const OnTransactionSeverityResponseStruct = object({\n  severity: optional(literal(SeverityLevel.Critical)),\n});\n\nexport const OnTransactionResponseWithIdStruct = assign(\n  OnTransactionSeverityResponseStruct,\n  object({\n    id: string(),\n  }),\n);\n\nexport const OnTransactionResponseWithContentStruct = assign(\n  OnTransactionSeverityResponseStruct,\n  object({\n    content: ComponentStruct,\n  }),\n);\n\nexport const OnTransactionResponseStruct = nullable(\n  union([\n    OnTransactionResponseWithContentStruct,\n    OnTransactionResponseWithIdStruct,\n  ]),\n);\n\nexport const OnSignatureResponseStruct = OnTransactionResponseStruct;\n\nexport const OnHomePageResponseWithContentStruct = object({\n  content: ComponentStruct,\n});\n\nexport const OnHomePageResponseWithIdStruct = object({\n  id: string(),\n});\n\nexport const OnHomePageResponseStruct = union([\n  OnHomePageResponseWithContentStruct,\n  OnHomePageResponseWithIdStruct,\n]);\n\nexport const AddressResolutionStruct = object({\n  protocol: string(),\n  resolvedDomain: string(),\n});\n\nexport const DomainResolutionStruct = object({\n  protocol: string(),\n  resolvedAddress: string(),\n});\n\nexport const AddressResolutionResponseStruct = object({\n  resolvedDomains: size(array(AddressResolutionStruct), 1, Infinity),\n});\n\nexport const DomainResolutionResponseStruct = object({\n  resolvedAddresses: size(array(DomainResolutionStruct), 1, Infinity),\n});\n\nexport const OnNameLookupResponseStruct = nullable(\n  union([AddressResolutionResponseStruct, DomainResolutionResponseStruct]),\n);\n\n/**\n * Utility type for getting the handler function type from a handler type.\n */\nexport type HandlerFunction<Type extends SnapHandler> =\n  Type['validator'] extends (snapExport: unknown) => snapExport is infer Handler\n    ? Handler\n    : never;\n\n/**\n * All the function-based handlers that a snap can implement.\n */\nexport type SnapFunctionExports = {\n  [Key in keyof typeof SNAP_EXPORTS]?: HandlerFunction<\n    (typeof SNAP_EXPORTS)[Key]\n  >;\n};\n\n/**\n * All handlers that a snap can implement.\n */\nexport type SnapExports = SnapFunctionExports;\n"],"mappings":"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","names":[]}