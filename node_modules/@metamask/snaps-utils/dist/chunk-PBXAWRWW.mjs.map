{"version":3,"sources":["../src/derivation-paths.ts"],"sourcesContent":["import type { SupportedCurve } from '@metamask/key-tree';\nimport slip44 from '@metamask/slip44';\n\nimport { isEqual } from './array';\n\nexport type SnapsDerivationPath = {\n  path: ['m', ...string[]];\n  curve: SupportedCurve;\n  name: string;\n};\n\nexport const SNAPS_DERIVATION_PATHS: SnapsDerivationPath[] = [\n  {\n    path: ['m', `44'`, `0'`],\n    curve: 'ed25519',\n    name: 'Test BIP-32 Path (ed25519)',\n  },\n  {\n    path: ['m', `44'`, `1'`],\n    curve: 'secp256k1',\n    name: 'Testnet',\n  },\n  {\n    path: ['m', `44'`, `0'`],\n    curve: 'secp256k1',\n    name: 'Bitcoin Legacy',\n  },\n  {\n    path: ['m', `49'`, `0'`],\n    curve: 'secp256k1',\n    name: 'Bitcoin Nested SegWit',\n  },\n  {\n    path: ['m', `49'`, `1'`],\n    curve: 'secp256k1',\n    name: 'Bitcoin Testnet Nested SegWit',\n  },\n  {\n    path: ['m', `84'`, `0'`],\n    curve: 'secp256k1',\n    name: 'Bitcoin Native SegWit',\n  },\n  {\n    path: ['m', `84'`, `1'`],\n    curve: 'secp256k1',\n    name: 'Bitcoin Testnet Native SegWit',\n  },\n  {\n    path: ['m', `44'`, `501'`],\n    curve: 'ed25519',\n    name: 'Solana',\n  },\n  {\n    path: ['m', `44'`, `501'`, \"0'\", \"0'\"],\n    curve: 'ed25519',\n    name: 'Solana',\n  },\n  {\n    path: ['m', `44'`, `2'`],\n    curve: 'secp256k1',\n    name: 'Litecoin',\n  },\n  {\n    path: ['m', `44'`, `3'`],\n    curve: 'secp256k1',\n    name: 'Dogecoin',\n  },\n  {\n    path: ['m', `44'`, `60'`],\n    curve: 'secp256k1',\n    name: 'Ethereum',\n  },\n  {\n    path: ['m', `44'`, `118'`],\n    curve: 'secp256k1',\n    name: 'Atom',\n  },\n  {\n    path: ['m', `44'`, `145'`],\n    curve: 'secp256k1',\n    name: 'Bitcoin Cash',\n  },\n  {\n    path: ['m', `44'`, `637'`],\n    curve: 'ed25519',\n    name: 'Aptos',\n  },\n  {\n    path: ['m', `44'`, `714'`],\n    curve: 'secp256k1',\n    name: 'Binance (BNB)',\n  },\n  {\n    path: ['m', `44'`, `784'`],\n    curve: 'ed25519',\n    name: 'Sui',\n  },\n  {\n    path: ['m', `44'`, `931'`],\n    curve: 'secp256k1',\n    name: 'THORChain (RUNE)',\n  },\n  {\n    path: ['m', `44'`, `330'`],\n    curve: 'secp256k1',\n    name: 'Terra (LUNA)',\n  },\n  {\n    path: ['m', `44'`, `459'`],\n    curve: 'secp256k1',\n    name: 'Kava',\n  },\n  {\n    path: ['m', `44'`, `529'`],\n    curve: 'secp256k1',\n    name: 'Secret Network',\n  },\n  {\n    path: ['m', `44'`, `397'`, `0'`],\n    curve: 'ed25519',\n    name: 'NEAR Protocol',\n  },\n  {\n    path: ['m', `44'`, `1'`, `0'`],\n    curve: 'ed25519',\n    name: 'Testnet',\n  },\n  {\n    path: ['m', `44'`, `472'`],\n    curve: 'ed25519',\n    name: 'Arweave',\n  },\n  {\n    path: ['m', `44'`, `12586'`],\n    curve: 'secp256k1',\n    name: 'Mina',\n  },\n  {\n    path: ['m', `44'`, `242'`],\n    curve: 'ed25519',\n    name: 'Nimiq',\n  },\n  {\n    path: ['m', `44'`, `1729'`, `0'`, `0'`],\n    curve: 'ed25519',\n    name: 'Tezos',\n  },\n  {\n    path: ['m', `1789'`, `0'`],\n    curve: 'ed25519',\n    name: 'Vega',\n  },\n];\n\n/**\n * Gets the name of a derivation path supported by snaps.\n *\n * @param path - The derivation path.\n * @param curve - The curve used to derive the keys.\n * @returns The name of the derivation path, otherwise null.\n */\nexport function getSnapDerivationPathName(\n  path: SnapsDerivationPath['path'],\n  curve: SupportedCurve,\n): string | null {\n  const pathMetadata = SNAPS_DERIVATION_PATHS.find(\n    (derivationPath) =>\n      derivationPath.curve === curve && isEqual(derivationPath.path, path),\n  );\n\n  if (pathMetadata) {\n    return pathMetadata.name;\n  }\n\n  // If the curve is secp256k1 and the path is a valid BIP44 path\n  // we try looking for the network/protocol name in SLIP44\n  if (\n    curve === 'secp256k1' &&\n    path[0] === 'm' &&\n    path[1] === `44'` &&\n    path[2].endsWith(`'`)\n  ) {\n    const coinType = path[2].slice(0, -1);\n    return getSlip44ProtocolName(coinType) ?? null;\n  }\n\n  return null;\n}\n\n/**\n * Gets the name of the SLIP-44 protocol corresponding to the specified\n * `coin_type`.\n *\n * @param coinType - The SLIP-44 `coin_type` value whose name\n * to retrieve.\n * @returns The name of the protocol, otherwise null.\n */\nexport function getSlip44ProtocolName(coinType: number | string) {\n  if (String(coinType) === '1') {\n    return 'Test Networks';\n  }\n\n  return slip44[coinType as keyof typeof slip44]?.name ?? null;\n}\n"],"mappings":"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","names":[]}