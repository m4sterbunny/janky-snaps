{"version":3,"sources":["../src/mock.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,YAAY;AACnB,OAAO,kBAAkB;AAIzB,IAAM,eAAe,CAAC,SAAS,WAAW,WAAW,UAAU;AAExD,IAAM,WAAqB;AAAA,EAChC,GAAG;AAAA,EACH,GAAG;AAAA,EACH;AACF;AAeA,SAAS,oBAAoC;AAE3C,SAAO,EAAE,SAAS,YAAY,KAAK;AACrC;AAOA,SAAS,0BAAgD;AACvD,QAAM,eAAe,IAAI,aAAa;AAEtC,eAAa,UAAU,YAAY;AACnC,SAAO;AACT;AAQO,IAAM,gBAAgB,CAAC,UAC5B,QAAQ,OAAO,OAAO,WAAW,aAAa,SAAS,QAAQ;AAOjE,IAAM,eAAe,MAAM;AAC3B,IAAM,YAAN,MAAgB;AAAC;AAEjB,IAAM,UAAU;AAAA;AAAA,EAEd,UAAU,QAAa,MAAkB;AACvC,WAAO,IAAI,MAAM,IAAI,OAAO,GAAG,IAAI,GAAG,OAAO;AAAA,EAC/C;AAAA,EACA,IAAI,SAAc,OAAY;AAC5B,WAAO;AAAA,EACT;AACF;AASA,IAAM,oBAAoB,CAAC,UAAe;AACxC,SAAO,IAAI,MAAM,OAAO,OAAO;AACjC;AAIA,IAAM,aAAsC;AAAA,EAC1C;AAAA,EACA,cAAc;AAChB;AAUA,IAAM,wBAAwB,CAAC,QAAgB;AAC7C,QAAM,cAAe,WAAmB,GAAG;AAG3C,MAAI,eAAe,mBAAmB,SAAS,GAAG,GAAG;AACnD,WAAO;AAAA,EACT;AAGA,QAAM,iBAAiB,eAAe,WAAW,GAAG;AAEpD,QAAM,OAAO,OAAO;AACpB,QAAM,aAAa,SAAS;AAC5B,MAAI,cAAc,cAAc,cAAc,GAAG;AAC/C,WAAO,kBAAkB,cAAc;AAAA,EACzC,WAAW,cAAc,CAAC,gBAAgB;AAExC,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAOO,IAAM,yBAAyB,MAAM;AAC1C,SAAO,SAAS;AAAA,IACd,CAAC,KAAK,SAAS,EAAE,GAAG,KAAK,CAAC,GAAG,GAAG,sBAAsB,GAAG,EAAE;AAAA,IAC3D,EAAE,MAAM,kBAAkB,GAAG,UAAU,wBAAwB,EAAE;AAAA,EACnE;AACF","sourcesContent":["import crypto from 'crypto';\nimport EventEmitter from 'events';\n\nimport { DEFAULT_ENDOWMENTS } from './default-endowments';\n\nconst NETWORK_APIS = ['fetch', 'Request', 'Headers', 'Response'];\n\nexport const ALL_APIS: string[] = [\n  ...DEFAULT_ENDOWMENTS,\n  ...NETWORK_APIS,\n  'WebAssembly',\n];\n\ntype MockSnapGlobal = {\n  request: () => Promise<any>;\n};\n\ntype MockEthereumProvider = EventEmitter & {\n  request: () => Promise<any>;\n};\n\n/**\n * Get a mock snap API, that always returns `true` for requests.\n *\n * @returns A mocked snap provider.\n */\nfunction getMockSnapGlobal(): MockSnapGlobal {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  return { request: async () => true };\n}\n\n/**\n * Get a mock Ethereum provider, that always returns `true` for requests.\n *\n * @returns A mocked ethereum provider.\n */\nfunction getMockEthereumProvider(): MockEthereumProvider {\n  const mockProvider = new EventEmitter() as Partial<MockEthereumProvider>;\n  // eslint-disable-next-line @typescript-eslint/require-await\n  mockProvider.request = async () => true;\n  return mockProvider as MockEthereumProvider;\n}\n\n/**\n * Check if a value is a constructor.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nexport const isConstructor = (value: any) =>\n  Boolean(typeof value?.prototype?.constructor?.name === 'string');\n\n/**\n * A function that always returns `true`.\n *\n * @returns `true`.\n */\nconst mockFunction = () => true;\nclass MockClass {}\n\nconst handler = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  construct(Target: any, args: any[]): any {\n    return new Proxy(new Target(...args), handler);\n  },\n  get(_target: any, _prop: any) {\n    return mockFunction;\n  },\n};\n\n/**\n * Generate a mock class for a given value. The value is wrapped in a Proxy, and\n * all methods are replaced with a mock function.\n *\n * @param value - The value to mock.\n * @returns A mock class.\n */\nconst generateMockClass = (value: any) => {\n  return new Proxy(value, handler);\n};\n\n// Things not currently auto-mocked because of NodeJS, by adding them here we\n// have types for them and can use that to generate mocks if needed.\nconst mockWindow: Record<string, unknown> = {\n  crypto,\n  SubtleCrypto: MockClass,\n};\n\n/**\n * Generate a mock endowment for a certain class or function on the `globalThis`\n * object.\n *\n * @param key - The key to generate the mock endowment for.\n * @returns A mocked class or function. If the key is part of the default\n * endowments, the original value is returned.\n */\nconst generateMockEndowment = (key: string) => {\n  const globalValue = (globalThis as any)[key];\n\n  // Default exposed APIs don't need to be mocked\n  if (globalValue && DEFAULT_ENDOWMENTS.includes(key)) {\n    return globalValue;\n  }\n\n  // Fall back to mockWindow for certain APIs not exposed in global in Node.JS\n  const globalOrMocked = globalValue ?? mockWindow[key];\n\n  const type = typeof globalOrMocked;\n  const isFunction = type === 'function';\n  if (isFunction && isConstructor(globalOrMocked)) {\n    return generateMockClass(globalOrMocked);\n  } else if (isFunction || !globalOrMocked) {\n    // Fall back to function mock for now\n    return mockFunction;\n  }\n  return globalOrMocked;\n};\n\n/**\n * Generate mock endowments for all the APIs as defined in {@link ALL_APIS}.\n *\n * @returns A map of endowments.\n */\nexport const generateMockEndowments = () => {\n  return ALL_APIS.reduce<Record<string, any>>(\n    (acc, cur) => ({ ...acc, [cur]: generateMockEndowment(cur) }),\n    { snap: getMockSnapGlobal(), ethereum: getMockEthereumProvider() },\n  );\n};\n"]}