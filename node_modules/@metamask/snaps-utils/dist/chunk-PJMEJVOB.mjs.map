{"version":3,"sources":["../src/iframe.ts"],"sourcesContent":["/**\n * Creates the iframe to be used as the execution environment. This may run\n * forever if the iframe never loads, but the promise should be wrapped in\n * an initialization timeout in the SnapController.\n *\n * @param uri - The iframe URI.\n * @param id - The ID to assign to the iframe.\n * @param sandbox - Whether to enable the sandbox attribute.\n * @returns A promise that resolves to the contentWindow of the iframe.\n */\nexport async function createWindow(\n  uri: string,\n  id: string,\n  sandbox = true,\n): Promise<Window> {\n  return await new Promise((resolve, reject) => {\n    const iframe = document.createElement('iframe');\n    // The order of operations appears to matter for everything except this\n    // attribute. We may as well set it here.\n    iframe.setAttribute('id', id);\n    iframe.setAttribute('data-testid', 'snaps-iframe');\n\n    if (sandbox) {\n      // For the sandbox property to have any effect it needs to be set before the iframe is appended.\n      // We apply this property as a principle of least authority (POLA)\n      // measure.\n      // Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n      iframe.setAttribute('sandbox', 'allow-scripts');\n    }\n\n    // In the past, we've had problems that appear to be symptomatic of the\n    // iframe firing the `load` event before its scripts are actually loaded,\n    // which has prevented snaps from executing properly. Therefore, we set\n    // the `src` attribute and append the iframe to the DOM before attaching\n    // the `load` listener.\n    //\n    // `load` should only fire when \"all dependent resources\" have been\n    // loaded, which includes scripts.\n    //\n    // MDN article for `load` event: https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event\n    // Re: `load` firing twice: https://stackoverflow.com/questions/10781880/dynamically-created-iframe-triggers-onload-event-twice/15880489#15880489\n    iframe.setAttribute('src', uri);\n    document.body.appendChild(iframe);\n\n    iframe.addEventListener('load', () => {\n      if (iframe.contentWindow) {\n        resolve(iframe.contentWindow);\n      } else {\n        // We don't know of a case when this would happen, but better to fail\n        // fast if it does.\n        reject(\n          new Error(\n            `iframe.contentWindow not present on load for job \"${id}\".`,\n          ),\n        );\n      }\n    });\n  });\n}\n"],"mappings":";AAUA,eAAsB,aACpB,KACA,IACA,UAAU,MACO;AACjB,SAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,UAAM,SAAS,SAAS,cAAc,QAAQ;AAG9C,WAAO,aAAa,MAAM,EAAE;AAC5B,WAAO,aAAa,eAAe,cAAc;AAEjD,QAAI,SAAS;AAKX,aAAO,aAAa,WAAW,eAAe;AAAA,IAChD;AAaA,WAAO,aAAa,OAAO,GAAG;AAC9B,aAAS,KAAK,YAAY,MAAM;AAEhC,WAAO,iBAAiB,QAAQ,MAAM;AACpC,UAAI,OAAO,eAAe;AACxB,gBAAQ,OAAO,aAAa;AAAA,MAC9B,OAAO;AAGL;AAAA,UACE,IAAI;AAAA,YACF,qDAAqD,EAAE;AAAA,UACzD;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;","names":[]}