{"version":3,"sources":["../src/constants.ts"],"sourcesContent":["import {\n  NetworkType,\n  NetworksTicker,\n  ChainId,\n  BuiltInNetworkName,\n} from './types';\n\nexport const RPC = 'rpc';\nexport const FALL_BACK_VS_CURRENCY = 'ETH';\nexport const IPFS_DEFAULT_GATEWAY_URL = 'https://cloudflare-ipfs.com/ipfs/';\n\n// NETWORKS ID\n// `toHex` not invoked to avoid cyclic dependency\nexport const GANACHE_CHAIN_ID = '0x539'; // toHex(1337)\n/**\n * The largest possible chain ID we can handle.\n * Explanation: https://gist.github.com/rekmarks/a47bd5f2525936c4b8eee31a16345553\n */\nexport const MAX_SAFE_CHAIN_ID = 4503599627370476;\n\n// TOKEN STANDARDS\nexport const ERC721 = 'ERC721';\nexport const ERC1155 = 'ERC1155';\nexport const ERC20 = 'ERC20';\n\n// TOKEN INTERFACE IDS\nexport const ERC721_INTERFACE_ID = '0x80ac58cd';\nexport const ERC721_METADATA_INTERFACE_ID = '0x5b5e139f';\nexport const ERC721_ENUMERABLE_INTERFACE_ID = '0x780e9d63';\nexport const ERC1155_INTERFACE_ID = '0xd9b67a26';\nexport const ERC1155_METADATA_URI_INTERFACE_ID = '0x0e89341c';\nexport const ERC1155_TOKEN_RECEIVER_INTERFACE_ID = '0x4e2312e0';\n\n// UNITS\nexport const GWEI = 'gwei';\n\n// ASSET TYPES\nexport const ASSET_TYPES = {\n  NATIVE: 'NATIVE',\n  TOKEN: 'TOKEN',\n  NFT: 'NFT',\n  UNKNOWN: 'UNKNOWN',\n};\n\n// TICKER SYMBOLS\nexport const TESTNET_TICKER_SYMBOLS = {\n  GOERLI: 'GoerliETH',\n  SEPOLIA: 'SepoliaETH',\n  LINEA_GOERLI: 'LineaETH',\n  LINEA_SEPOLIA: 'LineaETH',\n};\n\n/**\n * Map of all build-in Infura networks to their network, ticker and chain IDs.\n */\nexport const BUILT_IN_NETWORKS = {\n  [NetworkType.goerli]: {\n    chainId: ChainId.goerli,\n    ticker: NetworksTicker.goerli,\n    rpcPrefs: {\n      blockExplorerUrl: `https://${NetworkType.goerli}.etherscan.io`,\n    },\n  },\n  [NetworkType.sepolia]: {\n    chainId: ChainId.sepolia,\n    ticker: NetworksTicker.sepolia,\n    rpcPrefs: {\n      blockExplorerUrl: `https://${NetworkType.sepolia}.etherscan.io`,\n    },\n  },\n  [NetworkType.mainnet]: {\n    chainId: ChainId.mainnet,\n    ticker: NetworksTicker.mainnet,\n    rpcPrefs: {\n      blockExplorerUrl: 'https://etherscan.io',\n    },\n  },\n  [NetworkType['linea-goerli']]: {\n    chainId: ChainId['linea-goerli'],\n    ticker: NetworksTicker['linea-goerli'],\n    rpcPrefs: {\n      blockExplorerUrl: 'https://goerli.lineascan.build',\n    },\n  },\n  [NetworkType['linea-sepolia']]: {\n    chainId: ChainId['linea-sepolia'],\n    ticker: NetworksTicker['linea-sepolia'],\n    rpcPrefs: {\n      blockExplorerUrl: 'https://sepolia.lineascan.build',\n    },\n  },\n  [NetworkType['linea-mainnet']]: {\n    chainId: ChainId['linea-mainnet'],\n    ticker: NetworksTicker['linea-mainnet'],\n    rpcPrefs: {\n      blockExplorerUrl: 'https://lineascan.build',\n    },\n  },\n  [NetworkType.rpc]: {\n    chainId: undefined,\n    blockExplorerUrl: undefined,\n    ticker: undefined,\n    rpcPrefs: undefined,\n  },\n} as const;\n\n// APIs\nexport const OPENSEA_PROXY_URL =\n  'https://proxy.metafi.codefi.network/opensea/v1/api/v2';\n\n// Default origin for controllers\nexport const ORIGIN_METAMASK = 'metamask';\n\n/**\n * Approval request types for various operations.\n * These types are used by different controllers to create and manage\n * approval requests consistently.\n */\nexport enum ApprovalType {\n  AddEthereumChain = 'wallet_addEthereumChain',\n  ConnectAccounts = 'connect_accounts',\n  EthDecrypt = 'eth_decrypt',\n  EthGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n  EthSign = 'eth_sign',\n  EthSignTypedData = 'eth_signTypedData',\n  PersonalSign = 'personal_sign',\n  ResultError = 'result_error',\n  ResultSuccess = 'result_success',\n  SnapDialogAlert = 'snap_dialog:alert',\n  SnapDialogConfirmation = 'snap_dialog:confirmation',\n  SnapDialogPrompt = 'snap_dialog:prompt',\n  SwitchEthereumChain = 'wallet_switchEthereumChain',\n  Transaction = 'transaction',\n  Unlock = 'unlock',\n  WalletConnect = 'wallet_connect',\n  WalletRequestPermissions = 'wallet_requestPermissions',\n  WatchAsset = 'wallet_watchAsset',\n}\n\nexport const CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP: Record<\n  ChainId,\n  BuiltInNetworkName\n> = {\n  [ChainId.goerli]: BuiltInNetworkName.Goerli,\n  [ChainId.sepolia]: BuiltInNetworkName.Sepolia,\n  [ChainId.mainnet]: BuiltInNetworkName.Mainnet,\n  [ChainId['linea-goerli']]: BuiltInNetworkName.LineaGoerli,\n  [ChainId['linea-sepolia']]: BuiltInNetworkName.LineaSepolia,\n  [ChainId['linea-mainnet']]: BuiltInNetworkName.LineaMainnet,\n  [ChainId.aurora]: BuiltInNetworkName.Aurora,\n};\n"],"mappings":"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","names":["ApprovalType"]}