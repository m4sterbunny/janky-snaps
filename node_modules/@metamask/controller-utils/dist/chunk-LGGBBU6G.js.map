{"version":3,"sources":["../src/types.ts"],"names":["BuiltInNetworkName","NetworksTicker"],"mappings":";AAGO,IAAM,oBAAoB;AAAA,EAC/B,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,iBAAiB;AACnB;AAQO,IAAM,cAAc;AAAA,EACzB,GAAG;AAAA,EACH,KAAK;AACP;AAUO,SAAS,cAAc,KAAiC;AAC7D,SAAO,OAAO,OAAO,WAAW,EAAE,SAAS,GAAkB;AAC/D;AASO,SAAS,oBACd,OAC4B;AAC5B,QAAM,qBAAgC,OAAO,KAAK,iBAAiB;AACnE,SAAO,mBAAmB,SAAS,KAAK;AAC1C;AAOO,IAAK,qBAAL,kBAAKA,wBAAL;AACL,EAAAA,oBAAA,aAAU;AACV,EAAAA,oBAAA,YAAS;AACT,EAAAA,oBAAA,aAAU;AACV,EAAAA,oBAAA,iBAAc;AACd,EAAAA,oBAAA,kBAAe;AACf,EAAAA,oBAAA,kBAAe;AACf,EAAAA,oBAAA,YAAS;AAPC,SAAAA;AAAA,GAAA;AAeL,IAAM,UAAU;AAAA,EACrB,CAAC,uBAA0B,GAAG;AAAA;AAAA,EAC9B,CAAC,qBAAyB,GAAG;AAAA;AAAA,EAC7B,CAAC,uBAA0B,GAAG;AAAA;AAAA,EAC9B,CAAC,qBAAyB,GAAG;AAAA;AAAA,EAC7B,CAAC,gCAA8B,GAAG;AAAA;AAAA,EAClC,CAAC,kCAA+B,GAAG;AAAA;AAAA,EACnC,CAAC,kCAA+B,GAAG;AAAA;AACrC;AAGO,IAAK,iBAAL,kBAAKC,oBAAL;AACL,EAAAA,gBAAA,aAAU;AACV,EAAAA,gBAAA,YAAS;AACT,EAAAA,gBAAA,aAAU;AACV,EAAAA,gBAAA,kBAAiB;AACjB,EAAAA,gBAAA,mBAAkB;AAClB,EAAAA,gBAAA,mBAAkB;AAClB,EAAAA,gBAAA,SAAM;AAPI,SAAAA;AAAA,GAAA","sourcesContent":["/**\n * The names of built-in Infura networks\n */\nexport const InfuraNetworkType = {\n  mainnet: 'mainnet',\n  goerli: 'goerli',\n  sepolia: 'sepolia',\n  'linea-goerli': 'linea-goerli',\n  'linea-sepolia': 'linea-sepolia',\n  'linea-mainnet': 'linea-mainnet',\n} as const;\n\nexport type InfuraNetworkType =\n  (typeof InfuraNetworkType)[keyof typeof InfuraNetworkType];\n\n/**\n * The \"network type\"; either the name of a built-in network, or \"rpc\" for custom networks.\n */\nexport const NetworkType = {\n  ...InfuraNetworkType,\n  rpc: 'rpc',\n} as const;\n\nexport type NetworkType = (typeof NetworkType)[keyof typeof NetworkType];\n\n/**\n * A helper to determine whether a given input is NetworkType.\n *\n * @param val - the value to check whether it is NetworkType or not.\n * @returns boolean indicating whether or not the argument is NetworkType.\n */\nexport function isNetworkType(val: string): val is NetworkType {\n  return Object.values(NetworkType).includes(val as NetworkType);\n}\n\n/**\n * A type guard to determine whether the input is an InfuraNetworkType.\n *\n * @param value - The value to check.\n * @returns True if the given value is within the InfuraNetworkType enum,\n * false otherwise.\n */\nexport function isInfuraNetworkType(\n  value: unknown,\n): value is InfuraNetworkType {\n  const infuraNetworkTypes: unknown[] = Object.keys(InfuraNetworkType);\n  return infuraNetworkTypes.includes(value);\n}\n\n/**\n * Names of networks built into the wallet.\n *\n * This includes both Infura and non-Infura networks.\n */\nexport enum BuiltInNetworkName {\n  Mainnet = 'mainnet',\n  Goerli = 'goerli',\n  Sepolia = 'sepolia',\n  LineaGoerli = 'linea-goerli',\n  LineaSepolia = 'linea-sepolia',\n  LineaMainnet = 'linea-mainnet',\n  Aurora = 'aurora',\n}\n\n/**\n * Decimal string chain IDs of built-in networks, by name.\n *\n * `toHex` not invoked to avoid cyclic dependency\n */\nexport const ChainId = {\n  [BuiltInNetworkName.Mainnet]: '0x1', // toHex(1)\n  [BuiltInNetworkName.Goerli]: '0x5', // toHex(5)\n  [BuiltInNetworkName.Sepolia]: '0xaa36a7', // toHex(11155111)\n  [BuiltInNetworkName.Aurora]: '0x4e454152', // toHex(1313161554)\n  [BuiltInNetworkName.LineaGoerli]: '0xe704', // toHex(59140)\n  [BuiltInNetworkName.LineaSepolia]: '0xe705', // toHex(59141)\n  [BuiltInNetworkName.LineaMainnet]: '0xe708', // toHex(59144)\n} as const;\nexport type ChainId = (typeof ChainId)[keyof typeof ChainId];\n\nexport enum NetworksTicker {\n  mainnet = 'ETH',\n  goerli = 'GoerliETH',\n  sepolia = 'SepoliaETH',\n  'linea-goerli' = 'LineaETH',\n  'linea-sepolia' = 'LineaETH',\n  'linea-mainnet' = 'ETH',\n  rpc = '',\n}\n"]}