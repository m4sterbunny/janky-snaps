{"version":3,"sources":["../src/siwe.ts"],"sourcesContent":["import { remove0x } from '@metamask/utils';\nimport { ParsedMessage } from '@spruceid/siwe-parser';\n\nimport { projectLogger, createModuleLogger } from './logger';\n\nconst log = createModuleLogger(projectLogger, 'detect-siwe');\n\n/**\n * This function strips the hex prefix from a string if it has one.\n * If the input is not a string, return it unmodified.\n *\n * @param str - The string to check\n * @returns The string without the hex prefix\n */\nfunction safeStripHexPrefix(str: string) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return remove0x(str);\n}\n\n/**\n * This function converts a hex string to text if it's not a 32 byte hex string.\n *\n * @param hex - The hex string to convert to text\n * @returns The text representation of the hex string\n */\nfunction msgHexToText(hex: string): string {\n  try {\n    const stripped = safeStripHexPrefix(hex);\n    const buff = Buffer.from(stripped, 'hex');\n    return buff.length === 32 ? hex : buff.toString('utf8');\n  } catch (e) {\n    log(e);\n    return hex;\n  }\n}\n\n/**\n * @type WrappedSIWERequest\n *\n * Sign-In With Ethereum (SIWE)(EIP-4361) message with request metadata\n * @property {string} from - Subject account address\n * @property {string} origin - The RFC 3986 originating authority of the signing request, including scheme\n * @property {ParsedMessage} siwe - The data parsed from the message\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface WrappedSIWERequest {\n  from: string;\n  origin: string;\n  siwe: SIWEMessage;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface DomainParts {\n  username?: string;\n  hostname: string;\n  port?: string;\n}\n\nconst DEFAULT_PORTS_BY_PROTOCOL = {\n  'http:': '80',\n  'https:': '443',\n} as Record<string, string>;\n\n/**\n * Parses parts from RFC 3986 authority from EIP-4361 `domain` field.\n *\n * @param domain - input string\n * @param originProtocol - implied protocol from origin\n * @returns parsed parts\n */\nexport const parseDomainParts = (\n  domain: string,\n  originProtocol: string,\n): DomainParts => {\n  if (domain.match(/^[^/:]*:\\/\\//u)) {\n    return new URL(domain);\n  }\n  return new URL(`${originProtocol}//${domain}`);\n};\n\n/**\n * Validates origin of a Sign-In With Ethereum (SIWE)(EIP-4361) request.\n * As per spec:\n * hostname must match.\n * port and username must match iff specified.\n * Protocol binding and full same-origin are currently not performed.\n *\n * @param req - Signature request\n * @returns true if origin matches domain; false otherwise\n */\nexport const isValidSIWEOrigin = (req: WrappedSIWERequest): boolean => {\n  try {\n    const { origin, siwe } = req;\n\n    // origin = scheme://[user[:password]@]domain[:port]\n    // origin is supplied by environment and must match domain claim in message\n    if (!origin || !siwe?.parsedMessage?.domain) {\n      return false;\n    }\n\n    const originParts = new URL(origin);\n    const domainParts = parseDomainParts(\n      siwe.parsedMessage.domain,\n      originParts.protocol,\n    );\n\n    if (\n      domainParts.hostname.localeCompare(originParts.hostname, undefined, {\n        sensitivity: 'accent',\n      }) !== 0\n    ) {\n      return false;\n    }\n\n    if (domainParts.port !== '' && domainParts.port !== originParts.port) {\n      // If origin port is not specified, protocol default is implied\n      return (\n        originParts.port === '' &&\n        domainParts.port === DEFAULT_PORTS_BY_PROTOCOL[originParts.protocol]\n      );\n    }\n\n    if (\n      domainParts.username !== '' &&\n      domainParts.username !== originParts.username\n    ) {\n      return false;\n    }\n\n    return true;\n  } catch (e) {\n    log(e);\n    return false;\n  }\n};\n\n/**\n * A locally defined object used to provide data to identify a Sign-In With Ethereum (SIWE)(EIP-4361) message and provide the parsed message\n *\n * @typedef SIWEMessage\n * @param {boolean} isSIWEMessage - Does the intercepted message conform to the SIWE specification?\n * @param {ParsedMessage} parsedMessage - The data parsed out of the message\n */\nexport type SIWEMessage =\n  | { isSIWEMessage: true; parsedMessage: ParsedMessage }\n  | { isSIWEMessage: false; parsedMessage: null };\n\n/**\n * This function intercepts a sign message, detects if it's a\n * Sign-In With Ethereum (SIWE)(EIP-4361) message, and returns an object with\n * relevant SIWE data.\n *\n * {@see {@link https://eips.ethereum.org/EIPS/eip-4361}}\n *\n * @param msgParams - The params of the message to sign\n * @param msgParams.data - The data of the message to sign\n * @returns An object with the relevant SIWE data\n */\nexport const detectSIWE = (msgParams: { data: string }): SIWEMessage => {\n  try {\n    const { data } = msgParams;\n    const message = msgHexToText(data);\n    const parsedMessage = new ParsedMessage(message);\n\n    return {\n      isSIWEMessage: true,\n      parsedMessage,\n    };\n  } catch (error) {\n    // ignore error, it's not a valid SIWE message\n    return {\n      isSIWEMessage: false,\n      parsedMessage: null,\n    };\n  }\n};\n"],"mappings":";;;;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,qBAAqB;AAI9B,IAAM,MAAM,mBAAmB,eAAe,aAAa;AAS3D,SAAS,mBAAmB,KAAa;AACvC,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO;AAAA,EACT;AACA,SAAO,SAAS,GAAG;AACrB;AAQA,SAAS,aAAa,KAAqB;AACzC,MAAI;AACF,UAAM,WAAW,mBAAmB,GAAG;AACvC,UAAM,OAAO,OAAO,KAAK,UAAU,KAAK;AACxC,WAAO,KAAK,WAAW,KAAK,MAAM,KAAK,SAAS,MAAM;AAAA,EACxD,SAAS,GAAG;AACV,QAAI,CAAC;AACL,WAAO;AAAA,EACT;AACF;AA4BA,IAAM,4BAA4B;AAAA,EAChC,SAAS;AAAA,EACT,UAAU;AACZ;AASO,IAAM,mBAAmB,CAC9B,QACA,mBACgB;AAChB,MAAI,OAAO,MAAM,eAAe,GAAG;AACjC,WAAO,IAAI,IAAI,MAAM;AAAA,EACvB;AACA,SAAO,IAAI,IAAI,GAAG,cAAc,KAAK,MAAM,EAAE;AAC/C;AAYO,IAAM,oBAAoB,CAAC,QAAqC;AACrE,MAAI;AACF,UAAM,EAAE,QAAQ,KAAK,IAAI;AAIzB,QAAI,CAAC,UAAU,CAAC,MAAM,eAAe,QAAQ;AAC3C,aAAO;AAAA,IACT;AAEA,UAAM,cAAc,IAAI,IAAI,MAAM;AAClC,UAAM,cAAc;AAAA,MAClB,KAAK,cAAc;AAAA,MACnB,YAAY;AAAA,IACd;AAEA,QACE,YAAY,SAAS,cAAc,YAAY,UAAU,QAAW;AAAA,MAClE,aAAa;AAAA,IACf,CAAC,MAAM,GACP;AACA,aAAO;AAAA,IACT;AAEA,QAAI,YAAY,SAAS,MAAM,YAAY,SAAS,YAAY,MAAM;AAEpE,aACE,YAAY,SAAS,MACrB,YAAY,SAAS,0BAA0B,YAAY,QAAQ;AAAA,IAEvE;AAEA,QACE,YAAY,aAAa,MACzB,YAAY,aAAa,YAAY,UACrC;AACA,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,SAAS,GAAG;AACV,QAAI,CAAC;AACL,WAAO;AAAA,EACT;AACF;AAwBO,IAAM,aAAa,CAAC,cAA6C;AACtE,MAAI;AACF,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,UAAU,aAAa,IAAI;AACjC,UAAM,gBAAgB,IAAI,cAAc,OAAO;AAE/C,WAAO;AAAA,MACL,eAAe;AAAA,MACf;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AAEd,WAAO;AAAA,MACL,eAAe;AAAA,MACf,eAAe;AAAA,IACjB;AAAA,EACF;AACF;","names":[]}