{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport { promises as fs, constants as fsConstants } from 'fs';\nimport path from 'path';\nimport prettier from 'prettier';\nimport semver from 'semver';\nimport type { Argv } from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport yargs from 'yargs/yargs';\n\nimport { Formatter } from './changelog';\nimport { unreleased, Version } from './constants';\nimport { generateDiff } from './generate-diff';\nimport { createEmptyChangelog } from './init';\nimport { getRepositoryUrl } from './repo';\nimport { PackageRename } from './shared-types';\nimport { updateChangelog } from './update-changelog';\nimport {\n  ChangelogFormattingError,\n  InvalidChangelogError,\n  validateChangelog,\n} from './validate-changelog';\n\nconst updateEpilog = `New commits will be added to the \"${unreleased}\" section (or \\\nto the section for the current release if the '--rc' flag is used) in reverse \\\nchronological order. Any commits for PRs that are represented already in the \\\nchangelog will be ignored.\n\nIf the '--rc' flag is used and the section for the current release does not \\\nyet exist, it will be created.`;\n\nconst validateEpilog = `This does not ensure that the changelog is complete, \\\nor that each change is in the correct section. It just ensures that the \\\nformatting is correct. Verification of the contents is left for manual review.`;\n\n/**\n * Determine whether the given URL is valid.\n *\n * @param proposedUrl - The URL to validate.\n * @returns True if the URL is valid, false otherwise.\n */\nfunction isValidUrl(proposedUrl: string) {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(proposedUrl);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Exit the process with the given error.\n *\n * @param errorMessage - The error message to exit with.\n */\nfunction exitWithError(errorMessage: string) {\n  console.error(errorMessage);\n  process.exitCode = 1;\n}\n\n/**\n * Read the changelog contents from the filesystem.\n *\n * @param changelogPath - The path to the changelog file.\n * @returns The changelog contents.\n */\nasync function readChangelog(changelogPath: string) {\n  return await fs.readFile(changelogPath, {\n    encoding: 'utf8',\n  });\n}\n\n/**\n * Save the changelog to the filesystem.\n *\n * @param changelogPath - The path to the changelog file.\n * @param newChangelogContent - The new changelog contents to save.\n */\nasync function saveChangelog(\n  changelogPath: string,\n  newChangelogContent: string,\n) {\n  await fs.writeFile(changelogPath, newChangelogContent);\n}\n\ntype UpdateOptions = {\n  changelogPath: string;\n  currentVersion?: Version;\n  repoUrl: string;\n  isReleaseCandidate: boolean;\n  projectRootDirectory?: string;\n  tagPrefix: string;\n  formatter: Formatter;\n  /**\n   * The package rename properties, used in case of package is renamed\n   */\n  packageRename?: PackageRename;\n};\n\n/**\n * Update the changelog.\n *\n * @param options - Update options.\n * @param options.changelogPath - The path to the changelog file.\n * @param options.currentVersion - The current project version.\n * @param options.isReleaseCandidate - Whether the current branch is a release candidate or not.\n * @param options.repoUrl - The GitHub repository URL for the current project.\n * @param options.projectRootDirectory - The root project directory.\n * @param options.tagPrefix - The prefix used in tags before the version number.\n * @param options.formatter - A custom Markdown formatter to use.\n * @param options.packageRename - The package rename properties.\n * An optional, which is required only in case of package renamed.\n */\nasync function update({\n  changelogPath,\n  currentVersion,\n  isReleaseCandidate,\n  repoUrl,\n  projectRootDirectory,\n  tagPrefix,\n  formatter,\n  packageRename,\n}: UpdateOptions) {\n  const changelogContent = await readChangelog(changelogPath);\n\n  const newChangelogContent = await updateChangelog({\n    changelogContent,\n    currentVersion,\n    repoUrl,\n    isReleaseCandidate,\n    projectRootDirectory,\n    tagPrefixes: [tagPrefix],\n    formatter,\n    packageRename,\n  });\n\n  if (newChangelogContent) {\n    await saveChangelog(changelogPath, newChangelogContent);\n    console.log('CHANGELOG.md updated.');\n  } else {\n    console.log('There are no new commits to add to the changelog.');\n  }\n}\n\ntype ValidateOptions = {\n  changelogPath: string;\n  currentVersion?: Version;\n  isReleaseCandidate: boolean;\n  repoUrl: string;\n  tagPrefix: string;\n  fix: boolean;\n  formatter: Formatter;\n  /**\n   * The package rename properties, used in case of package is renamed\n   */\n  packageRename?: PackageRename;\n};\n\n/**\n * Validate the changelog.\n *\n * @param options - Validation options.\n * @param options.changelogPath - The path to the changelog file.\n * @param options.currentVersion - The current project version.\n * @param options.isReleaseCandidate - Whether the current branch is a release candidate or not.\n * @param options.repoUrl - The GitHub repository URL for the current project.\n * @param options.tagPrefix - The prefix used in tags before the version number.\n * @param options.fix - Whether to attempt to fix the changelog or not.\n * @param options.formatter - A custom Markdown formatter to use.\n * @param options.packageRename - The package rename properties.\n * An optional, which is required only in case of package renamed.\n */\nasync function validate({\n  changelogPath,\n  currentVersion,\n  isReleaseCandidate,\n  repoUrl,\n  tagPrefix,\n  fix,\n  formatter,\n  packageRename,\n}: ValidateOptions) {\n  const changelogContent = await readChangelog(changelogPath);\n\n  try {\n    validateChangelog({\n      changelogContent,\n      currentVersion,\n      repoUrl,\n      isReleaseCandidate,\n      tagPrefix,\n      formatter,\n      packageRename,\n    });\n    return undefined;\n  } catch (error) {\n    if (error instanceof ChangelogFormattingError) {\n      const { validChangelog, invalidChangelog } = error.data;\n      if (fix) {\n        await saveChangelog(changelogPath, validChangelog);\n        return undefined;\n      }\n\n      const diff = generateDiff(validChangelog, invalidChangelog);\n      return exitWithError(`Changelog not well-formatted. Diff:\\n\\n${diff}`);\n    } else if (error instanceof InvalidChangelogError) {\n      return exitWithError(`Changelog is invalid: ${error.message}`);\n    }\n    throw error;\n  }\n}\n\n/**\n * Returns whether an error has an error code or not.\n *\n * @param error - The error to check.\n * @returns True if the error is a real error and has a code property, false otherwise.\n */\nfunction hasErrorCode(error: unknown): error is Error & { code: unknown } {\n  return (\n    error instanceof Error &&\n    Object.prototype.hasOwnProperty.call(error, 'code')\n  );\n}\n\ntype InitOptions = {\n  changelogPath: string;\n  repoUrl: string;\n  tagPrefix: string;\n};\n\n/**\n * Create a new empty changelog.\n *\n * @param options - Initialization options.\n * @param options.changelogPath - The path to the changelog file.\n * @param options.repoUrl - The GitHub repository URL for the current project.\n * @param options.tagPrefix - The prefix used in tags before the version number.\n */\nasync function init({ changelogPath, repoUrl, tagPrefix }: InitOptions) {\n  const changelogContent = createEmptyChangelog({ repoUrl, tagPrefix });\n  await saveChangelog(changelogPath, changelogContent);\n}\n\nconst rootDescription = `The root project directory. This determines where we \\\nlook for changes since the last release (defaults to the entire repository at \\\nthe current working directory), and where the changelog path is resolved from \\\n(defaults to the current working directory).`;\n\n/**\n * Configure options that are common to all commands.\n *\n * @param _yargs - The yargs instance to configure.\n * @returns A Yargs instance configured with all common commands.\n */\nfunction configureCommonCommandOptions(_yargs: Argv) {\n  return _yargs\n    .option('file', {\n      default: 'CHANGELOG.md',\n      description: 'The changelog file path',\n      type: 'string',\n    })\n    .option('repo', {\n      default: getRepositoryUrl(),\n      description: `The GitHub repository URL`,\n      type: 'string',\n    })\n    .option('root', {\n      description: rootDescription,\n      type: 'string',\n    })\n    .option('tagPrefix', {\n      default: 'v',\n      description: 'The prefix used in tags before the version number.',\n      type: 'string',\n    })\n    .option('versionBeforePackageRename', {\n      description: 'A version of the package before being renamed.',\n      type: 'string',\n    })\n    .option('tagPrefixBeforePackageRename', {\n      description: 'A tag prefix of the package before being renamed.',\n      type: 'string',\n    });\n}\n\n/**\n * The entrypoint for the auto-changelog CLI.\n */\nasync function main() {\n  const { argv } = yargs(hideBin(process.argv))\n    .command(\n      'update',\n      'Update CHANGELOG.md with any changes made since the most recent release.\\nUsage: $0 update [options]',\n      (_yargs) =>\n        configureCommonCommandOptions(_yargs)\n          .option('rc', {\n            default: false,\n            description: `Add new changes to the current release header, rather than to the '${unreleased}' section.`,\n            type: 'boolean',\n          })\n          .option('currentVersion', {\n            description:\n              'The current version of the project that the changelog belongs to.',\n            type: 'string',\n          })\n          .option('prettier', {\n            default: false,\n            description: `Expect the changelog to be formatted with Prettier.`,\n            type: 'boolean',\n          })\n          .epilog(updateEpilog),\n    )\n    .command(\n      'validate',\n      'Validate the changelog, ensuring that it is well-formatted.\\nUsage: $0 validate [options]',\n      (_yargs) =>\n        configureCommonCommandOptions(_yargs)\n          .option('rc', {\n            default: false,\n            description: `Verify that the current version has a release header in the changelog`,\n            type: 'boolean',\n          })\n          .option('currentVersion', {\n            description:\n              'The current version of the project that the changelog belongs to.',\n            type: 'string',\n          })\n          .option('fix', {\n            default: false,\n            description: `Attempt to fix any formatting errors in the changelog`,\n            type: 'boolean',\n          })\n          .option('prettier', {\n            default: false,\n            description: `Expect the changelog to be formatted with Prettier.`,\n            type: 'boolean',\n          })\n          .epilog(validateEpilog),\n    )\n    .command('init', 'Initialize a new empty changelog', (_yargs) => {\n      configureCommonCommandOptions(_yargs);\n    })\n    .strict()\n    .demandCommand()\n    .help('help')\n    .usage(\n      `Utilities for validating and updating \"Keep a Changelog\" formatted changelogs.\\nUsage: $0 [command] [options]`,\n    );\n\n  const {\n    file: changelogFilename,\n    rc: isReleaseCandidate,\n    repo: repoUrl,\n    root: projectRootDirectory,\n    tagPrefix,\n    fix,\n    prettier: usePrettier,\n    versionBeforePackageRename,\n    tagPrefixBeforePackageRename,\n  } = argv;\n  let { currentVersion } = argv;\n\n  if (projectRootDirectory) {\n    try {\n      const stat = await fs.stat(projectRootDirectory);\n      if (!stat.isDirectory()) {\n        return exitWithError(\n          `Project root must be a directory: '${projectRootDirectory}'`,\n        );\n      }\n    } catch (error) {\n      if (hasErrorCode(error)) {\n        if (error.code === 'ENOENT') {\n          return exitWithError(\n            `Root directory specified does not exist: '${projectRootDirectory}'`,\n          );\n        } else if (error.code === 'EACCES') {\n          return exitWithError(\n            `Access to root directory is forbidden by file access permissions: '${projectRootDirectory}'`,\n          );\n        }\n      }\n      throw error;\n    }\n  }\n\n  if (!currentVersion) {\n    const manifestPath = projectRootDirectory\n      ? path.join(projectRootDirectory, 'package.json')\n      : path.resolve('package.json');\n\n    try {\n      const manifestText = await fs.readFile(manifestPath, {\n        encoding: 'utf-8',\n      });\n      const manifest = JSON.parse(manifestText);\n      currentVersion = manifest.version;\n    } catch (error) {\n      if (hasErrorCode(error)) {\n        if (error.code === 'ENOENT') {\n          return exitWithError(\n            `Package manifest not found at path: '${manifestPath}'\\nRun this script from the project root directory, or set the project directory using the '--root' flag.`,\n          );\n        } else if (error.code === 'EACCES') {\n          return exitWithError(\n            `Access to package manifest is forbidden by file access permissions: '${manifestPath}'`,\n          );\n        }\n      }\n\n      if (error instanceof Error && error.name === 'SyntaxError') {\n        return exitWithError(\n          `Package manifest cannot be parsed as JSON: '${manifestPath}'`,\n        );\n      }\n      throw error;\n    }\n  }\n\n  if (!currentVersion) {\n    return exitWithError(\n      `Version not found. Please set the --currentVersion flag, or run this as an npm script from a project with the 'version' field set.`,\n    );\n  } else if (currentVersion && semver.valid(currentVersion) === null) {\n    return exitWithError(\n      `Current version is not valid SemVer: '${currentVersion}'`,\n    );\n  } else if (!repoUrl) {\n    return exitWithError(\n      `npm package repository URL not found. Please set the '--repo' flag, or run this as an npm script from a project with the 'repository' field set.`,\n    );\n  } else if (!isValidUrl(repoUrl)) {\n    return exitWithError(`Invalid repo URL: '${repoUrl}'`);\n  }\n\n  if (\n    (versionBeforePackageRename && !tagPrefixBeforePackageRename) ||\n    (!versionBeforePackageRename && tagPrefixBeforePackageRename)\n  ) {\n    return exitWithError(\n      '--version-before-package-rename and --tag-prefix-before-package-rename must be given together or not at all.',\n    );\n  }\n\n  let changelogPath = changelogFilename;\n  if (!path.isAbsolute(changelogFilename) && projectRootDirectory) {\n    changelogPath = path.resolve(projectRootDirectory, changelogFilename);\n  }\n\n  if (!argv._) {\n    throw new Error('No command provided');\n  }\n  const command = argv._[0];\n\n  if (command !== 'init') {\n    try {\n      // eslint-disable-next-line no-bitwise\n      await fs.access(changelogPath, fsConstants.F_OK | fsConstants.W_OK);\n    } catch (error) {\n      if (hasErrorCode(error) && error.code === 'ENOENT') {\n        return exitWithError(`File does not exist: '${changelogPath}'`);\n      }\n      return exitWithError(`File is not writable: '${changelogPath}'`);\n    }\n  }\n\n  const formatter = (changelog: string) => {\n    return usePrettier\n      ? prettier.format(changelog, { parser: 'markdown' })\n      : changelog;\n  };\n\n  if (command === 'update') {\n    let packageRename: PackageRename | undefined;\n    if (versionBeforePackageRename && tagPrefixBeforePackageRename) {\n      packageRename = {\n        versionBeforeRename: versionBeforePackageRename,\n        tagPrefixBeforeRename: tagPrefixBeforePackageRename,\n      };\n    }\n    await update({\n      changelogPath,\n      currentVersion,\n      isReleaseCandidate,\n      repoUrl,\n      projectRootDirectory,\n      tagPrefix,\n      formatter,\n      packageRename,\n    });\n  } else if (command === 'validate') {\n    let packageRename: PackageRename | undefined;\n    if (versionBeforePackageRename && tagPrefixBeforePackageRename) {\n      packageRename = {\n        versionBeforeRename: versionBeforePackageRename,\n        tagPrefixBeforeRename: tagPrefixBeforePackageRename,\n      };\n    }\n    await validate({\n      changelogPath,\n      currentVersion,\n      isReleaseCandidate,\n      repoUrl,\n      tagPrefix,\n      fix,\n      formatter,\n      packageRename,\n    });\n  } else if (command === 'init') {\n    await init({\n      changelogPath,\n      repoUrl,\n      tagPrefix,\n    });\n  }\n  return undefined;\n}\n\nmain().catch((error) => {\n  exitWithError(error);\n});\n"]}