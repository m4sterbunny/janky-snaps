{"version":3,"file":"update-changelog.js","sourceRoot":"","sources":["../src/update-changelog.ts"],"names":[],"mappings":"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","sourcesContent":["import { strict as assert } from 'assert';\nimport execa from 'execa';\n\nimport type Changelog from './changelog';\nimport { Formatter } from './changelog';\nimport { ChangeCategory, Version } from './constants';\nimport { parseChangelog } from './parse-changelog';\nimport { PackageRename } from './shared-types';\n\n/**\n * Get the most recent tag for a project.\n *\n * @param options - Options.\n * @param options.tagPrefixes - A list of tag prefixes to look for, where the first is the intended\n * prefix and each subsequent prefix is a fallback in case the previous tag prefixes are not found.\n * @returns The most recent tag.\n */\nasync function getMostRecentTag({\n  tagPrefixes,\n}: {\n  tagPrefixes: [string, ...string[]];\n}) {\n  let mostRecentTagCommitHash: string | null = null;\n  for (const tagPrefix of tagPrefixes) {\n    const revListArgs = [\n      'rev-list',\n      `--tags=${tagPrefix}*`,\n      '--max-count=1',\n      '--date-order',\n    ];\n    const results = await runCommand('git', revListArgs);\n    if (results.length) {\n      mostRecentTagCommitHash = results[0];\n      break;\n    }\n  }\n\n  if (mostRecentTagCommitHash === null) {\n    return null;\n  }\n  const [mostRecentTag] = await runCommand('git', [\n    'describe',\n    '--tags',\n    mostRecentTagCommitHash,\n  ]);\n  return mostRecentTag;\n}\n\n/**\n * Get commit details for each given commit hash.\n *\n * @param commitHashes - The list of commit hashes.\n * @returns Commit details for each commit, including description and PR number (if present).\n */\nasync function getCommits(commitHashes: string[]) {\n  const commits: { prNumber?: string; description: string }[] = [];\n  for (const commitHash of commitHashes) {\n    const [subject] = await runCommand('git', [\n      'show',\n      '-s',\n      '--format=%s',\n      commitHash,\n    ]);\n    assert.ok(\n      Boolean(subject),\n      `\"git show\" returned empty subject for commit \"${commitHash}\".`,\n    );\n\n    let matchResults = subject.match(/\\(#(\\d+)\\)/u);\n    let prNumber: string | undefined;\n    let description = subject;\n\n    if (matchResults) {\n      // Squash & Merge: the commit subject is parsed as `<description> (#<PR ID>)`\n      prNumber = matchResults[1];\n      description = subject.match(/^(.+)\\s\\(#\\d+\\)/u)?.[1] ?? '';\n    } else {\n      // Merge: the PR ID is parsed from the git subject (which is of the form `Merge pull request\n      // #<PR ID> from <branch>`, and the description is assumed to be the first line of the body.\n      // If no body is found, the description is set to the commit subject\n      matchResults = subject.match(/#(\\d+)\\sfrom/u);\n      if (matchResults) {\n        prNumber = matchResults[1];\n        const [firstLineOfBody] = await runCommand('git', [\n          'show',\n          '-s',\n          '--format=%b',\n          commitHash,\n        ]);\n        description = firstLineOfBody || subject;\n      }\n    }\n    // Otherwise:\n    // Normal commits: The commit subject is the description, and the PR ID is omitted.\n\n    commits.push({ prNumber, description });\n  }\n  return commits;\n}\n\n/**\n * Get all change descriptions from a changelog.\n *\n * @param changelog - The changelog.\n * @returns All commit descriptions included in the given changelog.\n */\nfunction getAllChangeDescriptions(changelog: Changelog) {\n  const releases = changelog.getReleases();\n  const changeDescriptions = Object.values(\n    changelog.getUnreleasedChanges(),\n  ).flat();\n  for (const release of releases) {\n    changeDescriptions.push(\n      ...Object.values(changelog.getReleaseChanges(release.version)).flat(),\n    );\n  }\n  return changeDescriptions;\n}\n\n/**\n * Get all pull request numbers included in the given changelog.\n *\n * @param changelog - The changelog.\n * @returns All pull request numbers included in the given changelog.\n */\nfunction getAllLoggedPrNumbers(changelog: Changelog) {\n  const changeDescriptions = getAllChangeDescriptions(changelog);\n\n  const prNumbersWithChangelogEntries = [];\n  for (const description of changeDescriptions) {\n    if (!description) {\n      continue;\n    }\n    const matchResults = description.matchAll(/\\[#(\\d+)\\]/gu);\n    const prNumbers = Array.from(matchResults, (result) => result[1]);\n    prNumbersWithChangelogEntries.push(...prNumbers);\n  }\n\n  return prNumbersWithChangelogEntries;\n}\n\n/**\n * Get all commit hashes included in the given commit range.\n *\n * @param commitRange - The commit range.\n * @param rootDirectory - The project root directory.\n * @returns A list of commit hashes for the given range.\n */\nasync function getCommitHashesInRange(\n  commitRange: string,\n  rootDirectory?: string,\n) {\n  const revListArgs = ['rev-list', commitRange];\n  if (rootDirectory) {\n    revListArgs.push(rootDirectory);\n  }\n  return await runCommand('git', revListArgs);\n}\n\nexport type UpdateChangelogOptions = {\n  changelogContent: string;\n  currentVersion?: Version;\n  repoUrl: string;\n  isReleaseCandidate: boolean;\n  projectRootDirectory?: string;\n  tagPrefixes?: [string, ...string[]];\n  formatter?: Formatter;\n  /**\n   * The package rename properties, used in case of package is renamed\n   */\n  packageRename?: PackageRename;\n};\n\n/**\n * Update a changelog with any commits made since the last release. Commits for\n * PRs that are already included in the changelog are omitted.\n *\n * @param options - Update options.\n * @param options.changelogContent - The current changelog.\n * @param options.currentVersion - The current version. Required if\n * `isReleaseCandidate` is set, but optional otherwise.\n * @param options.repoUrl - The GitHub repository URL for the current project.\n * @param options.isReleaseCandidate - Denotes whether the current project.\n * is in the midst of release preparation or not. If this is set, any new\n * changes are listed under the current release header. Otherwise, they are\n * listed under the 'Unreleased' section.\n * @param options.projectRootDirectory - The root project directory, used to\n * filter results from various git commands. This path is assumed to be either\n * absolute, or relative to the current directory. Defaults to the root of the\n * current git repository.\n * @param options.tagPrefixes - A list of tag prefixes to look for, where the first is the intended\n * prefix and each subsequent prefix is a fallback in case the previous tag prefixes are not found.\n * @param options.formatter - A custom Markdown formatter to use.\n * @param options.packageRename - The package rename properties.\n * An optional, which is required only in case of package renamed.\n * @returns The updated changelog text.\n */\nexport async function updateChangelog({\n  changelogContent,\n  currentVersion,\n  repoUrl,\n  isReleaseCandidate,\n  projectRootDirectory,\n  tagPrefixes = ['v'],\n  formatter = undefined,\n  packageRename,\n}: UpdateChangelogOptions): Promise<string | undefined> {\n  const changelog = parseChangelog({\n    changelogContent,\n    repoUrl,\n    tagPrefix: tagPrefixes[0],\n    formatter,\n    packageRename,\n  });\n\n  // Ensure we have all tags on remote\n  await runCommand('git', ['fetch', '--tags']);\n  const mostRecentTag = await getMostRecentTag({\n    tagPrefixes,\n  });\n\n  const commitRange =\n    mostRecentTag === null ? 'HEAD' : `${mostRecentTag}..HEAD`;\n  const commitsHashesSinceLastRelease = await getCommitHashesInRange(\n    commitRange,\n    projectRootDirectory,\n  );\n  const commits = await getCommits(commitsHashesSinceLastRelease);\n\n  const loggedPrNumbers = getAllLoggedPrNumbers(changelog);\n  const newCommits = commits.filter(\n    ({ prNumber }) =>\n      prNumber === undefined || !loggedPrNumbers.includes(prNumber),\n  );\n\n  const hasUnreleasedChanges =\n    Object.keys(changelog.getUnreleasedChanges()).length !== 0;\n  if (\n    newCommits.length === 0 &&\n    (!isReleaseCandidate || hasUnreleasedChanges)\n  ) {\n    return undefined;\n  }\n\n  if (isReleaseCandidate) {\n    if (!currentVersion) {\n      throw new Error(\n        `A version must be specified if 'isReleaseCandidate' is set.`,\n      );\n    }\n\n    if (mostRecentTag === `${tagPrefixes[0]}${currentVersion ?? ''}`) {\n      throw new Error(\n        `Current version already has a tag ('${mostRecentTag}'), which is unexpected for a release candidate.`,\n      );\n    }\n\n    // Ensure release header exists, if necessary\n    if (\n      !changelog\n        .getReleases()\n        .find((release) => release.version === currentVersion)\n    ) {\n      changelog.addRelease({ version: currentVersion });\n    }\n\n    if (hasUnreleasedChanges) {\n      changelog.migrateUnreleasedChangesToRelease(currentVersion);\n    }\n\n    const newChangeEntries = newCommits.map(({ prNumber, description }) => {\n      if (prNumber) {\n        const suffix = `([#${prNumber}](${repoUrl}/pull/${prNumber}))`;\n        return `${description} ${suffix}`;\n      }\n      return description;\n    });\n\n    for (const description of newChangeEntries.reverse()) {\n      changelog.addChange({\n        version: isReleaseCandidate ? currentVersion : undefined,\n        category: ChangeCategory.Uncategorized,\n        description,\n      });\n    }\n  }\n\n  return changelog.toString();\n}\n\n/**\n * Executes a shell command in a child process and returns what it wrote to\n * stdout, or rejects if the process exited with an error.\n *\n * @param command - The command to run, e.g. \"git\".\n * @param args - The arguments to the command.\n * @returns An array of the non-empty lines returned by the command.\n */\nasync function runCommand(command: string, args: string[]): Promise<string[]> {\n  return (await execa(command, [...args])).stdout\n    .trim()\n    .split('\\n')\n    .filter((line) => line !== '');\n}\n"]}