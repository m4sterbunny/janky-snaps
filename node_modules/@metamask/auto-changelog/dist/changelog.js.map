{"version":3,"file":"changelog.js","sourceRoot":"","sources":["../src/changelog.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\n\nimport {\n  ChangeCategory,\n  orderedChangeCategories,\n  unreleased,\n  Version,\n} from './constants';\nimport { PackageRename } from './shared-types';\n\n/**\n * `Object.getOwnPropertyNames()` is intentionally generic: it returns the\n * immediate property names of an object, but it cannot make guarantees about\n * the contents of that object, so the type of the property names is merely\n * `string[]`. While this is technically accurate, it is also unnecessary if we\n * have an object with a type that we own (such as an enum).\n *\n * IMPORTANT: This is copied from `@metamask/utils` in order to avoid a circular\n * dependency between this package and `@metamask/utils`.\n *\n * @param object - The plain object.\n * @returns The own property names of the object which are assigned a type\n * derived from the object itself.\n */\nexport function getKnownPropertyNames<Key extends PropertyKey>(\n  object: Partial<Record<Key, any>>,\n): Key[] {\n  return Object.getOwnPropertyNames(object) as Key[];\n}\n\nconst changelogTitle = '# Changelog';\nconst changelogDescription = `All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).`;\n\n/**\n * Formatter function that formats a Markdown changelog string.\n */\nexport type Formatter = (changelog: string) => string;\n\ntype ReleaseMetadata = {\n  /**\n   * The version of the current release.\n   */\n  version: Version;\n\n  /**\n   * An ISO-8601 formatted date, representing the\n   * release date.\n   */\n  date?: string;\n\n  /**\n   * The status of the release (e.g. 'WITHDRAWN', 'DEPRECATED')\n   */\n  status?: string;\n};\n\n/**\n * Release changes, organized by category.\n */\ntype ReleaseChanges = Partial<Record<ChangeCategory, string[]>>;\n\n/**\n * Changelog changes, organized by release and by category.\n */\ntype ChangelogChanges = Record<Version, ReleaseChanges> & {\n  [unreleased]: ReleaseChanges;\n};\n\n// Stringification helpers\n\n/**\n * Stringify a changelog category section.\n *\n * @param category - The title of the changelog category.\n * @param changes - The changes included in this category.\n * @returns The stringified category section.\n */\nfunction stringifyCategory(category: ChangeCategory, changes: string[]) {\n  const categoryHeader = `### ${category}`;\n  if (changes.length === 0) {\n    return categoryHeader;\n  }\n  const changeDescriptions = changes\n    .map((description) => `- ${description}`)\n    .join('\\n');\n  return `${categoryHeader}\\n${changeDescriptions}`;\n}\n\n/**\n * Stringify a changelog release section.\n *\n * @param version - The release version.\n * @param categories - The categories of changes included in this release.\n * @param options - Additional release options.\n * @param options.date - The date of the release.\n * @param options.status - The status of the release (e.g., \"DEPRECATED\").\n * @returns The stringified release section.\n */\nfunction stringifyRelease(\n  version: Version | typeof unreleased,\n  categories: ReleaseChanges,\n  { date, status }: Partial<ReleaseMetadata> = {},\n) {\n  const releaseHeader = `## [${version}]${date ? ` - ${date}` : ''}${\n    status ? ` [${status}]` : ''\n  }`;\n  const categorizedChanges = orderedChangeCategories\n    .filter((category) => categories[category])\n    .map((category) => {\n      const changes = categories[category] ?? [];\n      return stringifyCategory(category, changes);\n    })\n    .join('\\n\\n');\n  if (categorizedChanges === '') {\n    return releaseHeader;\n  }\n  return `${releaseHeader}\\n${categorizedChanges}`;\n}\n\n/**\n * Stringify a set of changelog release sections.\n *\n * @param releases - The releases to stringify.\n * @param changes - The set of changes to include, organized by release.\n * @returns The stringified set of release sections.\n */\nfunction stringifyReleases(\n  releases: ReleaseMetadata[],\n  changes: ChangelogChanges,\n) {\n  const stringifiedUnreleased = stringifyRelease(\n    unreleased,\n    changes[unreleased],\n  );\n  const stringifiedReleases = releases.map(({ version, date, status }) => {\n    const categories = changes[version];\n    return stringifyRelease(version, categories, { date, status });\n  });\n\n  return [stringifiedUnreleased, ...stringifiedReleases].join('\\n\\n');\n}\n\n/**\n * Return the given URL with a trailing slash. It is returned unaltered if it\n * already has a trailing slash.\n *\n * @param url - The URL string.\n * @returns The URL string with a trailing slash.\n */\nfunction withTrailingSlash(url: string) {\n  return url.endsWith('/') ? url : `${url}/`;\n}\n\n/**\n * Get the GitHub URL for comparing two git commits.\n *\n * @param repoUrl - The URL for the GitHub repository.\n * @param firstRef - A reference (e.g., commit hash, tag, etc.) to the first commit to compare.\n * @param secondRef - A reference (e.g., commit hash, tag, etc.) to the second commit to compare.\n * @returns The comparison URL for the two given commits.\n */\nfunction getCompareUrl(repoUrl: string, firstRef: string, secondRef: string) {\n  return `${withTrailingSlash(repoUrl)}compare/${firstRef}...${secondRef}`;\n}\n\n/**\n * Get a GitHub tag URL.\n *\n * @param repoUrl - The URL for the GitHub repository.\n * @param tag - The tag name.\n * @returns The URL for the given tag.\n */\nfunction getTagUrl(repoUrl: string, tag: string) {\n  return `${withTrailingSlash(repoUrl)}releases/tag/${tag}`;\n}\n\n/**\n * Get a stringified list of link definitions for the given set of releases. The first release is\n * linked to the corresponding tag, and each subsequent release is linked to a comparison with the\n * previous release.\n *\n * @param repoUrl - The URL for the GitHub repository.\n * @param tagPrefix - The prefix used in tags before the version number.\n * @param releases - The releases to generate link definitions for.\n * @param packageRename - The package rename properties\n * An optional, which is required only in case of package renamed.\n * @returns The stringified release link definitions.\n */\nfunction stringifyLinkReferenceDefinitions(\n  repoUrl: string,\n  tagPrefix: string,\n  releases: ReleaseMetadata[],\n  packageRename?: PackageRename,\n) {\n  const unreleasedLinkReferenceDefinition =\n    getUnreleasedLinkReferenceDefinition(\n      repoUrl,\n      tagPrefix,\n      releases,\n      packageRename,\n    );\n\n  const releaseLinkReferenceDefinitions = getReleaseLinkReferenceDefinitions(\n    repoUrl,\n    tagPrefix,\n    releases,\n    packageRename,\n  ).join('\\n');\n  return `${unreleasedLinkReferenceDefinition}\\n${releaseLinkReferenceDefinitions}${\n    releases.length > 0 ? '\\n' : ''\n  }`;\n}\n\n/**\n * Get a string of unreleased link reference definition.\n *\n * @param repoUrl - The URL for the GitHub repository.\n * @param tagPrefix - The prefix used in tags before the version number.\n * @param releases - The releases to generate link definitions for.\n * @param packageRename - The package rename properties.\n * @returns A unreleased link reference definition string.\n */\nfunction getUnreleasedLinkReferenceDefinition(\n  repoUrl: string,\n  tagPrefix: string,\n  releases: ReleaseMetadata[],\n  packageRename?: PackageRename,\n): string {\n  // The \"Unreleased\" section represents all changes made since the *highest*\n  // release, not the most recent release. This is to accomodate patch releases\n  // of older versions that don't represent the latest set of changes.\n  //\n  // For example, if a library has a v2.0.0 but the v1.0.0 release needed a\n  // security update, the v1.0.1 release would then be the most recent, but the\n  // range of unreleased changes would remain `v2.0.0...HEAD`.\n  //\n  // If there have not been any releases yet, the repo URL is used directly as\n  // the link definition.\n\n  // A list of release versions in descending SemVer order\n  const descendingSemverVersions = releases\n    .map(({ version }) => version)\n    .sort((a: Version, b: Version) => {\n      return semver.gt(a, b) ? -1 : 1;\n    });\n  const latestSemverVersion = descendingSemverVersions[0];\n  const hasReleases = descendingSemverVersions.length > 0;\n  // if there is a package renamed, the tag prefix before the rename will be considered for compare\n  // [Unreleased]: https://github.com/ExampleUsernameOrOrganization/ExampleRepository/compare/test@0.0.2...HEAD\n  const tagPrefixToCompare =\n    packageRename && packageRename.versionBeforeRename === latestSemverVersion\n      ? packageRename.tagPrefixBeforeRename\n      : tagPrefix;\n\n  return `[${unreleased}]: ${\n    hasReleases\n      ? getCompareUrl(\n          repoUrl,\n          `${tagPrefixToCompare}${latestSemverVersion}`,\n          'HEAD',\n        )\n      : withTrailingSlash(repoUrl)\n  }`;\n}\n\n/**\n * Get a list of release link reference definitions.\n *\n * @param repoUrl - The URL for the GitHub repository.\n * @param tagPrefix - The prefix used in tags before the version number.\n * @param releases - The releases to generate link definitions for.\n * @param packageRename - The package rename properties.\n * @returns A list of release link reference definitions.\n */\nfunction getReleaseLinkReferenceDefinitions(\n  repoUrl: string,\n  tagPrefix: string,\n  releases: ReleaseMetadata[],\n  packageRename?: PackageRename,\n): string[] {\n  // The \"previous\" release that should be used for comparison is not always\n  // the most recent release chronologically. The _highest_ version that is\n  // lower than the current release is used as the previous release, so that\n  // patch releases on older releases can be accomodated.\n  const chronologicalVersions = releases.map(({ version }) => version);\n  let tagPrefixToCompare = tagPrefix;\n  const releaseLinkReferenceDefinitions = releases.map(({ version }) => {\n    let diffUrl;\n    // once the version matches with versionBeforeRename, rest of the lines in changelog will be assumed as migrated tags\n    if (packageRename && packageRename.versionBeforeRename === version) {\n      tagPrefixToCompare = packageRename.tagPrefixBeforeRename;\n    }\n\n    if (version === chronologicalVersions[chronologicalVersions.length - 1]) {\n      diffUrl = getTagUrl(repoUrl, `${tagPrefixToCompare}${version}`);\n    } else {\n      const versionIndex = chronologicalVersions.indexOf(version);\n      const previousVersion = chronologicalVersions\n        .slice(versionIndex)\n        .find((releaseVersion: Version) => {\n          return semver.gt(version, releaseVersion);\n        });\n\n      if (previousVersion) {\n        if (\n          packageRename &&\n          packageRename.versionBeforeRename === previousVersion\n        ) {\n          // The package was renamed at this version\n          // (the tag prefix holds the new name).\n          diffUrl = getCompareUrl(\n            repoUrl,\n            `${packageRename.tagPrefixBeforeRename}${previousVersion}`,\n            `${tagPrefix}${version}`,\n          );\n        } else {\n          // If the package was ever renamed, it was not renamed at this version,\n          // so use either the old tag prefix or the new tag prefix.\n          // If the package was never renamed, use the tag prefix as it is.\n          diffUrl = getCompareUrl(\n            repoUrl,\n            `${tagPrefixToCompare}${previousVersion}`,\n            `${tagPrefixToCompare}${version}`,\n          );\n        }\n      } else {\n        // This is the smallest release.\n        diffUrl = getTagUrl(repoUrl, `${tagPrefixToCompare}${version}`);\n      }\n    }\n    return `[${version}]: ${diffUrl}`;\n  });\n\n  return releaseLinkReferenceDefinitions;\n}\n\ntype AddReleaseOptions = {\n  addToStart?: boolean;\n  date?: string;\n  status?: string;\n  version: Version;\n};\n\ntype AddChangeOptions = {\n  addToStart?: boolean;\n  category: ChangeCategory;\n  description: string;\n  version?: Version;\n};\n\n/**\n * A changelog that complies with the\n * [\"Keep a Changelog\" v1.1.0 guidelines](https://keepachangelog.com/en/1.0.0/).\n *\n * This changelog starts out completely empty, and allows new releases and\n * changes to be added such that the changelog remains compliant at all times.\n * This can be used to help validate the contents of a changelog, normalize\n * formatting, update a changelog, or build one from scratch.\n */\nexport default class Changelog {\n  readonly #releases: ReleaseMetadata[];\n\n  #changes: ChangelogChanges;\n\n  readonly #repoUrl: string;\n\n  readonly #tagPrefix: string;\n\n  #formatter: Formatter;\n\n  readonly #packageRename: PackageRename | undefined;\n\n  /**\n   * Construct an empty changelog.\n   *\n   * @param options - Changelog options.\n   * @param options.repoUrl - The GitHub repository URL for the current project.\n   * @param options.tagPrefix - The prefix used in tags before the version number.\n   * @param options.formatter - A function that formats the changelog string.\n   * @param options.packageRename - The package rename properties.\n   * An optional, which is required only in case of package renamed.\n   */\n  constructor({\n    repoUrl,\n    tagPrefix = 'v',\n    formatter = (changelog) => changelog,\n    packageRename,\n  }: {\n    repoUrl: string;\n    tagPrefix?: string;\n    formatter?: Formatter;\n    packageRename?: PackageRename;\n  }) {\n    this.#releases = [];\n    this.#changes = { [unreleased]: {} };\n    this.#repoUrl = repoUrl;\n    this.#tagPrefix = tagPrefix;\n    this.#formatter = formatter;\n    this.#packageRename = packageRename;\n  }\n\n  /**\n   * Add a release to the changelog.\n   *\n   * @param options - Release options.\n   * @param options.addToStart - Determines whether the change is added to the\n   * top or bottom of the list of changes in this category. This defaults to\n   * `true` because changes should be in reverse-chronological order. This\n   * should be set to `false` when parsing a changelog top-to-bottom.\n   * @param options.date - An ISO-8601 formatted date, representing the release\n   * date.\n   * @param options.status - The status of the release (e.g., 'WITHDRAWN',\n   * 'DEPRECATED').\n   * @param options.version - The version of the current release, which should\n   * be a [SemVer](https://semver.org/spec/v2.0.0.html)-compatible version.\n   */\n  addRelease({ addToStart = true, date, status, version }: AddReleaseOptions) {\n    if (!version) {\n      throw new Error('Version required');\n    } else if (semver.valid(version) === null) {\n      throw new Error(`Not a valid semver version: '${version}'`);\n    } else if (this.#changes[version]) {\n      throw new Error(`Release already exists: '${version}'`);\n    }\n\n    this.#changes[version] = {};\n    const newRelease = { version, date, status };\n    if (addToStart) {\n      this.#releases.unshift(newRelease);\n    } else {\n      this.#releases.push(newRelease);\n    }\n  }\n\n  /**\n   * Add a change to the changelog.\n   *\n   * @param options - Change options.\n   * @param options.addToStart - Determines whether the change is added to the\n   * top or bottom of the list of changes in this category. This defaults to\n   * `true` because changes should be in reverse-chronological order. This\n   * should be set to `false` when parsing a changelog top-to-bottom.\n   * @param options.category - The category of the change.\n   * @param options.description - The description of the change.\n   * @param options.version - The version this change was released in. If this\n   * is not given, the change is assumed to be unreleased.\n   */\n  addChange({\n    addToStart = true,\n    category,\n    description,\n    version,\n  }: AddChangeOptions) {\n    if (!category) {\n      throw new Error('Category required');\n    } else if (!orderedChangeCategories.includes(category)) {\n      throw new Error(`Unrecognized category: '${category}'`);\n    } else if (!description) {\n      throw new Error('Description required');\n    } else if (version !== undefined && !this.#changes[version]) {\n      throw new Error(`Specified release version does not exist: '${version}'`);\n    }\n\n    const release = version\n      ? this.#changes[version]\n      : this.#changes[unreleased];\n\n    if (!release[category]) {\n      release[category] = [];\n    }\n\n    if (addToStart) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      release[category]!.unshift(description);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      release[category]!.push(description);\n    }\n  }\n\n  /**\n   * Migrate all unreleased changes to a release section.\n   *\n   * Changes are migrated in their existing categories, and placed above any\n   * pre-existing changes in that category.\n   *\n   * @param version - The release version to migrate unreleased changes to.\n   */\n  migrateUnreleasedChangesToRelease(version: Version) {\n    const releaseChanges = this.#changes[version];\n    if (!releaseChanges) {\n      throw new Error(`Specified release version does not exist: '${version}'`);\n    }\n\n    const unreleasedChanges = this.#changes[unreleased];\n\n    for (const category of getKnownPropertyNames(unreleasedChanges)) {\n      if (releaseChanges[category]) {\n        releaseChanges[category] = [\n          ...(unreleasedChanges[category] ?? []),\n          ...(releaseChanges[category] ?? []),\n        ];\n      } else {\n        releaseChanges[category] = unreleasedChanges[category];\n      }\n    }\n    this.#changes[unreleased] = {};\n  }\n\n  /**\n   * Gets the metadata for all releases.\n   *\n   * @returns The metadata for each release.\n   */\n  getReleases() {\n    return this.#releases;\n  }\n\n  /**\n   * Gets the release of the given version.\n   *\n   * @param version - The version of the release to retrieve.\n   * @returns The specified release, or undefined if no such release exists.\n   */\n  getRelease(version: Version) {\n    return this.getReleases().find(\n      ({ version: _version }) => _version === version,\n    );\n  }\n\n  /**\n   * Gets the stringified release of the given version.\n   * Throws an error if no such release exists.\n   *\n   * @param version - The version of the release to stringify.\n   * @returns The stringified release, as it appears in the changelog.\n   */\n  getStringifiedRelease(version: Version) {\n    const release = this.getRelease(version);\n    if (!release) {\n      throw new Error(`Specified release version does not exist: '${version}'`);\n    }\n    const releaseChanges = this.getReleaseChanges(version);\n    return stringifyRelease(version, releaseChanges, release);\n  }\n\n  /**\n   * Gets the changes in the given release, organized by category.\n   *\n   * @param version - The version of the release being retrieved.\n   * @returns The changes included in the given released.\n   */\n  getReleaseChanges(version: Version) {\n    return this.#changes[version];\n  }\n\n  /**\n   * Gets all changes that have not yet been released.\n   *\n   * @returns The changes that have not yet been released.\n   */\n  getUnreleasedChanges() {\n    return this.#changes[unreleased];\n  }\n\n  /**\n   * The stringified changelog, formatted according to [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n   *\n   * @returns The stringified changelog.\n   */\n  toString(): string {\n    const changelog = `${changelogTitle}\n${changelogDescription}\n\n${stringifyReleases(this.#releases, this.#changes)}\n\n${stringifyLinkReferenceDefinitions(\n  this.#repoUrl,\n  this.#tagPrefix,\n  this.#releases,\n  this.#packageRename,\n)}`;\n\n    return this.#formatter(changelog);\n  }\n}\n"]}