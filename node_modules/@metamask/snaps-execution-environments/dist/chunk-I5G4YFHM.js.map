{"version":3,"sources":["../src/webview/WebViewExecutorStream.ts"],"names":[],"mappings":";;;;;;;AACA,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,eAAe,qBAAqB;AAH7C;AAWO,IAAM,wBAAN,cAAoC,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsB/D,YAAY,EAAE,MAAM,QAAQ,aAAa,GAA8B;AACrE,UAAM;AAtBR;AAEA;AAEA;AAoBE,uBAAK,OAAQ;AACb,uBAAK,SAAU;AACf,uBAAK,eAAgB;AAErB,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAI3C,WAAO,iBAAiB,WAAW,KAAK,YAAmB,KAAK;AAEhE,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,aAAa,MAAqB;AAC1C,uBAAK,eAAc;AAAA,MACjB,KAAK,UAAU;AAAA,QACb,QAAQ,mBAAK;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEQ,WAAW,OAA+B;AAChD,QAAI,OAAO,MAAM,SAAS,UAAU;AAClC;AAAA,IACF;AAEA,UAAM,QAAQ,cAAc,MAAM,IAAI;AACtC,UAAM,UAAU,KAAK,MAAM,cAAc,KAAK,CAAC;AAI/C,QAAI,CAAC,qBAAqB,OAAO,KAAK,QAAQ,WAAW,mBAAK,QAAO;AACnE;AAAA,IACF;AAEA,SAAK,QAAQ,QAAQ,IAAI;AAAA,EAC3B;AAAA,EAEA,WAAW;AAGT,WAAO,oBAAoB,WAAW,KAAK,YAAmB,KAAK;AAAA,EACrE;AACF;AAzEE;AAEA;AAEA","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { base64ToBytes, bytesToString } from '@metamask/utils';\n\ntype WebViewExecutorStreamArgs = {\n  name: string;\n  target: string;\n  targetWindow: Window['ReactNativeWebView'];\n};\n\nexport class WebViewExecutorStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #targetWindow;\n\n  /**\n   * A special post-message-stream to be used by the WebView executor.\n   *\n   * This stream is different in a few ways:\n   * - It expects data to be base64 encoded\n   * - It stringifies the data it posts\n   * - It does less validation of origins\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object. child:WebView\n   * @param args.target - The name of the stream to exchange messages with. parent:rnside\n   * @param args.targetWindow - The window object of the target stream.\n   */\n\n  constructor({ name, target, targetWindow }: WebViewExecutorStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n    this.#targetWindow = targetWindow;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    window.addEventListener('message', this._onMessage as any, false);\n\n    this._handshake();\n  }\n\n  /**\n   * Webview needs to receive strings only on postMessage. That's the main difference between this and the original window post message stream.\n   * Reference: https://github.com/react-native-webview/react-native-webview/blob/master/docs/Guide.md?plain=1#L471\n   */\n\n  protected _postMessage(data: unknown): void {\n    this.#targetWindow.postMessage(\n      JSON.stringify({\n        target: this.#target,\n        data,\n      }),\n    );\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const bytes = base64ToBytes(event.data);\n    const message = JSON.parse(bytesToString(bytes));\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    window.removeEventListener('message', this._onMessage as any, false);\n  }\n}\n"]}