{"version":3,"sources":["../src/common/lockdown/lockdown-events.ts"],"names":[],"mappings":";AAGA,SAAS,mBAAmB;AAQ5B,IAAM,eAAe,oBAAI,IAAI;AAC7B,IAAI,YAAY,YAAY,SAAS,GAAG;AACtC,eAAa,IAAI,QAAQ,WAAW,CAAC,MAAM,CAAC;AAC9C;AACA,IAAI,YAAY,YAAY,eAAe,GAAG;AAC5C,eAAa,IAAI,cAAc,WAAW,CAAC,aAAa,CAAC;AAC3D;AACA,IAAI,YAAY,YAAY,cAAc,GAAG;AAC3C,eAAa,IAAI,aAAa,WAAW,CAAC,QAAQ,CAAC;AACrD;AACA,IAAI,YAAY,YAAY,YAAY,GAAG;AACzC,eAAa,IAAI,WAAW,WAAW,CAAC,eAAe,CAAC;AAC1D;AACA,IAAI,YAAY,YAAY,YAAY,GAAG;AACzC,eAAa,IAAI,WAAW,WAAW;AAAA,IACrC;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;AACA,IAAI,YAAY,YAAY,YAAY,GAAG;AACzC,eAAa,IAAI,WAAW,WAAW,CAAC,iBAAiB,SAAS,CAAC;AACrE;AACA,IAAI,YAAY,YAAY,OAAO,GAAG;AACpC,eAAa,IAAI,MAAM,WAAW;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAKO,SAAS,wBAAwB;AACtC,eAAa,QAAQ,CAAC,YAAY,cAAc;AAC9C,eAAW,YAAY,YAAY;AACjC,aAAO,eAAe,WAAW,UAAU;AAAA,QACzC,OAAO;AAAA,QACP,cAAc;AAAA,QACd,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH","sourcesContent":["// When creating a sandbox, limitation of the events from leaking\n// sensitive objects is required. This is done by overriding own properties\n// of prototypes of all existing events.\nimport { hasProperty } from '@metamask/utils';\n\n/**\n * Targeted Event objects and properties.\n * Note: This is a map of the prototypes that inherit from Events with\n * properties that are identified to leak sensitive objects.\n * Not all browsers support all event types, so checking its existence is required.\n */\nconst targetEvents = new Map();\nif (hasProperty(globalThis, 'UIEvent')) {\n  targetEvents.set(UIEvent.prototype, ['view']);\n}\nif (hasProperty(globalThis, 'MutationEvent')) {\n  targetEvents.set(MutationEvent.prototype, ['relatedNode']);\n}\nif (hasProperty(globalThis, 'MessageEvent')) {\n  targetEvents.set(MessageEvent.prototype, ['source']);\n}\nif (hasProperty(globalThis, 'FocusEvent')) {\n  targetEvents.set(FocusEvent.prototype, ['relatedTarget']);\n}\nif (hasProperty(globalThis, 'MouseEvent')) {\n  targetEvents.set(MouseEvent.prototype, [\n    'relatedTarget',\n    'fromElement',\n    'toElement',\n  ]);\n}\nif (hasProperty(globalThis, 'TouchEvent')) {\n  targetEvents.set(TouchEvent.prototype, ['targetTouches', 'touches']);\n}\nif (hasProperty(globalThis, 'Event')) {\n  targetEvents.set(Event.prototype, [\n    'target',\n    'currentTarget',\n    'srcElement',\n    'composedPath',\n  ]);\n}\n\n/**\n * Attenuate Event objects by replacing its own properties.\n */\nexport function executeLockdownEvents() {\n  targetEvents.forEach((properties, prototype) => {\n    for (const property of properties) {\n      Object.defineProperty(prototype, property, {\n        value: undefined,\n        configurable: false,\n        writable: false,\n      });\n    }\n  });\n}\n"]}