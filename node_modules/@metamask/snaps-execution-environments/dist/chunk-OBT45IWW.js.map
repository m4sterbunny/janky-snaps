{"version":3,"sources":["../src/common/endowments/console.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,cAAc;AAKhB,IAAM,2BAA2B,oBAAI,IAAI;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAMM,IAAM,iBAAiB,oBAAI,IAAI;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAED,IAAM,mBAAmB,CAAC,OAAO,SAAS,SAAS,QAAQ,MAAM;AAejE,SAAS,WAAW,QAAgB,YAAqB,MAAiB;AACxE,QAAM,SAAS,UAAU,MAAM;AAI/B,MAAI,OAAO,YAAY,UAAU;AAC/B,WAAO,CAAC,GAAG,MAAM,IAAI,OAAO,IAAI,GAAG,IAAI;AAAA,EACzC;AAIA,SAAO,CAAC,QAAQ,SAAS,GAAG,IAAI;AAClC;AAUA,SAAS,cAAc,EAAE,OAAO,IAA6B,CAAC,GAAG;AAC/D,SAAO,WAAW,MAAS;AAC3B,QAAM,OAAO,OAAO;AAAA,IAClB,gBAAgB;AAAA,EAClB;AAEA,QAAM,oBAAoB,KAAK,OAAO,CAAC,QAAQ,QAAQ;AACrD,QAAI,eAAe,IAAI,GAAG,KAAK,CAAC,yBAAyB,IAAI,GAAG,GAAG;AACjE,aAAO,EAAE,GAAG,QAAQ,CAAC,GAAG,GAAG,gBAAgB,QAAQ,GAAG,EAAE;AAAA,IAC1D;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAEL,SAAO,OAAO;AAAA,IACZ,SAAS;AAAA,MACP,GAAG;AAAA,MACH,QAAQ,CACN,OACA,YACG,mBACA;AACH,wBAAgB,QAAQ;AAAA,UACtB;AAAA,UACA,GAAG,WAAW,QAAQ,SAAS,GAAG,cAAc;AAAA,QAClD;AAAA,MACF;AAAA,MACA,GAAG,iBAAiB,OAAyB,CAAC,QAAQ,QAAQ;AAC5D,eAAO;AAAA,UACL,GAAG;AAAA,UACH,CAAC,GAAG,GAAG,CAAC,YAAsB,mBAA0B;AACtD,4BAAgB,QAAQ,GAAG;AAAA,cACzB,GAAG,WAAW,QAAQ,SAAS,GAAG,cAAc;AAAA,YAClD;AAAA,UACF;AAAA,QACF;AAAA,MACF,GAAG,CAAC,CAAqB;AAAA,IAC3B;AAAA,EACF,CAAC;AACH;AAEA,IAAM,kBAAkB;AAAA,EACtB,OAAO,CAAC,SAAS;AAAA,EACjB,SAAS;AACX;AAEA,IAAO,kBAAQ","sourcesContent":["import { assert } from '@metamask/utils';\n\nimport { rootRealmGlobal } from '../globalObject';\nimport type { EndowmentFactoryOptions } from './commonEndowmentFactory';\n\nexport const consoleAttenuatedMethods = new Set([\n  'log',\n  'assert',\n  'error',\n  'debug',\n  'info',\n  'warn',\n]);\n\n/**\n * A set of all the `console` values that will be passed to the snap. This has\n * all the values that are available in both the browser and Node.js.\n */\nexport const consoleMethods = new Set([\n  'debug',\n  'error',\n  'info',\n  'log',\n  'warn',\n  'dir',\n  'dirxml',\n  'table',\n  'trace',\n  'group',\n  'groupCollapsed',\n  'groupEnd',\n  'clear',\n  'count',\n  'countReset',\n  'assert',\n  'profile',\n  'profileEnd',\n  'time',\n  'timeLog',\n  'timeEnd',\n  'timeStamp',\n  'context',\n]);\n\nconst consoleFunctions = ['log', 'error', 'debug', 'info', 'warn'] as const;\n\ntype ConsoleFunctions = {\n  [Key in (typeof consoleFunctions)[number]]: (typeof rootRealmGlobal.console)[Key];\n};\n\n/**\n * Gets the appropriate (prepended) message to pass to one of the attenuated\n * method calls.\n *\n * @param snapId - Id of the snap that we're getting a message for.\n * @param message - The id of the snap that will interact with the endowment.\n * @param args - The array of additional arguments.\n * @returns An array of arguments to be passed into an attenuated console method call.\n */\nfunction getMessage(snapId: string, message: unknown, ...args: unknown[]) {\n  const prefix = `[Snap: ${snapId}]`;\n\n  // If the first argument is a string, prepend the prefix to the message, and keep the\n  // rest of the arguments as-is.\n  if (typeof message === 'string') {\n    return [`${prefix} ${message}`, ...args];\n  }\n\n  // Otherwise, the `message` is an object, array, etc., so add the prefix as a separate\n  // message to the arguments.\n  return [prefix, message, ...args];\n}\n\n/**\n * Create a a {@link console} object, with the same properties as the global\n * {@link console} object, but with some methods replaced.\n *\n * @param options - Factory options used in construction of the endowment.\n * @param options.snapId - The id of the snap that will interact with the endowment.\n * @returns The {@link console} object with the replaced methods.\n */\nfunction createConsole({ snapId }: EndowmentFactoryOptions = {}) {\n  assert(snapId !== undefined);\n  const keys = Object.getOwnPropertyNames(\n    rootRealmGlobal.console,\n  ) as (keyof typeof console)[];\n\n  const attenuatedConsole = keys.reduce((target, key) => {\n    if (consoleMethods.has(key) && !consoleAttenuatedMethods.has(key)) {\n      return { ...target, [key]: rootRealmGlobal.console[key] };\n    }\n\n    return target;\n  }, {});\n\n  return harden({\n    console: {\n      ...attenuatedConsole,\n      assert: (\n        value: any,\n        message?: string | undefined,\n        ...optionalParams: any[]\n      ) => {\n        rootRealmGlobal.console.assert(\n          value,\n          ...getMessage(snapId, message, ...optionalParams),\n        );\n      },\n      ...consoleFunctions.reduce<ConsoleFunctions>((target, key) => {\n        return {\n          ...target,\n          [key]: (message?: unknown, ...optionalParams: any[]) => {\n            rootRealmGlobal.console[key](\n              ...getMessage(snapId, message, ...optionalParams),\n            );\n          },\n        };\n      }, {} as ConsoleFunctions),\n    },\n  });\n}\n\nconst endowmentModule = {\n  names: ['console'] as const,\n  factory: createConsole,\n};\n\nexport default endowmentModule;\n"]}