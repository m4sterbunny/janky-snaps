{"version":3,"sources":["../src/common/endowments/commonEndowmentFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAM,mBAAmD;AAAA,EACvD,EAAE,WAAW,iBAAiB,MAAM,kBAAkB;AAAA,EACtD,EAAE,WAAW,aAAa,MAAM,cAAc;AAAA,EAC9C,EAAE,WAAW,aAAa,MAAM,cAAc;AAAA,EAC9C,EAAE,WAAW,MAAM,MAAM,QAAQ,MAAM,KAAK;AAAA,EAC5C,EAAE,WAAW,QAAQ,MAAM,SAAS;AAAA,EACpC,EAAE,WAAW,eAAe,MAAM,gBAAgB;AAAA,EAClD,EAAE,WAAW,gBAAgB,MAAM,iBAAiB;AAAA,EACpD,EAAE,WAAW,MAAM,MAAM,QAAQ,MAAM,KAAK;AAAA,EAC5C,EAAE,WAAW,UAAU,MAAM,WAAW;AAAA,EACxC,EAAE,WAAW,cAAc,MAAM,eAAe;AAAA,EAChD,EAAE,WAAW,cAAc,MAAM,eAAe;AAAA,EAChD,EAAE,WAAW,WAAW,MAAM,YAAY;AAAA,EAC1C,EAAE,WAAW,YAAY,MAAM,aAAa;AAAA,EAC5C,EAAE,WAAW,YAAY,MAAM,aAAa;AAAA,EAC5C,EAAE,WAAW,YAAY,MAAM,aAAa;AAAA,EAC5C,EAAE,WAAW,mBAAmB,MAAM,oBAAoB;AAAA,EAC1D,EAAE,WAAW,aAAa,MAAM,cAAc;AAAA,EAC9C,EAAE,WAAW,aAAa,MAAM,cAAc;AAAA,EAC9C,EAAE,WAAW,KAAK,MAAM,MAAM;AAAA,EAC9B,EAAE,WAAW,aAAa,MAAM,cAAc;AAChD;AASA,IAAM,wBAAwB,MAA0B;AACtD,QAAM,qBAAyC;AAAA,IAC7C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,mBAAiB,QAAQ,CAAC,2BAA2B;AACnD,UAAM,YAAY;AAAA,MAChB,OAAO,CAAC,uBAAuB,IAAI;AAAA,MACnC,SAAS,MAAM;AACb,cAAM,iBACJ,OAAO,uBAAuB,cAAc,cAC5C,uBAAuB,OACnB,uBAAuB,UAAU,KAAK,eAAe,IACrD,uBAAuB;AAC7B,eAAO;AAAA,UACL,CAAC,uBAAuB,IAAI,GAAG,OAAO,cAAc;AAAA,QACtD;AAAA,MACF;AAAA,IACF;AACA,uBAAmB,KAAK,SAAS;AAAA,EACnC,CAAC;AAED,SAAO;AACT;AAEA,IAAO,iCAAQ","sourcesContent":["import type { NotifyFunction } from '../BaseSnapExecutor';\nimport { rootRealmGlobal } from '../globalObject';\nimport consoleEndowment from './console';\nimport crypto from './crypto';\nimport date from './date';\nimport interval from './interval';\nimport math from './math';\nimport network from './network';\nimport textDecoder from './textDecoder';\nimport textEncoder from './textEncoder';\nimport timeout from './timeout';\n\nexport type EndowmentFactoryOptions = {\n  snapId?: string;\n  notify?: NotifyFunction;\n};\n\nexport type EndowmentFactory = {\n  names: readonly string[];\n  factory: (options?: EndowmentFactoryOptions) => { [key: string]: unknown };\n};\n\nexport type CommonEndowmentSpecification = {\n  endowment: unknown;\n  name: string;\n  bind?: boolean;\n};\n\n// Array of common endowments\nconst commonEndowments: CommonEndowmentSpecification[] = [\n  { endowment: AbortController, name: 'AbortController' },\n  { endowment: AbortSignal, name: 'AbortSignal' },\n  { endowment: ArrayBuffer, name: 'ArrayBuffer' },\n  { endowment: atob, name: 'atob', bind: true },\n  { endowment: BigInt, name: 'BigInt' },\n  { endowment: BigInt64Array, name: 'BigInt64Array' },\n  { endowment: BigUint64Array, name: 'BigUint64Array' },\n  { endowment: btoa, name: 'btoa', bind: true },\n  { endowment: DataView, name: 'DataView' },\n  { endowment: Float32Array, name: 'Float32Array' },\n  { endowment: Float64Array, name: 'Float64Array' },\n  { endowment: Int8Array, name: 'Int8Array' },\n  { endowment: Int16Array, name: 'Int16Array' },\n  { endowment: Int32Array, name: 'Int32Array' },\n  { endowment: Uint8Array, name: 'Uint8Array' },\n  { endowment: Uint8ClampedArray, name: 'Uint8ClampedArray' },\n  { endowment: Uint16Array, name: 'Uint16Array' },\n  { endowment: Uint32Array, name: 'Uint32Array' },\n  { endowment: URL, name: 'URL' },\n  { endowment: WebAssembly, name: 'WebAssembly' },\n];\n\n/**\n * Creates a consolidated collection of common endowments.\n * This function will return factories for all common endowments including\n * the additionally attenuated. All hardened with SES.\n *\n * @returns An object with common endowments.\n */\nconst buildCommonEndowments = (): EndowmentFactory[] => {\n  const endowmentFactories: EndowmentFactory[] = [\n    crypto,\n    interval,\n    math,\n    network,\n    timeout,\n    textDecoder,\n    textEncoder,\n    date,\n    consoleEndowment,\n  ];\n\n  commonEndowments.forEach((endowmentSpecification) => {\n    const endowment = {\n      names: [endowmentSpecification.name] as const,\n      factory: () => {\n        const boundEndowment =\n          typeof endowmentSpecification.endowment === 'function' &&\n          endowmentSpecification.bind\n            ? endowmentSpecification.endowment.bind(rootRealmGlobal)\n            : endowmentSpecification.endowment;\n        return {\n          [endowmentSpecification.name]: harden(boundEndowment),\n        } as const;\n      },\n    };\n    endowmentFactories.push(endowment);\n  });\n\n  return endowmentFactories;\n};\n\nexport default buildCommonEndowments;\n"]}