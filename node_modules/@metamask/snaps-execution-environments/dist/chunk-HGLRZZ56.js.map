{"version":3,"sources":["../src/common/endowments/crypto.ts"],"names":[],"mappings":";;;;;;;;AAEO,IAAM,eAAe,MAAM;AAChC,MACE,YAAY,mBACZ,OAAO,gBAAgB,WAAW,YAClC,kBAAkB,mBAClB,OAAO,gBAAgB,iBAAiB,YACxC;AACA,WAAO;AAAA,MACL,QAAQ,OAAO,gBAAgB,MAAM;AAAA,MACrC,cAAc,OAAO,gBAAgB,YAAY;AAAA,IACnD;AAAA,EACF;AAIA,QAAM,SAAS,UAAQ,QAAQ,EAAE;AACjC,SAAO;AAAA,IACL,QAAQ,OAAO,MAAM;AAAA,IACrB,cAAc,OAAO,OAAO,OAAO,WAAW;AAAA,EAChD;AACF;AAEA,IAAM,kBAAkB;AAAA,EACtB,OAAO,CAAC,UAAU,cAAc;AAAA,EAChC,SAAS;AACX;AACA,IAAO,iBAAQ","sourcesContent":["import { rootRealmGlobal } from '../globalObject';\n\nexport const createCrypto = () => {\n  if (\n    'crypto' in rootRealmGlobal &&\n    typeof rootRealmGlobal.crypto === 'object' &&\n    'SubtleCrypto' in rootRealmGlobal &&\n    typeof rootRealmGlobal.SubtleCrypto === 'function'\n  ) {\n    return {\n      crypto: harden(rootRealmGlobal.crypto),\n      SubtleCrypto: harden(rootRealmGlobal.SubtleCrypto),\n    };\n  }\n  // For now, we expose the experimental webcrypto API for Node.js execution environments\n  // TODO: Figure out if this is enough long-term or if we should use a polyfill.\n  /* eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, n/global-require */\n  const crypto = require('crypto').webcrypto;\n  return {\n    crypto: harden(crypto),\n    SubtleCrypto: harden(crypto.subtle.constructor),\n  } as const;\n};\n\nconst endowmentModule = {\n  names: ['crypto', 'SubtleCrypto'] as const,\n  factory: createCrypto,\n};\nexport default endowmentModule;\n"]}