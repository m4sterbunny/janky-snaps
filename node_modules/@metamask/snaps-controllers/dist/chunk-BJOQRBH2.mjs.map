{"version":3,"sources":["../src/services/iframe/IframeExecutionService.ts"],"sourcesContent":["import type { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { WindowPostMessageStream } from '@metamask/post-message-stream';\nimport { createWindow } from '@metamask/snaps-utils';\n\nimport type { Job, ExecutionServiceArgs } from '../AbstractExecutionService';\nimport { AbstractExecutionService } from '../AbstractExecutionService';\n\ntype IframeExecutionEnvironmentServiceArgs = {\n  iframeUrl: URL;\n} & ExecutionServiceArgs;\n\nexport class IframeExecutionService extends AbstractExecutionService<Window> {\n  public iframeUrl: URL;\n\n  constructor({\n    iframeUrl,\n    messenger,\n    setupSnapProvider,\n  }: IframeExecutionEnvironmentServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n    });\n    this.iframeUrl = iframeUrl;\n  }\n\n  protected terminateJob(jobWrapper: Job<Window>): void {\n    document.getElementById(jobWrapper.id)?.remove();\n  }\n\n  protected async initEnvStream(jobId: string): Promise<{\n    worker: Window;\n    stream: BasePostMessageStream;\n  }> {\n    const iframeWindow = await createWindow(this.iframeUrl.toString(), jobId);\n\n    const stream = new WindowPostMessageStream({\n      name: 'parent',\n      target: 'child',\n      targetWindow: iframeWindow,\n      targetOrigin: '*',\n    });\n\n    return { worker: iframeWindow, stream };\n  }\n}\n"],"mappings":";;;;;AACA,SAAS,+BAA+B;AACxC,SAAS,oBAAoB;AAStB,IAAM,yBAAN,cAAqC,yBAAiC;AAAA,EAG3E,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAA0C;AACxC,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,CAAC;AACD,SAAK,YAAY;AAAA,EACnB;AAAA,EAEU,aAAa,YAA+B;AACpD,aAAS,eAAe,WAAW,EAAE,GAAG,OAAO;AAAA,EACjD;AAAA,EAEA,MAAgB,cAAc,OAG3B;AACD,UAAM,eAAe,MAAM,aAAa,KAAK,UAAU,SAAS,GAAG,KAAK;AAExE,UAAM,SAAS,IAAI,wBAAwB;AAAA,MACzC,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,cAAc;AAAA,IAChB,CAAC;AAED,WAAO,EAAE,QAAQ,cAAc,OAAO;AAAA,EACxC;AACF;","names":[]}