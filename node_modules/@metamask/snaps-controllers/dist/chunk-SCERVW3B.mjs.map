{"version":3,"sources":["../src/services/webworker/WebWorkerExecutionService.ts"],"sourcesContent":["import type { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { WindowPostMessageStream } from '@metamask/post-message-stream';\nimport { createWindow } from '@metamask/snaps-utils';\nimport { assert } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\nimport type { ExecutionServiceArgs, Job } from '../AbstractExecutionService';\nimport { AbstractExecutionService } from '../AbstractExecutionService';\nimport { ProxyPostMessageStream } from '../ProxyPostMessageStream';\n\ntype WebWorkerExecutionEnvironmentServiceArgs = {\n  documentUrl: URL;\n} & ExecutionServiceArgs;\n\nexport const WORKER_POOL_ID = 'snaps-worker-pool';\n\nexport class WebWorkerExecutionService extends AbstractExecutionService<string> {\n  #documentUrl: URL;\n\n  #runtimeStream?: BasePostMessageStream;\n\n  /**\n   * Create a new webworker execution service.\n   *\n   * @param args - The constructor arguments.\n   * @param args.documentUrl - The URL of the worker pool document to use as the\n   * execution environment.\n   * @param args.messenger - The messenger to use for communication with the\n   * `SnapController`.\n   * @param args.setupSnapProvider - The function to use to set up the snap\n   * provider.\n   */\n  constructor({\n    documentUrl,\n    messenger,\n    setupSnapProvider,\n  }: WebWorkerExecutionEnvironmentServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n    });\n\n    this.#documentUrl = documentUrl;\n  }\n\n  /**\n   * Send a termination command to the worker pool document.\n   *\n   * @param job - The job to terminate.\n   */\n  protected async terminateJob(job: Job<string>) {\n    // The `AbstractExecutionService` will have already closed the job stream,\n    // so we write to the runtime stream directly.\n    assert(this.#runtimeStream, 'Runtime stream not initialized.');\n    this.#runtimeStream.write({\n      jobId: job.id,\n      data: {\n        jsonrpc: '2.0',\n        method: 'terminateJob',\n        id: nanoid(),\n      },\n    });\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   */\n  protected async initEnvStream(jobId: string) {\n    // Lazily create the worker pool document.\n    await this.createDocument();\n\n    // `createDocument` should have initialized the runtime stream.\n    assert(this.#runtimeStream, 'Runtime stream not initialized.');\n\n    const stream = new ProxyPostMessageStream({\n      stream: this.#runtimeStream,\n      jobId,\n    });\n\n    return { worker: jobId, stream };\n  }\n\n  /**\n   * Creates the worker pool document to be used as the execution environment.\n   *\n   * If the document already exists, this does nothing.\n   */\n  private async createDocument() {\n    // We only want to create a single pool.\n    if (document.getElementById(WORKER_POOL_ID)) {\n      return;\n    }\n\n    const window = await createWindow(\n      this.#documentUrl.href,\n      WORKER_POOL_ID,\n      false,\n    );\n\n    this.#runtimeStream = new WindowPostMessageStream({\n      name: 'parent',\n      target: 'child',\n      targetWindow: window,\n      targetOrigin: '*',\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AACA,SAAS,+BAA+B;AACxC,SAAS,oBAAoB;AAC7B,SAAS,cAAc;AACvB,SAAS,cAAc;AAUhB,IAAM,iBAAiB;AAd9B;AAgBO,IAAM,4BAAN,cAAwC,yBAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgB9E,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAA6C;AAC3C,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,CAAC;AAvBH;AAEA;AAuBE,uBAAK,cAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAgB,aAAa,KAAkB;AAG7C,WAAO,mBAAK,iBAAgB,iCAAiC;AAC7D,uBAAK,gBAAe,MAAM;AAAA,MACxB,OAAO,IAAI;AAAA,MACX,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,IAAI,OAAO;AAAA,MACb;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAgB,cAAc,OAAe;AAE3C,UAAM,KAAK,eAAe;AAG1B,WAAO,mBAAK,iBAAgB,iCAAiC;AAE7D,UAAM,SAAS,IAAI,uBAAuB;AAAA,MACxC,QAAQ,mBAAK;AAAA,MACb;AAAA,IACF,CAAC;AAED,WAAO,EAAE,QAAQ,OAAO,OAAO;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,iBAAiB;AAE7B,QAAI,SAAS,eAAe,cAAc,GAAG;AAC3C;AAAA,IACF;AAEA,UAAM,SAAS,MAAM;AAAA,MACnB,mBAAK,cAAa;AAAA,MAClB;AAAA,MACA;AAAA,IACF;AAEA,uBAAK,gBAAiB,IAAI,wBAAwB;AAAA,MAChD,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AACF;AA5FE;AAEA;","names":[]}