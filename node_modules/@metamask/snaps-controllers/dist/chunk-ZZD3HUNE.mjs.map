{"version":3,"sources":["../src/snaps/registry/registry.ts"],"sourcesContent":["import type {\n  BlockReason,\n  SnapsRegistryDatabase,\n} from '@metamask/snaps-registry';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport type { SemVerRange, SemVerVersion } from '@metamask/utils';\n\nexport type SnapsRegistryInfo = { version: SemVerVersion; checksum: string };\nexport type SnapsRegistryRequest = Record<SnapId, SnapsRegistryInfo>;\nexport type SnapsRegistryMetadata =\n  SnapsRegistryDatabase['verifiedSnaps'][SnapId]['metadata'];\n\nexport enum SnapsRegistryStatus {\n  Unverified = 0,\n  Blocked = 1,\n  Verified = 2,\n  Unavailable = 3,\n}\n\nexport type SnapsRegistryResult = {\n  status: SnapsRegistryStatus;\n  reason?: BlockReason;\n};\n\nexport type SnapsRegistry = {\n  get(\n    snaps: SnapsRegistryRequest,\n  ): Promise<Record<SnapId, SnapsRegistryResult>>;\n\n  update(): Promise<void>;\n\n  /**\n   * Find an allowlisted version within a specified version range.\n   *\n   * @param snapId - The ID of the snap we are trying to resolve a version for.\n   * @param versionRange - The version range.\n   * @param refetch - An optional flag used to determine if we are refetching the registry.\n   * @returns An allowlisted version within the specified version range.\n   * @throws If an allowlisted version does not exist within the version range.\n   */\n  resolveVersion(\n    snapId: SnapId,\n    versionRange: SemVerRange,\n  ): Promise<SemVerRange>;\n\n  /**\n   * Get metadata for the given snap ID.\n   *\n   * @param snapId - The ID of the snap to get metadata for.\n   * @returns The metadata for the given snap ID, or `null` if the snap is not\n   * verified.\n   */\n  getMetadata(snapId: SnapId): Promise<SnapsRegistryMetadata | null>;\n};\n"],"mappings":";AAYO,IAAK,sBAAL,kBAAKA,yBAAL;AACL,EAAAA,0CAAA,gBAAa,KAAb;AACA,EAAAA,0CAAA,aAAU,KAAV;AACA,EAAAA,0CAAA,cAAW,KAAX;AACA,EAAAA,0CAAA,iBAAc,KAAd;AAJU,SAAAA;AAAA,GAAA;","names":["SnapsRegistryStatus"]}