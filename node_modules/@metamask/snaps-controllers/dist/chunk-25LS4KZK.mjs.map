{"version":3,"sources":["../src/services/node-js/NodeProcessExecutionService.ts"],"sourcesContent":["import type { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { ProcessParentMessageStream } from '@metamask/post-message-stream';\nimport type { ChildProcess } from 'child_process';\nimport { fork } from 'child_process';\n\nimport type { Job } from '..';\nimport { AbstractExecutionService } from '..';\n\nexport class NodeProcessExecutionService extends AbstractExecutionService<ChildProcess> {\n  protected async initEnvStream(): Promise<{\n    worker: ChildProcess;\n    stream: BasePostMessageStream;\n  }> {\n    const worker = fork(\n      require.resolve(\n        '@metamask/snaps-execution-environments/dist/browserify/node-process/bundle.js',\n      ),\n      {\n        stdio: 'pipe',\n      },\n    );\n\n    // Capturing `stdout` and `stderr` from the worker prevents the worker from\n    // writing to them directly, making it easier to capture them Jest.\n    worker.stdout?.on('data', (data) => {\n      // eslint-disable-next-line no-console\n      console.log(data.toString());\n    });\n\n    worker.stderr?.on('data', (data) => {\n      // eslint-disable-next-line no-console\n      console.error(data.toString());\n    });\n\n    const stream = new ProcessParentMessageStream({ process: worker });\n    return Promise.resolve({ worker, stream });\n  }\n\n  protected terminateJob(jobWrapper: Job<ChildProcess>): void {\n    jobWrapper.worker.kill();\n  }\n}\n"],"mappings":";;;;;;;;AACA,SAAS,kCAAkC;AAE3C,SAAS,YAAY;AAKd,IAAM,8BAAN,cAA0C,yBAAuC;AAAA,EACtF,MAAgB,gBAGb;AACD,UAAM,SAAS;AAAA,MACb,UAAQ;AAAA,QACN;AAAA,MACF;AAAA,MACA;AAAA,QACE,OAAO;AAAA,MACT;AAAA,IACF;AAIA,WAAO,QAAQ,GAAG,QAAQ,CAAC,SAAS;AAElC,cAAQ,IAAI,KAAK,SAAS,CAAC;AAAA,IAC7B,CAAC;AAED,WAAO,QAAQ,GAAG,QAAQ,CAAC,SAAS;AAElC,cAAQ,MAAM,KAAK,SAAS,CAAC;AAAA,IAC/B,CAAC;AAED,UAAM,SAAS,IAAI,2BAA2B,EAAE,SAAS,OAAO,CAAC;AACjE,WAAO,QAAQ,QAAQ,EAAE,QAAQ,OAAO,CAAC;AAAA,EAC3C;AAAA,EAEU,aAAa,YAAqC;AAC1D,eAAW,OAAO,KAAK;AAAA,EACzB;AACF;","names":[]}