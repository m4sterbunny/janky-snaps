{"version":3,"sources":["../src/cronjob/CronjobController.ts"],"sourcesContent":["import type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type { GetPermissions } from '@metamask/permission-controller';\nimport {\n  getCronjobCaveatJobs,\n  SnapEndowments,\n} from '@metamask/snaps-rpc-methods';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport type {\n  TruncatedSnap,\n  CronjobSpecification,\n} from '@metamask/snaps-utils';\nimport {\n  HandlerType,\n  parseCronExpression,\n  logError,\n} from '@metamask/snaps-utils';\nimport { Duration, inMilliseconds } from '@metamask/utils';\n\nimport type {\n  GetAllSnaps,\n  HandleSnapRequest,\n  SnapDisabled,\n  SnapEnabled,\n  SnapInstalled,\n  SnapUninstalled,\n  SnapUpdated,\n} from '..';\nimport { getRunnableSnaps } from '..';\nimport { Timer } from '../snaps/Timer';\n\nexport type CronjobControllerActions =\n  | GetAllSnaps\n  | HandleSnapRequest\n  | GetPermissions;\n\nexport type CronjobControllerEvents =\n  | SnapInstalled\n  | SnapUninstalled\n  | SnapUpdated\n  | SnapEnabled\n  | SnapDisabled;\n\nexport type CronjobControllerMessenger = RestrictedControllerMessenger<\n  'CronjobController',\n  CronjobControllerActions,\n  CronjobControllerEvents,\n  CronjobControllerActions['type'],\n  CronjobControllerEvents['type']\n>;\n\nexport const DAILY_TIMEOUT = inMilliseconds(24, Duration.Hour);\n\nexport type CronjobControllerArgs = {\n  messenger: CronjobControllerMessenger;\n  /**\n   * Persisted state that will be used for rehydration.\n   */\n  state?: CronjobControllerState;\n};\n\nexport type Cronjob = {\n  timer?: Timer;\n  id: string;\n  snapId: SnapId;\n} & CronjobSpecification;\n\nexport type StoredJobInformation = {\n  lastRun: number;\n};\n\nexport type CronjobControllerState = {\n  jobs: Record<string, StoredJobInformation>;\n};\n\nconst controllerName = 'CronjobController';\n\n/**\n * Use this controller to register and schedule periodically executed jobs\n * using RPC method hooks.\n */\nexport class CronjobController extends BaseController<\n  typeof controllerName,\n  CronjobControllerState,\n  CronjobControllerMessenger\n> {\n  #messenger: CronjobControllerMessenger;\n\n  #dailyTimer!: Timer;\n\n  #timers: Map<string, Timer>;\n\n  // Mapping from jobId to snapId\n  #snapIds: Map<string, string>;\n\n  constructor({ messenger, state }: CronjobControllerArgs) {\n    super({\n      messenger,\n      metadata: {\n        jobs: { persist: true, anonymous: false },\n      },\n      name: controllerName,\n      state: {\n        jobs: {},\n        ...state,\n      },\n    });\n    this.#timers = new Map();\n    this.#snapIds = new Map();\n    this.#messenger = messenger;\n\n    this._handleSnapRegisterEvent = this._handleSnapRegisterEvent.bind(this);\n    this._handleSnapUnregisterEvent =\n      this._handleSnapUnregisterEvent.bind(this);\n    this._handleEventSnapUpdated = this._handleEventSnapUpdated.bind(this);\n\n    // Subscribe to Snap events\n    /* eslint-disable @typescript-eslint/unbound-method */\n    this.messagingSystem.subscribe(\n      'SnapController:snapInstalled',\n      this._handleSnapRegisterEvent,\n    );\n\n    this.messagingSystem.subscribe(\n      'SnapController:snapUninstalled',\n      this._handleSnapUnregisterEvent,\n    );\n\n    this.messagingSystem.subscribe(\n      'SnapController:snapEnabled',\n      this._handleSnapRegisterEvent,\n    );\n\n    this.messagingSystem.subscribe(\n      'SnapController:snapDisabled',\n      this._handleSnapUnregisterEvent,\n    );\n\n    this.messagingSystem.subscribe(\n      'SnapController:snapUpdated',\n      this._handleEventSnapUpdated,\n    );\n    /* eslint-enable @typescript-eslint/unbound-method */\n\n    this.dailyCheckIn().catch((error) => {\n      logError(error);\n    });\n  }\n\n  /**\n   * Retrieve all cronjob specifications for all runnable snaps.\n   *\n   * @returns Array of Cronjob specifications.\n   */\n  private getAllJobs(): Cronjob[] {\n    const snaps = this.messagingSystem.call('SnapController:getAll');\n    const filteredSnaps = getRunnableSnaps(snaps);\n\n    const jobs = filteredSnaps.map((snap) => this.getSnapJobs(snap.id));\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return jobs.flat().filter((job) => job !== undefined) as Cronjob[];\n  }\n\n  /**\n   * Retrieve all Cronjob specifications for a Snap.\n   *\n   * @param snapId - ID of a Snap.\n   * @returns Array of Cronjob specifications.\n   */\n  private getSnapJobs(snapId: SnapId): Cronjob[] | undefined {\n    const permissions = this.#messenger.call(\n      'PermissionController:getPermissions',\n      snapId,\n    );\n\n    const permission = permissions?.[SnapEndowments.Cronjob];\n    const definitions = getCronjobCaveatJobs(permission);\n\n    return definitions?.map((definition, idx) => {\n      return { ...definition, id: `${snapId}-${idx}`, snapId };\n    });\n  }\n\n  /**\n   * Register cron jobs for a given snap by getting specification from a permission caveats.\n   * Once registered, each job will be scheduled.\n   *\n   * @param snapId - ID of a snap.\n   */\n  register(snapId: SnapId) {\n    const jobs = this.getSnapJobs(snapId);\n    jobs?.forEach((job) => this.schedule(job));\n  }\n\n  /**\n   * Schedule a new job.\n   * This will interpret the cron expression and tell the timer to execute the job\n   * at the next suitable point in time.\n   * Job last run state will be initialized afterwards.\n   *\n   * Note: Schedule will be skipped if the job's execution time is too far in the future and\n   * will be revisited on a daily check.\n   *\n   * @param job - Cronjob specification.\n   */\n  private schedule(job: Cronjob) {\n    if (this.#timers.has(job.id)) {\n      return;\n    }\n\n    const parsed = parseCronExpression(job.expression);\n    const next = parsed.next();\n    const now = new Date();\n    const ms = next.getTime() - now.getTime();\n\n    // Don't schedule this job yet as it is too far in the future\n    if (ms > DAILY_TIMEOUT) {\n      return;\n    }\n\n    const timer = new Timer(ms);\n    timer.start(() => {\n      this.executeCronjob(job).catch((error) => {\n        // TODO: Decide how to handle errors.\n        logError(error);\n      });\n\n      this.#timers.delete(job.id);\n      this.schedule(job);\n    });\n\n    if (!this.state.jobs[job.id]?.lastRun) {\n      this.updateJobLastRunState(job.id, 0); // 0 for init, never ran actually\n    }\n\n    this.#timers.set(job.id, timer);\n    this.#snapIds.set(job.id, job.snapId);\n  }\n\n  /**\n   * Execute job.\n   *\n   * @param job - Cronjob specification.\n   */\n  private async executeCronjob(job: Cronjob) {\n    this.updateJobLastRunState(job.id, Date.now());\n    await this.#messenger.call('SnapController:handleRequest', {\n      snapId: job.snapId,\n      origin: '',\n      handler: HandlerType.OnCronjob,\n      request: job.request,\n    });\n  }\n\n  /**\n   * Unregister all jobs related to the given snapId.\n   *\n   * @param snapId - ID of a snap.\n   */\n  unregister(snapId: string) {\n    const jobs = [...this.#snapIds.entries()].filter(\n      ([_, jobSnapId]) => jobSnapId === snapId,\n    );\n\n    if (jobs.length) {\n      jobs.forEach(([id]) => {\n        const timer = this.#timers.get(id);\n        if (timer) {\n          timer.cancel();\n          this.#timers.delete(id);\n          this.#snapIds.delete(id);\n        }\n      });\n    }\n  }\n\n  /**\n   * Update time of a last run for the Cronjob specified by ID.\n   *\n   * @param jobId - ID of a cron job.\n   * @param lastRun - Unix timestamp when the job was last ran.\n   */\n  private updateJobLastRunState(jobId: string, lastRun: number) {\n    this.update((state) => {\n      state.jobs[jobId] = {\n        lastRun,\n      };\n    });\n  }\n\n  /**\n   * Runs every 24 hours to check if new jobs need to be scheduled.\n   *\n   * This is necessary for longer running jobs that execute with more than 24 hours between them.\n   */\n  async dailyCheckIn() {\n    const jobs = this.getAllJobs();\n\n    for (const job of jobs) {\n      const parsed = parseCronExpression(job.expression);\n      const lastRun = this.state.jobs[job.id]?.lastRun;\n      // If a job was supposed to run while we were shut down but wasn't we run it now\n      if (\n        lastRun !== undefined &&\n        parsed.hasPrev() &&\n        parsed.prev().getTime() > lastRun\n      ) {\n        await this.executeCronjob(job);\n      }\n\n      // Try scheduling, will fail if an existing scheduled job is found\n      this.schedule(job);\n    }\n\n    this.#dailyTimer = new Timer(DAILY_TIMEOUT);\n    this.#dailyTimer.start(() => {\n      this.dailyCheckIn().catch((error) => {\n        // TODO: Decide how to handle errors.\n        logError(error);\n      });\n    });\n  }\n\n  /**\n   * Run controller teardown process and unsubscribe from Snap events.\n   */\n  destroy() {\n    super.destroy();\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    this.messagingSystem.unsubscribe(\n      'SnapController:snapInstalled',\n      this._handleSnapRegisterEvent,\n    );\n\n    this.messagingSystem.unsubscribe(\n      'SnapController:snapUninstalled',\n      this._handleSnapUnregisterEvent,\n    );\n\n    this.messagingSystem.unsubscribe(\n      'SnapController:snapEnabled',\n      this._handleSnapRegisterEvent,\n    );\n\n    this.messagingSystem.unsubscribe(\n      'SnapController:snapDisabled',\n      this._handleSnapUnregisterEvent,\n    );\n\n    this.messagingSystem.unsubscribe(\n      'SnapController:snapUpdated',\n      this._handleEventSnapUpdated,\n    );\n    /* eslint-enable @typescript-eslint/unbound-method */\n\n    this.#snapIds.forEach((snapId) => {\n      this.unregister(snapId);\n    });\n  }\n\n  /**\n   * Handle events that should cause cronjobs to be registered.\n   *\n   * @param snap - Basic Snap information.\n   */\n  private _handleSnapRegisterEvent(snap: TruncatedSnap) {\n    this.register(snap.id);\n  }\n\n  /**\n   * Handle events that should cause cronjobs to be unregistered.\n   *\n   * @param snap - Basic Snap information.\n   */\n  private _handleSnapUnregisterEvent(snap: TruncatedSnap) {\n    this.unregister(snap.id);\n  }\n\n  /**\n   * Handle cron jobs on 'snapUpdated' event.\n   *\n   * @param snap - Basic Snap information.\n   */\n  private _handleEventSnapUpdated(snap: TruncatedSnap) {\n    this.unregister(snap.id);\n    this.register(snap.id);\n  }\n}\n"],"mappings":"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","names":[]}