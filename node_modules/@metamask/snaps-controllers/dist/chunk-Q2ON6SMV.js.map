{"version":3,"sources":["../src/interface/SnapInterfaceController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type {\n  MaybeUpdateState,\n  TestOrigin,\n} from '@metamask/phishing-controller';\nimport type { Component, InterfaceState, SnapId } from '@metamask/snaps-sdk';\nimport {\n  getTotalTextLength,\n  validateComponentLinks,\n} from '@metamask/snaps-utils';\nimport { assert, getJsonSize } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\nimport { constructState } from './utils';\n\nconst MAX_UI_CONTENT_SIZE = 250_000; // 250 kb\nconst MAX_TEXT_LENGTH = 50_000; // 50 kb\n\nconst controllerName = 'SnapInterfaceController';\n\nexport type CreateInterface = {\n  type: `${typeof controllerName}:createInterface`;\n  handler: SnapInterfaceController['createInterface'];\n};\n\nexport type GetInterface = {\n  type: `${typeof controllerName}:getInterface`;\n  handler: SnapInterfaceController['getInterface'];\n};\n\nexport type UpdateInterface = {\n  type: `${typeof controllerName}:updateInterface`;\n  handler: SnapInterfaceController['updateInterface'];\n};\n\nexport type DeleteInterface = {\n  type: `${typeof controllerName}:deleteInterface`;\n  handler: SnapInterfaceController['deleteInterface'];\n};\n\nexport type UpdateInterfaceState = {\n  type: `${typeof controllerName}:updateInterfaceState`;\n  handler: SnapInterfaceController['updateInterfaceState'];\n};\n\nexport type SnapInterfaceControllerAllowedActions =\n  | TestOrigin\n  | MaybeUpdateState;\n\nexport type SnapInterfaceControllerActions =\n  | CreateInterface\n  | GetInterface\n  | UpdateInterface\n  | DeleteInterface\n  | UpdateInterfaceState;\n\nexport type SnapInterfaceControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SnapInterfaceControllerActions | SnapInterfaceControllerAllowedActions,\n  never,\n  SnapInterfaceControllerAllowedActions['type'],\n  never\n>;\n\nexport type StoredInterface = {\n  snapId: SnapId;\n  content: Component;\n  state: InterfaceState;\n};\n\nexport type SnapInterfaceControllerState = {\n  interfaces: Record<string, StoredInterface>;\n};\n\nexport type SnapInterfaceControllerArgs = {\n  messenger: SnapInterfaceControllerMessenger;\n  state?: SnapInterfaceControllerState;\n};\n\n/**\n * Use this controller to manage snaps UI interfaces using RPC method hooks.\n */\nexport class SnapInterfaceController extends BaseController<\n  typeof controllerName,\n  SnapInterfaceControllerState,\n  SnapInterfaceControllerMessenger\n> {\n  constructor({ messenger, state }: SnapInterfaceControllerArgs) {\n    super({\n      messenger,\n      metadata: {\n        interfaces: { persist: false, anonymous: false },\n      },\n      name: controllerName,\n      state: { interfaces: {}, ...state },\n    });\n\n    this.#registerMessageHandlers();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  #registerMessageHandlers() {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:createInterface`,\n      this.createInterface.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getInterface`,\n      this.getInterface.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateInterface`,\n      this.updateInterface.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:deleteInterface`,\n      this.deleteInterface.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateInterfaceState`,\n      this.updateInterfaceState.bind(this),\n    );\n  }\n\n  /**\n   * Create an interface in the controller state with the associated data.\n   *\n   * @param snapId - The snap id that created the interface.\n   * @param content - The interface content.\n   * @returns The newly interface id.\n   */\n  async createInterface(snapId: SnapId, content: Component) {\n    await this.#validateContent(content);\n\n    const id = nanoid();\n\n    const componentState = constructState({}, content);\n\n    this.update((draftState) => {\n      draftState.interfaces[id] = {\n        snapId,\n        content,\n        state: componentState,\n      };\n    });\n\n    return id;\n  }\n\n  /**\n   * Get the data of a given interface id.\n   *\n   * @param snapId - The snap id requesting the interface data.\n   * @param id - The interface id.\n   * @returns The interface state.\n   */\n  getInterface(snapId: SnapId, id: string) {\n    this.#validateArgs(snapId, id);\n\n    return this.state.interfaces[id];\n  }\n\n  /**\n   * Update the interface with the given content.\n   *\n   * @param snapId - The snap id requesting the update.\n   * @param id - The interface id.\n   * @param content - The new content.\n   */\n  async updateInterface(snapId: SnapId, id: string, content: Component) {\n    this.#validateArgs(snapId, id);\n    await this.#validateContent(content);\n\n    const oldState = this.state.interfaces[id].state;\n\n    const newState = constructState(oldState, content);\n\n    this.update((draftState) => {\n      draftState.interfaces[id].state = newState;\n      draftState.interfaces[id].content = content;\n    });\n  }\n\n  /**\n   * Delete an interface from state.\n   *\n   * @param id - The interface id.\n   */\n  deleteInterface(id: string) {\n    this.update((draftState) => {\n      delete draftState.interfaces[id];\n    });\n  }\n\n  /**\n   * Update the interface state.\n   *\n   * @param id - The interface id.\n   * @param state - The new state.\n   */\n  updateInterfaceState(id: string, state: InterfaceState) {\n    this.update((draftState) => {\n      draftState.interfaces[id].state = state;\n    });\n  }\n\n  /**\n   * Utility function to validate the args passed to the other methods.\n   *\n   * @param snapId - The snap id.\n   * @param id - The interface id.\n   */\n  #validateArgs(snapId: SnapId, id: string) {\n    const existingInterface = this.state.interfaces[id];\n\n    assert(\n      existingInterface !== undefined,\n      `Interface with id '${id}' not found.`,\n    );\n    assert(\n      existingInterface.snapId === snapId,\n      `Interface not created by ${snapId}.`,\n    );\n  }\n\n  /**\n   * Trigger a Phishing list update if needed.\n   */\n  async #triggerPhishingListUpdate() {\n    await this.messagingSystem.call('PhishingController:maybeUpdateState');\n  }\n\n  /**\n   * Check an origin against the phishing list.\n   *\n   * @param origin - The origin to check.\n   * @returns True if the origin is on the phishing list, otherwise false.\n   */\n  #checkPhishingList(origin: string) {\n    return this.messagingSystem.call('PhishingController:testOrigin', origin)\n      .result;\n  }\n\n  /**\n   * Utility function to validate the components of an interface.\n   * Throws if something is invalid.\n   *\n   * Right now this only checks links against the phighing list.\n   *\n   * @param content - The components to verify.\n   */\n  async #validateContent(content: Component) {\n    const size = getJsonSize(content);\n\n    assert(\n      size <= MAX_UI_CONTENT_SIZE,\n      `A Snap UI may not be larger than ${MAX_UI_CONTENT_SIZE / 1000} kB.`,\n    );\n\n    const textSize = getTotalTextLength(content);\n\n    assert(\n      textSize <= MAX_TEXT_LENGTH,\n      `The text in a Snap UI may not be larger than ${\n        MAX_TEXT_LENGTH / 1000\n      } kB.`,\n    );\n\n    await this.#triggerPhishingListUpdate();\n\n    validateComponentLinks(content, this.#checkPhishingList.bind(this));\n  }\n}\n"]}