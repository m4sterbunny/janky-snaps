{"version":3,"sources":["../src/services/webview/WebViewExecutionService.ts"],"sourcesContent":["import type { ExecutionServiceArgs } from '../AbstractExecutionService';\nimport { ProxyExecutionService } from '../proxy/ProxyExecutionService';\nimport type { WebViewInterface } from './WebViewMessageStream';\nimport { WebViewMessageStream } from './WebViewMessageStream';\n\nexport type WebViewExecutionServiceArgs = ExecutionServiceArgs & {\n  getWebView: () => Promise<WebViewInterface>;\n};\n\nexport class WebViewExecutionService extends ProxyExecutionService {\n  #getWebView;\n\n  constructor({\n    messenger,\n    setupSnapProvider,\n    getWebView,\n  }: WebViewExecutionServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n      stream: new WebViewMessageStream({\n        name: 'parent',\n        target: 'child',\n        getWebView,\n      }),\n    });\n    this.#getWebView = getWebView;\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   */\n  protected async initEnvStream(jobId: string) {\n    // Ensure that the WebView has been loaded before we proceed.\n    await this.#ensureWebViewLoaded();\n\n    return super.initEnvStream(jobId);\n  }\n\n  /**\n   * Ensure that the WebView has been loaded by awaiting the getWebView promise.\n   */\n  async #ensureWebViewLoaded() {\n    await this.#getWebView();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;AASO,IAAM,0BAAN,cAAsC,sBAAsB;AAAA,EAGjE,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAgC;AAC9B,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA,QAAQ,IAAI,qBAAqB;AAAA,QAC/B,MAAM;AAAA,QACN,QAAQ;AAAA,QACR;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAoBH;AAAA;AAAA;AAAA,uBAAM;AAnCN;AAgBE,uBAAK,aAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAgB,cAAc,OAAe;AAE3C,UAAM,sBAAK,8CAAL;AAEN,WAAO,MAAM,cAAc,KAAK;AAAA,EAClC;AAQF;AAtCE;AAmCM;AAAA,yBAAoB,iBAAG;AAC3B,QAAM,mBAAK,aAAL;AACR;","names":[]}