{"version":3,"sources":["../src/services/webview/WebViewMessageStream.ts"],"names":[],"mappings":";;;;;;;AACA,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,gBAAgB;AACzB,SAAS,QAAQ,eAAe,qBAAqB;AAJrD;AAsBO,IAAM,uBAAN,cAAmC,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgB9D,YAAY,EAAE,MAAM,QAAQ,WAAW,GAAsB;AAC3D,UAAM;AAhBR;AAEA;AAEA;AAcE,uBAAK,OAAQ;AACb,uBAAK,SAAU;AAEf,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAI3C,eAAW,EACR,KAAK,CAAC,YAAY;AACjB,yBAAK,UAAW;AAGhB,cAAQ,wBAAwB,KAAK,UAAU;AAC/C,WAAK,WAAW;AAAA,IAClB,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,eAAS,KAAK;AAAA,IAChB,CAAC;AAAA,EACL;AAAA,EAEU,aAAa,MAAqB;AAC1C,WAAO,mBAAK,SAAQ;AACpB,UAAM,OAAO,KAAK,UAAU;AAAA,MAC1B,QAAQ,mBAAK;AAAA,MACb;AAAA,IACF,CAAC;AAKD,UAAM,QAAQ,cAAc,IAAI;AAChC,UAAM,SAAS,cAAc,KAAK;AAClC,uBAAK,UAAS,iBAAiB,uBAAuB,MAAM,IAAI;AAAA,EAClE;AAAA,EAEQ,WAAW,OAA+B;AAChD,QAAI,OAAO,MAAM,SAAS,UAAU;AAClC;AAAA,IACF;AAEA,UAAM,UAAU,KAAK,MAAM,MAAM,IAAI;AAIrC,QAAI,CAAC,qBAAqB,OAAO,KAAK,QAAQ,WAAW,mBAAK,QAAO;AACnE;AAAA,IACF;AAEA,SAAK,QAAQ,QAAQ,IAAI;AAAA,EAC3B;AAAA,EAEA,WAAW;AACT,WAAO,mBAAK,SAAQ;AAGpB,uBAAK,UAAS,0BAA0B,KAAK,UAAU;AAAA,EACzD;AACF;AA3EE;AAEA;AAEA","sourcesContent":["import type { PostMessageEvent } from '@metamask/post-message-stream';\nimport { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { isValidStreamMessage } from '@metamask/post-message-stream/dist/utils';\nimport { logError } from '@metamask/snaps-utils';\nimport { assert, bytesToBase64, stringToBytes } from '@metamask/utils';\n\nexport type WebViewInterface = {\n  injectJavaScript(js: string): void;\n  registerMessageListener(listener: (event: PostMessageEvent) => void): void;\n  unregisterMessageListener(listener: (event: PostMessageEvent) => void): void;\n};\n\ntype WebViewStreamArgs = {\n  name: string;\n  target: string;\n  getWebView: () => Promise<WebViewInterface>;\n};\n\n/**\n * A special postMessage stream used to interface with a WebView.\n */\n\nexport class WebViewMessageStream extends BasePostMessageStream {\n  #name;\n\n  #target;\n\n  #webView: WebViewInterface | undefined;\n\n  /**\n   * Creates a stream for communicating with other streams inside a WebView.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.getWebView - A asynchronous getter for the webview.\n   */\n  constructor({ name, target, getWebView }: WebViewStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n\n    this._onMessage = this._onMessage.bind(this);\n\n    // This is a bit atypical from other post-message streams.\n    // We have to wait for the WebView to fully load before we can continue using the stream.\n    getWebView()\n      .then((webView) => {\n        this.#webView = webView;\n        // This method is already bound.\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        webView.registerMessageListener(this._onMessage);\n        this._handshake();\n      })\n      .catch((error) => {\n        logError(error);\n      });\n  }\n\n  protected _postMessage(data: unknown): void {\n    assert(this.#webView);\n    const json = JSON.stringify({\n      target: this.#target,\n      data,\n    });\n\n    // To prevent XSS, we base64 encode the message before injecting it.\n    // This adds significant performance overhead.\n    // TODO: Should we use mobile native base64 here?\n    const bytes = stringToBytes(json);\n    const base64 = bytesToBase64(bytes);\n    this.#webView.injectJavaScript(`window.postMessage('${base64}')`);\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    if (typeof event.data !== 'string') {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n\n    // Notice that we don't check targetWindow or targetOrigin here.\n    // This doesn't seem possible to do in RN.\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    assert(this.#webView);\n    // This method is already bound.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.#webView.unregisterMessageListener(this._onMessage);\n  }\n}\n"]}