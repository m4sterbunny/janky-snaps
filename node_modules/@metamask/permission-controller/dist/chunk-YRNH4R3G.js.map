{"version":3,"sources":["../src/rpc-methods/requestPermissions.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,qBAAqB;AASvB,IAAM,4BAIT;AAAA,EACF,aAAa,qDAA+B;AAAA,EAC5C,gBAAgB;AAAA,EAChB,WAAW;AAAA,IACT,6BAA6B;AAAA,EAC/B;AACF;AAuBA,eAAe,iCACb,KACA,KACA,OACA,KACA,EAAE,4BAA4B,GACf;AACf,QAAM,EAAE,OAAO,IAAI;AAEnB,MAAI,CAAC,MAAM,QAAQ,MAAM,KAAK,CAAC,cAAc,OAAO,CAAC,CAAC,GAAG;AACvD,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAEA,QAAM,CAAC,oBAAoB,IAAI;AAC/B,QAAM,CAAC,kBAAkB,IAAI,MAAM;AAAA,IACjC;AAAA,EACF;AAGA,MAAI,SAAS,OAAO,OAAO,kBAAkB;AAC7C,SAAO,IAAI;AACb","sourcesContent":["import { isPlainObject } from '@metamask/controller-utils';\nimport type { JsonRpcEngineEndCallback } from '@metamask/json-rpc-engine';\nimport type { JsonRpcRequest, PendingJsonRpcResponse } from '@metamask/utils';\n\nimport { invalidParams } from '../errors';\nimport type { PermissionConstraint, RequestedPermissions } from '../Permission';\nimport type { PermittedHandlerExport } from '../utils';\nimport { MethodNames } from '../utils';\n\nexport const requestPermissionsHandler: PermittedHandlerExport<\n  RequestPermissionsHooks,\n  [RequestedPermissions],\n  PermissionConstraint[]\n> = {\n  methodNames: [MethodNames.requestPermissions],\n  implementation: requestPermissionsImplementation,\n  hookNames: {\n    requestPermissionsForOrigin: true,\n  },\n};\n\ntype RequestPermissions = (\n  requestedPermissions: RequestedPermissions,\n) => Promise<\n  [Record<string, PermissionConstraint>, { id: string; origin: string }]\n>;\n\nexport type RequestPermissionsHooks = {\n  requestPermissionsForOrigin: RequestPermissions;\n};\n\n/**\n * Request Permissions implementation to be used in JsonRpcEngine middleware.\n *\n * @param req - The JsonRpcEngine request\n * @param res - The JsonRpcEngine result object\n * @param _next - JsonRpcEngine next() callback - unused\n * @param end - JsonRpcEngine end() callback\n * @param options - Method hooks passed to the method implementation\n * @param options.requestPermissionsForOrigin - The specific method hook needed for this method implementation\n * @returns A promise that resolves to nothing\n */\nasync function requestPermissionsImplementation(\n  req: JsonRpcRequest<[RequestedPermissions]>,\n  res: PendingJsonRpcResponse<PermissionConstraint[]>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  { requestPermissionsForOrigin }: RequestPermissionsHooks,\n): Promise<void> {\n  const { params } = req;\n\n  if (!Array.isArray(params) || !isPlainObject(params[0])) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  const [requestedPermissions] = params;\n  const [grantedPermissions] = await requestPermissionsForOrigin(\n    requestedPermissions,\n  );\n\n  // `wallet_requestPermission` is specified to return an array.\n  res.result = Object.values(grantedPermissions);\n  return end();\n}\n"]}