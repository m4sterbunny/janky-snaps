{"version":3,"sources":["../src/rpc-methods/revokePermissions.ts"],"sourcesContent":["import type { JsonRpcEngineEndCallback } from '@metamask/json-rpc-engine';\nimport {\n  isNonEmptyArray,\n  type Json,\n  type JsonRpcRequest,\n  type NonEmptyArray,\n  type PendingJsonRpcResponse,\n} from '@metamask/utils';\n\nimport { invalidParams } from '../errors';\nimport type { PermissionConstraint } from '../Permission';\nimport type { PermittedHandlerExport } from '../utils';\nimport { MethodNames } from '../utils';\n\nexport const revokePermissionsHandler: PermittedHandlerExport<\n  RevokePermissionsHooks,\n  RevokePermissionArgs,\n  null\n> = {\n  methodNames: [MethodNames.revokePermissions],\n  implementation: revokePermissionsImplementation,\n  hookNames: {\n    revokePermissionsForOrigin: true,\n  },\n};\n\ntype RevokePermissionArgs = Record<\n  PermissionConstraint['parentCapability'],\n  Json\n>;\n\ntype RevokePermissions = (\n  permissions: NonEmptyArray<PermissionConstraint['parentCapability']>,\n) => void;\n\nexport type RevokePermissionsHooks = {\n  revokePermissionsForOrigin: RevokePermissions;\n};\n\n/**\n * Revoke Permissions implementation to be used in JsonRpcEngine middleware.\n *\n * @param req - The JsonRpcEngine request\n * @param res - The JsonRpcEngine result object\n * @param _next - JsonRpcEngine next() callback - unused\n * @param end - JsonRpcEngine end() callback\n * @param options - Method hooks passed to the method implementation\n * @param options.revokePermissionsForOrigin - A hook that revokes given permission keys for an origin\n * @returns A promise that resolves to nothing\n */\nasync function revokePermissionsImplementation(\n  req: JsonRpcRequest<RevokePermissionArgs>,\n  res: PendingJsonRpcResponse<null>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  { revokePermissionsForOrigin }: RevokePermissionsHooks,\n): Promise<void> {\n  const { params } = req;\n\n  const param = params?.[0];\n\n  if (!param) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  // For now, this API revokes the entire permission key\n  // even if caveats are specified.\n  const permissionKeys = Object.keys(param);\n\n  if (!isNonEmptyArray(permissionKeys)) {\n    return end(invalidParams({ data: { request: req } }));\n  }\n\n  revokePermissionsForOrigin(permissionKeys);\n\n  res.result = null;\n\n  return end();\n}\n"],"mappings":";;;;;AACA;AAAA,EACE;AAAA,OAKK;AAOA,IAAM,2BAIT;AAAA,EACF,aAAa,mDAA8B;AAAA,EAC3C,gBAAgB;AAAA,EAChB,WAAW;AAAA,IACT,4BAA4B;AAAA,EAC9B;AACF;AA0BA,eAAe,gCACb,KACA,KACA,OACA,KACA,EAAE,2BAA2B,GACd;AACf,QAAM,EAAE,OAAO,IAAI;AAEnB,QAAM,QAAQ,SAAS,CAAC;AAExB,MAAI,CAAC,OAAO;AACV,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAIA,QAAM,iBAAiB,OAAO,KAAK,KAAK;AAExC,MAAI,CAAC,gBAAgB,cAAc,GAAG;AACpC,WAAO,IAAI,cAAc,EAAE,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC;AAAA,EACtD;AAEA,6BAA2B,cAAc;AAEzC,MAAI,SAAS;AAEb,SAAO,IAAI;AACb;","names":[]}