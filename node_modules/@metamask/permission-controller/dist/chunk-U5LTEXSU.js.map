{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DataWithOptionalCause } from '@metamask/rpc-errors';\nimport {\n  errorCodes,\n  providerErrors,\n  rpcErrors,\n  JsonRpcError,\n} from '@metamask/rpc-errors';\n\nimport type { PermissionType } from './Permission';\n\ntype UnauthorizedArg = {\n  data?: Record<string, unknown>;\n  message?: string;\n};\n\n/**\n * Utility function for building an \"unauthorized\" error.\n *\n * @param opts - Optional arguments that add extra context\n * @returns The built error\n */\nexport function unauthorized(opts: UnauthorizedArg) {\n  return providerErrors.unauthorized({\n    message:\n      'Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions',\n    data: opts.data,\n  });\n}\n\n/**\n * Utility function for building a \"method not found\" error.\n *\n * @param method - The method in question.\n * @param data - Optional data for context.\n * @returns The built error\n */\nexport function methodNotFound(method: string, data?: DataWithOptionalCause) {\n  const message = `The method \"${method}\" does not exist / is not available.`;\n\n  const opts: Parameters<typeof rpcErrors.methodNotFound>[0] = { message };\n  if (data !== undefined) {\n    opts.data = data;\n  }\n  return rpcErrors.methodNotFound(opts);\n}\n\ntype InvalidParamsArg = {\n  message?: string;\n  data?: DataWithOptionalCause;\n};\n\n/**\n * Utility function for building an \"invalid params\" error.\n *\n * @param opts - Optional arguments that add extra context\n * @returns The built error\n */\nexport function invalidParams(opts: InvalidParamsArg) {\n  return rpcErrors.invalidParams({\n    data: opts.data,\n    message: opts.message,\n  });\n}\n\n/**\n * Utility function for building an \"user rejected request\" error.\n *\n * @param data - Optional data to add extra context\n * @returns The built error\n */\nexport function userRejectedRequest<Data extends Record<string, unknown>>(\n  data?: Data,\n): JsonRpcError<Data> {\n  return providerErrors.userRejectedRequest({ data });\n}\n\n/**\n * Utility function for building an internal error.\n *\n * @param message - The error message\n * @param data - Optional data to add extra context\n * @returns The built error\n */\nexport function internalError<Data extends Record<string, unknown>>(\n  message: string,\n  data?: Data,\n): JsonRpcError<Data> {\n  return rpcErrors.internal({ message, data });\n}\n\nexport class InvalidSubjectIdentifierError extends Error {\n  constructor(origin: unknown) {\n    super(\n      `Invalid subject identifier: \"${\n        typeof origin === 'string' ? origin : typeof origin\n      }\"`,\n    );\n  }\n}\n\nexport class UnrecognizedSubjectError extends Error {\n  constructor(origin: string) {\n    super(`Unrecognized subject: \"${origin}\" has no permissions.`);\n  }\n}\n\nexport class InvalidApprovedPermissionError extends Error {\n  public data: {\n    origin: string;\n    target: string;\n    approvedPermission: Record<string, unknown>;\n  };\n\n  constructor(\n    origin: string,\n    target: string,\n    approvedPermission: Record<string, unknown>,\n  ) {\n    super(\n      `Invalid approved permission for origin \"${origin}\" and target \"${target}\".`,\n    );\n    this.data = { origin, target, approvedPermission };\n  }\n}\nexport class PermissionDoesNotExistError extends Error {\n  constructor(origin: string, target: string) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n  }\n}\n\nexport class EndowmentPermissionDoesNotExistError extends Error {\n  public data?: { origin: string };\n\n  constructor(target: string, origin?: string) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n    if (origin) {\n      this.data = { origin };\n    }\n  }\n}\n\nexport class UnrecognizedCaveatTypeError extends Error {\n  public data: {\n    caveatType: string;\n    origin?: string;\n    target?: string;\n  };\n\n  constructor(caveatType: string);\n\n  constructor(caveatType: string, origin: string, target: string);\n\n  constructor(caveatType: string, origin?: string, target?: string) {\n    super(`Unrecognized caveat type: \"${caveatType}\"`);\n    this.data = { caveatType };\n    if (origin !== undefined) {\n      this.data.origin = origin;\n    }\n\n    if (target !== undefined) {\n      this.data.target = target;\n    }\n  }\n}\n\nexport class InvalidCaveatsPropertyError extends Error {\n  public data: { origin: string; target: string; caveatsProperty: unknown };\n\n  constructor(origin: string, target: string, caveatsProperty: unknown) {\n    super(\n      `The \"caveats\" property of permission for \"${target}\" of subject \"${origin}\" is invalid. It must be a non-empty array if specified.`,\n    );\n    this.data = { origin, target, caveatsProperty };\n  }\n}\n\nexport class CaveatDoesNotExistError extends Error {\n  constructor(origin: string, target: string, caveatType: string) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" has no caveat of type \"${caveatType}\".`,\n    );\n  }\n}\n\nexport class CaveatAlreadyExistsError extends Error {\n  constructor(origin: string, target: string, caveatType: string) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" already has a caveat of type \"${caveatType}\".`,\n    );\n  }\n}\n\nexport class InvalidCaveatError extends JsonRpcError<\n  DataWithOptionalCause | undefined\n> {\n  public override data: { origin: string; target: string };\n\n  constructor(receivedCaveat: unknown, origin: string, target: string) {\n    super(\n      errorCodes.rpc.invalidParams,\n      `Invalid caveat. Caveats must be plain objects.`,\n      { receivedCaveat },\n    );\n    this.data = { origin, target };\n  }\n}\n\nexport class InvalidCaveatTypeError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat types must be strings. Received: \"${typeof caveat.type}\"`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class CaveatMissingValueError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat is missing \"value\" field.`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class CaveatInvalidJsonError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(`Caveat \"value\" is invalid JSON.`);\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class InvalidCaveatFieldsError extends Error {\n  public data: {\n    caveat: Record<string, unknown>;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveat: Record<string, unknown>, origin: string, target: string) {\n    super(\n      `Caveat has unexpected number of fields: \"${Object.keys(caveat).length}\"`,\n    );\n    this.data = { caveat, origin, target };\n  }\n}\n\nexport class ForbiddenCaveatError extends Error {\n  public data: {\n    caveatType: string;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveatType: string, origin: string, targetName: string) {\n    super(\n      `Permissions for target \"${targetName}\" may not have caveats of type \"${caveatType}\".`,\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n}\n\nexport class DuplicateCaveatError extends Error {\n  public data: {\n    caveatType: string;\n    origin: string;\n    target: string;\n  };\n\n  constructor(caveatType: string, origin: string, targetName: string) {\n    super(\n      `Permissions for target \"${targetName}\" contains multiple caveats of type \"${caveatType}\".`,\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n}\n\nexport class CaveatSpecificationMismatchError extends Error {\n  public data: {\n    caveatSpec: Record<string, unknown>;\n    permissionType: PermissionType;\n  };\n\n  constructor(\n    caveatSpec: Record<string, unknown>,\n    permissionType: PermissionType,\n  ) {\n    super(\n      `Caveat specification uses a mismatched type. Expected caveats for ${permissionType}`,\n    );\n    this.data = { caveatSpec, permissionType };\n  }\n}\n\nexport class PermissionsRequestNotFoundError extends Error {\n  constructor(id: string) {\n    super(`Permissions request with id \"${id}\" not found.`);\n  }\n}\n"]}