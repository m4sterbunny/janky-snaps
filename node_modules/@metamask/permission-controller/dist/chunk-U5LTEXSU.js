"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/errors.ts





var _rpcerrors = require('@metamask/rpc-errors');
function unauthorized(opts) {
  return _rpcerrors.providerErrors.unauthorized({
    message: "Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions",
    data: opts.data
  });
}
function methodNotFound(method, data) {
  const message = `The method "${method}" does not exist / is not available.`;
  const opts = { message };
  if (data !== void 0) {
    opts.data = data;
  }
  return _rpcerrors.rpcErrors.methodNotFound(opts);
}
function invalidParams(opts) {
  return _rpcerrors.rpcErrors.invalidParams({
    data: opts.data,
    message: opts.message
  });
}
function userRejectedRequest(data) {
  return _rpcerrors.providerErrors.userRejectedRequest({ data });
}
function internalError(message, data) {
  return _rpcerrors.rpcErrors.internal({ message, data });
}
var InvalidSubjectIdentifierError = class extends Error {
  constructor(origin) {
    super(
      `Invalid subject identifier: "${typeof origin === "string" ? origin : typeof origin}"`
    );
  }
};
var UnrecognizedSubjectError = class extends Error {
  constructor(origin) {
    super(`Unrecognized subject: "${origin}" has no permissions.`);
  }
};
var InvalidApprovedPermissionError = class extends Error {
  constructor(origin, target, approvedPermission) {
    super(
      `Invalid approved permission for origin "${origin}" and target "${target}".`
    );
    this.data = { origin, target, approvedPermission };
  }
};
var PermissionDoesNotExistError = class extends Error {
  constructor(origin, target) {
    super(`Subject "${origin}" has no permission for "${target}".`);
  }
};
var EndowmentPermissionDoesNotExistError = class extends Error {
  constructor(target, origin) {
    super(`Subject "${origin}" has no permission for "${target}".`);
    if (origin) {
      this.data = { origin };
    }
  }
};
var UnrecognizedCaveatTypeError = class extends Error {
  constructor(caveatType, origin, target) {
    super(`Unrecognized caveat type: "${caveatType}"`);
    this.data = { caveatType };
    if (origin !== void 0) {
      this.data.origin = origin;
    }
    if (target !== void 0) {
      this.data.target = target;
    }
  }
};
var InvalidCaveatsPropertyError = class extends Error {
  constructor(origin, target, caveatsProperty) {
    super(
      `The "caveats" property of permission for "${target}" of subject "${origin}" is invalid. It must be a non-empty array if specified.`
    );
    this.data = { origin, target, caveatsProperty };
  }
};
var CaveatDoesNotExistError = class extends Error {
  constructor(origin, target, caveatType) {
    super(
      `Permission for "${target}" of subject "${origin}" has no caveat of type "${caveatType}".`
    );
  }
};
var CaveatAlreadyExistsError = class extends Error {
  constructor(origin, target, caveatType) {
    super(
      `Permission for "${target}" of subject "${origin}" already has a caveat of type "${caveatType}".`
    );
  }
};
var InvalidCaveatError = class extends _rpcerrors.JsonRpcError {
  constructor(receivedCaveat, origin, target) {
    super(
      _rpcerrors.errorCodes.rpc.invalidParams,
      `Invalid caveat. Caveats must be plain objects.`,
      { receivedCaveat }
    );
    this.data = { origin, target };
  }
};
var InvalidCaveatTypeError = class extends Error {
  constructor(caveat, origin, target) {
    super(`Caveat types must be strings. Received: "${typeof caveat.type}"`);
    this.data = { caveat, origin, target };
  }
};
var CaveatMissingValueError = class extends Error {
  constructor(caveat, origin, target) {
    super(`Caveat is missing "value" field.`);
    this.data = { caveat, origin, target };
  }
};
var CaveatInvalidJsonError = class extends Error {
  constructor(caveat, origin, target) {
    super(`Caveat "value" is invalid JSON.`);
    this.data = { caveat, origin, target };
  }
};
var InvalidCaveatFieldsError = class extends Error {
  constructor(caveat, origin, target) {
    super(
      `Caveat has unexpected number of fields: "${Object.keys(caveat).length}"`
    );
    this.data = { caveat, origin, target };
  }
};
var ForbiddenCaveatError = class extends Error {
  constructor(caveatType, origin, targetName) {
    super(
      `Permissions for target "${targetName}" may not have caveats of type "${caveatType}".`
    );
    this.data = { caveatType, origin, target: targetName };
  }
};
var DuplicateCaveatError = class extends Error {
  constructor(caveatType, origin, targetName) {
    super(
      `Permissions for target "${targetName}" contains multiple caveats of type "${caveatType}".`
    );
    this.data = { caveatType, origin, target: targetName };
  }
};
var CaveatSpecificationMismatchError = class extends Error {
  constructor(caveatSpec, permissionType) {
    super(
      `Caveat specification uses a mismatched type. Expected caveats for ${permissionType}`
    );
    this.data = { caveatSpec, permissionType };
  }
};
var PermissionsRequestNotFoundError = class extends Error {
  constructor(id) {
    super(`Permissions request with id "${id}" not found.`);
  }
};

























exports.unauthorized = unauthorized; exports.methodNotFound = methodNotFound; exports.invalidParams = invalidParams; exports.userRejectedRequest = userRejectedRequest; exports.internalError = internalError; exports.InvalidSubjectIdentifierError = InvalidSubjectIdentifierError; exports.UnrecognizedSubjectError = UnrecognizedSubjectError; exports.InvalidApprovedPermissionError = InvalidApprovedPermissionError; exports.PermissionDoesNotExistError = PermissionDoesNotExistError; exports.EndowmentPermissionDoesNotExistError = EndowmentPermissionDoesNotExistError; exports.UnrecognizedCaveatTypeError = UnrecognizedCaveatTypeError; exports.InvalidCaveatsPropertyError = InvalidCaveatsPropertyError; exports.CaveatDoesNotExistError = CaveatDoesNotExistError; exports.CaveatAlreadyExistsError = CaveatAlreadyExistsError; exports.InvalidCaveatError = InvalidCaveatError; exports.InvalidCaveatTypeError = InvalidCaveatTypeError; exports.CaveatMissingValueError = CaveatMissingValueError; exports.CaveatInvalidJsonError = CaveatInvalidJsonError; exports.InvalidCaveatFieldsError = InvalidCaveatFieldsError; exports.ForbiddenCaveatError = ForbiddenCaveatError; exports.DuplicateCaveatError = DuplicateCaveatError; exports.CaveatSpecificationMismatchError = CaveatSpecificationMismatchError; exports.PermissionsRequestNotFoundError = PermissionsRequestNotFoundError;
//# sourceMappingURL=chunk-U5LTEXSU.js.map