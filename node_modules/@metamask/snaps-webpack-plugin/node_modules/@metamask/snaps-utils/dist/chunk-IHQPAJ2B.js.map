{"version":3,"sources":["../src/base64.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,qBAAqB;AAW9B,eAAsB,aAAa,OAA0C;AAC3E,QAAM,QAAQ,SAAS,KAAK;AAE5B,MAAI,gBAAgB,YAAY;AAC9B,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,YAAM,SAAS,OAAO,OAAO,IAAI,WAAW,GAAG;AAAA,QAC7C,QAAQ,MACN;AAAA,UACG,OAAO,OAAkB;AAAA,YACxB;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,QACF,SAAS,MAAM,OAAO,OAAO,KAAK;AAAA,MACpC,CAAC;AACD,aAAO;AAAA,QACL,IAAI,KAAK,CAAC,KAAK,GAAG,IAAI,EAAE,MAAM,2BAA2B,CAAC;AAAA,MAC5D;AAAA,IACF,CAAC;AAAA,EACH;AACA,SAAO,cAAc,KAAK;AAC5B;AAQA,eAAsB,aAAa,QAAgB;AACjD,QAAM,WAAW,MAAM;AAAA,IACrB,wCAAwC,MAAM;AAAA,EAChD;AACA,SAAO,IAAI,WAAW,MAAM,SAAS,YAAY,CAAC;AACpD","sourcesContent":["import { bytesToBase64 } from '@metamask/utils';\n\nimport { getBytes } from './bytes';\nimport type { VirtualFile } from './virtual-file';\n\n/**\n * Provides fast, asynchronous base64 encoding.\n *\n * @param input - The input value, assumed to be coercable to bytes.\n * @returns A base64 string.\n */\nexport async function encodeBase64(input: Uint8Array | VirtualFile | string) {\n  const bytes = getBytes(input);\n  // In the browser, FileReader is much faster than bytesToBase64.\n  if ('FileReader' in globalThis) {\n    return await new Promise((resolve, reject) => {\n      const reader = Object.assign(new FileReader(), {\n        onload: () =>\n          resolve(\n            (reader.result as string).replace(\n              'data:application/octet-stream;base64,',\n              '',\n            ),\n          ),\n        onerror: () => reject(reader.error),\n      });\n      reader.readAsDataURL(\n        new File([bytes], '', { type: 'application/octet-stream' }),\n      );\n    });\n  }\n  return bytesToBase64(bytes);\n}\n\n/**\n * Provides fast, asynchronous base64 decoding.\n *\n * @param base64 - A base64 string.\n * @returns A Uint8Array of bytes.\n */\nexport async function decodeBase64(base64: string) {\n  const response = await fetch(\n    `data:application/octet-stream;base64,${base64}`,\n  );\n  return new Uint8Array(await response.arrayBuffer());\n}\n"]}