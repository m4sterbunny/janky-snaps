{"version":3,"sources":["../src/icon.ts"],"sourcesContent":["import { isSvg, parseSvg } from '@metamask/snaps-sdk';\nimport { assert, stringToBytes } from '@metamask/utils';\n\nimport type { VirtualFile } from './virtual-file';\n\nexport const SVG_MAX_BYTE_SIZE = 100_000;\nexport const SVG_MAX_BYTE_SIZE_TEXT = `${Math.floor(\n  SVG_MAX_BYTE_SIZE / 1000,\n)}kb`;\n\n/**\n * Assert that a virtual file containing a Snap icon is valid.\n *\n * @param icon - A virtual file containing a Snap icon.\n */\nexport function assertIsSnapIcon(icon: VirtualFile) {\n  assert(icon.path.endsWith('.svg'), 'Expected snap icon to end in \".svg\".');\n\n  const byteLength =\n    typeof icon.value === 'string'\n      ? stringToBytes(icon.value).byteLength\n      : icon.value.byteLength;\n\n  assert(\n    byteLength <= SVG_MAX_BYTE_SIZE,\n    `The specified SVG icon exceeds the maximum size of ${SVG_MAX_BYTE_SIZE_TEXT}.`,\n  );\n\n  assert(isSvg(icon.toString()), 'Snap icon must be a valid SVG.');\n}\n\n/**\n * Extract the dimensions of an image from an SVG string if possible.\n *\n * @param svg - An SVG string.\n * @returns The height and width of the SVG or null.\n */\nexport function getSvgDimensions(svg: string): {\n  height: number;\n  width: number;\n} | null {\n  try {\n    const parsed = parseSvg(svg);\n\n    const height = parsed['@_height'];\n    const width = parsed['@_width'];\n\n    if (height && width) {\n      return { height, width };\n    }\n\n    const viewBox = parsed['@_viewBox'];\n    if (viewBox) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const [_minX, _minY, viewBoxWidth, viewBoxHeight] = viewBox.split(' ');\n\n      if (viewBoxWidth && viewBoxHeight) {\n        const parsedWidth = parseInt(viewBoxWidth, 10);\n        const parsedHeight = parseInt(viewBoxHeight, 10);\n\n        assert(Number.isInteger(parsedWidth) && parsedWidth > 0);\n        assert(Number.isInteger(parsedHeight) && parsedHeight > 0);\n\n        return {\n          width: parsedWidth,\n          height: parsedHeight,\n        };\n      }\n    }\n  } catch {\n    throw new Error('Snap icon must be a valid SVG.');\n  }\n\n  return null;\n}\n"],"mappings":";AAAA,SAAS,OAAO,gBAAgB;AAChC,SAAS,QAAQ,qBAAqB;AAI/B,IAAM,oBAAoB;AAC1B,IAAM,yBAAyB,GAAG,KAAK;AAAA,EAC5C,oBAAoB;AACtB,CAAC;AAOM,SAAS,iBAAiB,MAAmB;AAClD,SAAO,KAAK,KAAK,SAAS,MAAM,GAAG,sCAAsC;AAEzE,QAAM,aACJ,OAAO,KAAK,UAAU,WAClB,cAAc,KAAK,KAAK,EAAE,aAC1B,KAAK,MAAM;AAEjB;AAAA,IACE,cAAc;AAAA,IACd,sDAAsD,sBAAsB;AAAA,EAC9E;AAEA,SAAO,MAAM,KAAK,SAAS,CAAC,GAAG,gCAAgC;AACjE;AAQO,SAAS,iBAAiB,KAGxB;AACP,MAAI;AACF,UAAM,SAAS,SAAS,GAAG;AAE3B,UAAM,SAAS,OAAO,UAAU;AAChC,UAAM,QAAQ,OAAO,SAAS;AAE9B,QAAI,UAAU,OAAO;AACnB,aAAO,EAAE,QAAQ,MAAM;AAAA,IACzB;AAEA,UAAM,UAAU,OAAO,WAAW;AAClC,QAAI,SAAS;AAEX,YAAM,CAAC,OAAO,OAAO,cAAc,aAAa,IAAI,QAAQ,MAAM,GAAG;AAErE,UAAI,gBAAgB,eAAe;AACjC,cAAM,cAAc,SAAS,cAAc,EAAE;AAC7C,cAAM,eAAe,SAAS,eAAe,EAAE;AAE/C,eAAO,OAAO,UAAU,WAAW,KAAK,cAAc,CAAC;AACvD,eAAO,OAAO,UAAU,YAAY,KAAK,eAAe,CAAC;AAEzD,eAAO;AAAA,UACL,OAAO;AAAA,UACP,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF,QAAQ;AACN,UAAM,IAAI,MAAM,gCAAgC;AAAA,EAClD;AAEA,SAAO;AACT;","names":[]}