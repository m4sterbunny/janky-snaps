{"version":3,"file":"verify.js","sourceRoot":"","sources":["../src/verify.ts"],"names":[],"mappings":";;;AACA,2CAMyB;AACzB,uDAAoD;AACpD,iDAA8C;AAE9C,6CAA8C;AAEjC,QAAA,eAAe,GAAG,IAAA,oBAAM,EAAC;IACpC,SAAS,EAAE,uBAAe;IAC1B,KAAK,EAAE,IAAA,qBAAO,EAAC,WAAW,CAAC;IAC3B,MAAM,EAAE,IAAA,qBAAO,EAAC,KAAK,CAAC;CACvB,CAAC,CAAC;AAUH;;;;;;;;;GASG;AACH,SAAgB,MAAM,CAAC,EACrB,QAAQ,EACR,SAAS,EACT,SAAS,GACE;IACX,IAAA,oBAAY,EAAC,SAAS,EAAE,uBAAe,EAAE,0BAA0B,CAAC,CAAC;IAErE,MAAM,cAAc,GAAG,IAAA,kBAAU,EAAC,SAAS,CAAC,CAAC;IAE7C,OAAO,qBAAS,CAAC,MAAM,CACrB,IAAA,gBAAQ,EAAC,SAAS,CAAC,SAAS,CAAC,EAC7B,IAAA,eAAM,EAAC,IAAA,qBAAa,EAAC,QAAQ,CAAC,CAAC,EAC/B,cAAc,CACf,CAAC;AACJ,CAAC;AAdD,wBAcC","sourcesContent":["import type { Hex } from '@metamask/utils';\nimport {\n  StrictHexStruct,\n  remove0x,\n  stringToBytes,\n  assertStruct,\n  hexToBytes,\n} from '@metamask/utils';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport type { Infer } from 'superstruct';\nimport { literal, object } from 'superstruct';\n\nexport const SignatureStruct = object({\n  signature: StrictHexStruct,\n  curve: literal('secp256k1'),\n  format: literal('DER'),\n});\n\ntype Signature = Infer<typeof SignatureStruct>;\n\ntype VerifyArgs = {\n  registry: string;\n  signature: Signature;\n  publicKey: Hex;\n};\n\n/**\n * Verifies that the Snap Registry is properly signed using a cryptographic key.\n *\n * @param options - Parameters for signing.\n * @param options.registry - Raw text of the registry.json file.\n * @param options.signature - Hex-encoded encoded signature.\n * @param options.publicKey - Hex-encoded or Uint8Array public key to compare\n * the signature to.\n * @returns Whether the signature is valid.\n */\nexport function verify({\n  registry,\n  signature,\n  publicKey,\n}: VerifyArgs): boolean {\n  assertStruct(signature, SignatureStruct, 'Invalid signature object');\n\n  const publicKeyBytes = hexToBytes(publicKey);\n\n  return secp256k1.verify(\n    remove0x(signature.signature),\n    sha256(stringToBytes(registry)),\n    publicKeyBytes,\n  );\n}\n"]}