{"version":3,"sources":["../src/commands/eval/eval.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAAS,cAAc;AACvB,SAAS,eAAe;AAcxB,IAAM,QAA4B;AAAA,EAChC;AAAA,IACE,MAAM;AAAA,IACN,MAAM,OAAO,EAAE,MAAM,MAAM;AACzB,UAAI,CAAE,MAAM,OAAO,KAAK,GAAI;AAC1B,cAAM,eAAe,gBAAgB,KAAK;AAC1C,cAAM,IAAI;AAAA,UACR,0BAA0B,YAAY;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM,OAAO,EAAE,OAAO,QAAQ,MAAM;AAClC,YAAM,SAAS,KAAK;AACpB,cAAQ,QAAQ,qCAAqC;AAAA,IACvD;AAAA,EACF;AACF;AAaA,SAAS,cAAc,QAAyB,SAA8B;AAC5E,MAAI,QAAQ,OAAO;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,QAAQ,KAAK;AAAA,EAC7C;AAEA,SAAO,QAAQ,OAAO,OAAO,MAAM,OAAO,OAAO,QAAQ;AAC3D;AAUA,eAAsB,gBACpB,QACA,UAAuB,CAAC,GACT;AACf,QAAM,QAAQ,cAAc,QAAQ,OAAO;AAC3C,QAAM,aAAa,OAAO,EAAE,MAAM,CAAC;AACrC","sourcesContent":["import { isFile } from '@metamask/snaps-utils/node';\nimport { resolve } from 'path';\n\nimport type { ProcessedConfig } from '../../config';\nimport { CommandError } from '../../errors';\nimport type { Steps } from '../../utils';\nimport { executeSteps, getRelativePath } from '../../utils';\nimport { evaluate } from './implementation';\n\nexport type EvalOptions = {\n  input?: string;\n};\n\nexport type EvalContext = Required<EvalOptions>;\n\nconst steps: Steps<EvalContext> = [\n  {\n    name: 'Checking the input file.',\n    task: async ({ input }) => {\n      if (!(await isFile(input))) {\n        const relativePath = getRelativePath(input);\n        throw new CommandError(\n          `Input file not found: \"${relativePath}\". Make sure that the \"input\" field in your snap config or the specified input file is correct.`,\n        );\n      }\n    },\n  },\n  {\n    name: 'Evaluating the snap bundle.',\n    task: async ({ input, spinner }) => {\n      await evaluate(input);\n      spinner.succeed('Snap bundle evaluated successfully.');\n    },\n  },\n];\n\n/**\n * Returns the path to the bundle, based on the config and options.\n *\n * - If `options.input` is specified, it is used as the bundle path.\n * - Otherwise, the bundle path is resolved from the config's output path and\n * filename.\n *\n * @param config - The processed config object.\n * @param options - The eval options.\n * @returns The path to the bundle.\n */\nfunction getBundlePath(config: ProcessedConfig, options: EvalOptions): string {\n  if (options.input) {\n    return resolve(process.cwd(), options.input);\n  }\n\n  return resolve(config.output.path, config.output.filename);\n}\n\n/**\n * Runs the snap in a worker, to ensure SES compatibility.\n *\n * @param config - The processed config object.\n * @param options - The eval options.\n * @returns A promise that resolves once the eval has finished.\n * @throws If the eval failed.\n */\nexport async function evaluateHandler(\n  config: ProcessedConfig,\n  options: EvalOptions = {},\n): Promise<void> {\n  const input = getBundlePath(config, options);\n  await executeSteps(steps, { input });\n}\n"]}