{"version":3,"sources":["../src/builders.ts"],"names":["TranspilationModes"],"mappings":";AAEO,IAAK,qBAAL,kBAAKA,wBAAL;AACL,EAAAA,oBAAA,kBAAe;AACf,EAAAA,oBAAA,eAAY;AACZ,EAAAA,oBAAA,UAAO;AAHG,SAAAA;AAAA,GAAA;AAMZ,IAAM,WAA8C;AAAA;AAAA,EAElD,QAAQ;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,WAAW;AAAA,EACb;AAAA,EAEA,KAAK;AAAA,IACH,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EAEA,OAAO;AAAA,IACL,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,WAAW;AAAA,EACb;AAAA;AAAA,EAGA,QAAQ;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,WAAW;AAAA,IACX,YAAY;AAAA,EACd;AAAA,EAEA,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,WAAW;AAAA,IACX,YAAY;AAAA,EACd;AAAA,EAEA,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY;AAAA,EACd;AAAA,EAEA,UAAU;AAAA,IACR,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY;AAAA,EACd;AAAA,EAEA,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,QAAQ,CAAC,QAAiB;AACxB,YAAM,OAAO,OAAO,SAAS,OAAO,GAAG,GAAG,EAAE;AAC5C,UAAI,OAAO,MAAM,IAAI,GAAG;AACtB,cAAM,IAAI,MAAM,kBAAkB,OAAO,GAAG,CAAC,IAAI;AAAA,MACnD;AAEA,aAAO;AAAA,IACT;AAAA,IACA,YAAY;AAAA,EACd;AAAA,EAEA,aAAa;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY;AAAA,EACd;AAAA,EAEA,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,WAAW;AAAA,IACX,YAAY;AAAA,EACd;AAAA,EAEA,YAAY;AAAA,IACV,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY;AAAA,EACd;AAAA,EAEA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,WAAW;AAAA,IACX,YAAY;AAAA,EACd;AAAA,EAEA,eAAe;AAAA,IACb,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY;AAAA,EACd;AAAA,EAEA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,YAAY;AAAA,EACd;AAAA,EAEA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,UACE;AAAA,IACF,SAAS,OAAO,OAAO,kBAAkB;AAAA,IACzC,YAAY;AAAA,EACd;AAAA,EAEA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,UAAU;AAAA,IACV,YAAY;AAAA,EACd;AAAA,EAEA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,UAAU;AAAA,IACV,YAAY;AAAA,EACd;AAAA,EAEA,eAAe;AAAA,IACb,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY;AAAA,EACd;AAAA,EAEA,OAAO;AAAA,IACL,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY;AAAA,EACd;AACF;AAEA,IAAO,mBAAQ","sourcesContent":["import type { Options } from 'yargs';\n\nexport enum TranspilationModes {\n  LocalAndDeps = 'localAndDeps',\n  LocalOnly = 'localOnly',\n  None = 'none',\n}\n\nconst builders: Record<string, Readonly<Options>> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  config: {\n    alias: 'c',\n    describe: 'Path to config file',\n    type: 'string',\n    normalize: true,\n  },\n\n  fix: {\n    describe: 'Attempt to fix snap.manifest.json',\n    type: 'boolean',\n  },\n\n  input: {\n    alias: 'i',\n    describe: 'Snap bundle file to evaluate',\n    type: 'string',\n    normalize: true,\n  },\n\n  // Deprecated Browserify options.\n  bundle: {\n    alias: 'b',\n    describe: 'Snap bundle file',\n    type: 'string',\n    normalize: true,\n    deprecated: 'Use --input instead.',\n  },\n\n  dist: {\n    alias: 'd',\n    describe: 'Output directory',\n    type: 'string',\n    normalize: true,\n    deprecated: true,\n  },\n\n  eval: {\n    alias: 'e',\n    describe: 'Attempt to evaluate Snap bundle in SES',\n    type: 'boolean',\n    deprecated: true,\n  },\n\n  manifest: {\n    alias: 'm',\n    describe: 'Validate snap.manifest.json',\n    type: 'boolean',\n    deprecated: true,\n  },\n\n  port: {\n    alias: 'p',\n    describe: 'Local server port for testing',\n    type: 'number',\n    coerce: (arg: unknown) => {\n      const port = Number.parseInt(String(arg), 10);\n      if (Number.isNaN(port)) {\n        throw new Error(`Invalid port: \"${String(arg)}\".`);\n      }\n\n      return port;\n    },\n    deprecated: true,\n  },\n\n  outfileName: {\n    alias: 'n',\n    describe: 'Output file name',\n    type: 'string',\n    deprecated: true,\n  },\n\n  root: {\n    alias: 'r',\n    describe: 'Server root directory',\n    type: 'string',\n    normalize: true,\n    deprecated: true,\n  },\n\n  sourceMaps: {\n    describe: 'Whether builds include sourcemaps',\n    type: 'boolean',\n    deprecated: true,\n  },\n\n  src: {\n    alias: 's',\n    describe: 'Source file',\n    type: 'string',\n    normalize: true,\n    deprecated: true,\n  },\n\n  stripComments: {\n    alias: 'strip',\n    describe: 'Whether to remove code comments from the build output',\n    type: 'boolean',\n    deprecated: true,\n  },\n\n  suppressWarnings: {\n    type: 'boolean',\n    describe: 'Whether to suppress warnings',\n    deprecated: true,\n  },\n\n  transpilationMode: {\n    type: 'string',\n    describe:\n      'Whether to use Babel to transpile all source code (including dependencies), local source code only, or nothing',\n    choices: Object.values(TranspilationModes),\n    deprecated: true,\n  },\n\n  depsToTranspile: {\n    type: 'array',\n    describe: 'Transpile only the listed dependencies.',\n    deprecated: true,\n  },\n\n  verboseErrors: {\n    type: 'boolean',\n    describe: 'Display original errors',\n    deprecated: true,\n  },\n\n  writeManifest: {\n    describe: 'Make necessary changes to the snap manifest file',\n    type: 'boolean',\n    deprecated: true,\n  },\n\n  serve: {\n    describe: 'Serve snap file(s) locally for testing',\n    type: 'boolean',\n    deprecated: true,\n  },\n};\n\nexport default builders;\n"]}