{"version":3,"sources":["../src/webpack/config.ts"],"sourcesContent":["import SnapsWebpackPlugin from '@metamask/snaps-webpack-plugin';\nimport type { Ora } from 'ora';\nimport { resolve } from 'path';\nimport TerserPlugin from 'terser-webpack-plugin';\nimport type { Configuration } from 'webpack';\nimport { DefinePlugin, ProgressPlugin, ProvidePlugin } from 'webpack';\n\nimport type { ProcessedWebpackConfig } from '../config';\nimport { getFunctionLoader, wasm } from './loaders';\nimport {\n  SnapsBuiltInResolver,\n  SnapsBundleWarningsPlugin,\n  SnapsStatsPlugin,\n  SnapsWatchPlugin,\n} from './plugins';\nimport {\n  BROWSERSLIST_FILE,\n  getDefaultLoader,\n  getDevTool,\n  getEnvironmentVariables,\n  getFallbacks,\n  getImageSVG,\n  getProgressHandler,\n} from './utils';\n\nexport type WebpackOptions = {\n  /**\n   * Whether to watch for changes.\n   */\n  watch?: boolean;\n\n  /**\n   * Whether to evaluate the bundle. If this is set, it will override the\n   * `evaluate` option in the config object.\n   */\n  evaluate?: boolean;\n\n  /**\n   * The spinner to use for logging.\n   */\n  spinner?: Ora;\n};\n\n/**\n * Get the default Webpack configuration. This is the configuration that will\n * be used if the user doesn't provide a custom Webpack configuration. The\n * configuration is based on the snap config.\n *\n * The default configuration includes:\n *\n * - `SWC` to transpile TypeScript and JavaScript files.\n * - `TerserPlugin` to minify the bundle.\n * - `SnapsWebpackPlugin` to validate the bundle and update the manifest.\n *\n * It can be customized through the `customizeWebpackConfig` function in the\n * snap config, but in most cases, you shouldn't need to do that.\n *\n * @param config - The processed snap Webpack config.\n * @param options - The Webpack options.\n * @returns The default Webpack configuration.\n */\nexport async function getDefaultConfiguration(\n  config: ProcessedWebpackConfig,\n  options: WebpackOptions = {\n    evaluate: config.evaluate,\n  },\n): Promise<Configuration> {\n  const spinnerText = options.spinner?.text;\n  const builtInResolver =\n    config.stats.builtIns &&\n    new SnapsBuiltInResolver(config.stats.builtIns, options.spinner);\n\n  return {\n    /**\n     * The target is set to `browserslist` so that Webpack will compile the\n     * bundle to support the browsers specified in the `.browserslistrc` file.\n     * This Browserslist file contains the browsers that are supported by\n     * MetaMask Snaps.\n     *\n     * @see https://webpack.js.org/configuration/target/\n     */\n    target: `browserslist:${BROWSERSLIST_FILE}`,\n\n    /**\n     * The mode is set to `production` by default, so that Webpack will minify\n     * and optimize the bundle.\n     *\n     * @see https://webpack.js.org/configuration/mode/\n     */\n    mode: 'production',\n\n    /**\n     * The entry point is set to the `input` value from the config object.\n     *\n     * @see https://webpack.js.org/configuration/entry-context/\n     */\n    entry: config.input,\n\n    /**\n     * The devtool option controls how source maps are generated. We set it to\n     * the `sourceMap` value from the config object.\n     *\n     * @see https://webpack.js.org/configuration/devtool/\n     */\n    devtool: getDevTool(config.sourceMap),\n\n    /**\n     * The stats option controls how much information is printed to the console\n     * when Webpack is running. We set it to `none` so that we can control the\n     * output ourselves.\n     *\n     * @see https://webpack.js.org/configuration/stats/\n     */\n    stats: 'none',\n\n    /**\n     * The output options.\n     *\n     * @see https://webpack.js.org/configuration/output/\n     */\n    output: {\n      /**\n       * This indicates whether Webpack should clear the output directory\n       * before building. We set it to the `clean` value from the config\n       * object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputclean\n       */\n      clean: config.output.clean,\n\n      /**\n       * The filename of the bundle. We set it to the `filename` value from\n       * the config object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputfilename\n       */\n      filename: config.output.filename,\n\n      /**\n       * The path to the output directory. We set it to the `path` value from\n       * the config object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputpath\n       */\n      path: config.output.path,\n\n      /**\n       * The public path of the bundle. We set it to `/` by default, so that\n       * the bundle can be loaded from the root of the server.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputpublicpath\n       */\n      publicPath: '/',\n\n      /**\n       * The library configuration. This tells Webpack how to export the\n       * bundle.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputlibrary\n       */\n      library: {\n        /**\n         * This tells Webpack to export the bundle as a CommonJS module. This\n         * is necessary for MetaMask Snaps.\n         *\n         * @see https://webpack.js.org/configuration/output/#outputlibrarytarget\n         */\n        type: 'commonjs',\n      },\n\n      /**\n       * The chunk format. This tells Webpack how to export chunks. This is\n       * required because we use browserslist to target browsers, but Snaps are\n       * not fully compatible with browser APIs (such as `window` and\n       * `document`).\n       *\n       * @see https://webpack.js.org/configuration/output/#outputchunkformat\n       */\n      chunkFormat: 'commonjs',\n    },\n\n    /**\n     * The module configuration. This is where we tell Webpack how to handle\n     * different types of files.\n     *\n     * @see https://webpack.js.org/configuration/module/\n     */\n    module: {\n      rules: [\n        {\n          test: /\\.(js|mjs|cjs|ts)$/u,\n          exclude: /node_modules/u,\n          use: await getDefaultLoader(config),\n        },\n\n        /**\n         * This allows importing modules that uses `.js` and not `.mjs` for the\n         * ES build.\n         *\n         * @see https://webpack.js.org/configuration/module/#resolvefullyspecified\n         */\n        {\n          test: /\\.m?js$/u,\n          resolve: {\n            fullySpecified: false,\n          },\n        },\n\n        /**\n         * This allows importing `.svg` files as a string.\n         */\n        config.features.images && {\n          test: /\\.svg$/u,\n          // `asset/source` returns the source as a UTF-8 string.\n          type: 'asset/source',\n        },\n\n        /**\n         * This allows importing `.png` files as a data URL.\n         */\n        config.features.images && {\n          test: /\\.png$/u,\n          type: 'asset/inline',\n          generator: {\n            dataUrl: getImageSVG.bind(null, 'image/png'),\n          },\n        },\n\n        /**\n         * This allows importing `.jpe?g` files as a data URL.\n         */\n        config.features.images && {\n          test: /\\.jpe?g$/u,\n          type: 'asset/inline',\n          generator: {\n            dataUrl: getImageSVG.bind(null, 'image/jpeg'),\n          },\n        },\n\n        config.experimental.wasm && {\n          test: /\\.wasm$/u,\n          use: getFunctionLoader(wasm, {}),\n        },\n      ],\n    },\n\n    /**\n     * The resolve configuration. This tells Webpack how to resolve imports.\n     * We set it to resolve `.js` and `.ts` files.\n     *\n     * @see https://webpack.js.org/configuration/resolve/\n     */\n    resolve: {\n      /**\n       * The extensions to resolve. We set it to resolve `.(c|m)?js` and `.ts`\n       * files.\n       */\n      extensions: ['.js', '.mjs', '.cjs', '.ts'],\n\n      /**\n       * The fallback options. This tells Webpack how to handle imports that\n       * aren't resolved. By default, we set Node.js built-ins to `false`, so\n       * that they are ignored.\n       */\n      fallback: getFallbacks(config.polyfills),\n\n      /**\n       * The plugins to use. We use the {@link SnapsBuiltInResolver} to show\n       * warnings about using Node.js built-ins, when no fallback is specified.\n       */\n      plugins: [builtInResolver],\n    },\n\n    /**\n     * The plugins to use.\n     *\n     * @see https://webpack.js.org/configuration/plugins/\n     */\n    plugins: [\n      /**\n       * The `SnapsWebpackPlugin` is a Webpack plugin that checks and updates\n       * the manifest file, and evaluates the bundle in SES. While not strictly\n       * required, it's highly recommended to use this plugin.\n       */\n      new SnapsWebpackPlugin({\n        manifestPath: config.manifest.path,\n        writeManifest: config.manifest.update,\n        eval: !options.watch && options.evaluate,\n      }),\n\n      /**\n       * The `SnapsStatsPlugin` is a Webpack plugin that handles the stats\n       * output. It's used to show the stats in the terminal, in a format that\n       * is easy to read.\n       */\n      new SnapsStatsPlugin({ verbose: config.stats.verbose }, options.spinner),\n\n      /**\n       * The `DefinePlugin` is a Webpack plugin that adds static values to the\n       * bundle. We use it to add the `NODE_DEBUG`, `NODE_ENV`, and `DEBUG`\n       * environment variables, as well as any custom environment\n       * variables (as `process.env`).\n       */\n      new DefinePlugin(getEnvironmentVariables(config.environment)),\n\n      /**\n       * The `ProgressPlugin` is a Webpack plugin that logs the progress of\n       * the build. We set it to log the progress to the spinner.\n       */\n      new ProgressPlugin({\n        handler: getProgressHandler(options.spinner, spinnerText),\n      }),\n\n      /**\n       * The `SnapsBundleWarningPlugin` is a Webpack plugin that shows a\n       * warning when the bundle is potentially incompatible with MetaMask\n       * Snaps.\n       */\n      new SnapsBundleWarningsPlugin({\n        builtInResolver,\n        builtIns: Boolean(config.stats.builtIns),\n        buffer: config.stats.buffer,\n      }),\n\n      /**\n       * The `WatchPlugin` is a Webpack plugin that adds extra files to watch\n       * for changes. This is useful for rebuilding the bundle when the\n       * manifest file changes.\n       */\n      options.watch &&\n        new SnapsWatchPlugin(\n          {\n            bundle: resolve(config.output.path, config.output.filename),\n            evaluate: options.evaluate,\n            files: [config.manifest.path],\n          },\n          options.spinner,\n        ),\n\n      /**\n       * The `ProviderPlugin` is a Webpack plugin that automatically load\n       * modules instead of having to import or require them everywhere.\n       */\n      (config.polyfills === true ||\n        (config.polyfills !== false && config.polyfills.buffer)) &&\n        new ProvidePlugin({\n          Buffer: ['buffer', 'Buffer'],\n        }),\n    ].filter(Boolean),\n\n    /**\n     * The optimization configuration. This tells Webpack how to optimize the\n     * bundle. Most of the time, you won't need to change this, as the default\n     * options set by the `mode` option are sufficient.\n     */\n    optimization: {\n      minimize: config.output.minimize,\n\n      /**\n       * The minimizer to use. We set it to use the `TerserPlugin`.\n       */\n      minimizer: [\n        new TerserPlugin({\n          parallel: true,\n        }),\n      ],\n    },\n\n    /**\n     * The performance configuration. This tells Webpack how to handle\n     * performance hints.\n     *\n     * @see https://webpack.js.org/configuration/performance/\n     */\n    performance: {\n      /**\n       * The hints to show. We set it to `false`, so that we don't get\n       * performance hints, as they are not relevant for Snaps.\n       *\n       * @see https://webpack.js.org/configuration/performance/#performancehints\n       */\n      hints: false,\n    },\n\n    /**\n     * The infrastructure logging configuration. This tells Webpack how to\n     * log messages.\n     *\n     * @see https://webpack.js.org/configuration/infrastructure-logging\n     */\n    infrastructureLogging: {\n      /**\n       * The level of logging to use. We set it to `none`, so that we can\n       * control the output ourselves.\n       */\n      level: 'none',\n    },\n  };\n}\n"],"mappings":"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","names":[]}