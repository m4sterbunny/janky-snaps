{"version":3,"sources":["../src/cli.ts"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport packageJson from '@metamask/snaps-cli/package.json';\nimport type { SemVer } from 'semver';\nimport semver from 'semver';\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\n\nimport builders from './builders';\nimport { getConfigByArgv } from './config';\nimport { error, getYargsErrorMessage, sanitizeInputs } from './utils';\n\n/**\n * Check the Node version. If the Node version is less than the minimum required\n * version, this logs an error and exits the process.\n *\n * @param nodeVersion - The Node version to check.\n */\nexport function checkNodeVersion(\n  nodeVersion: string = process.version.slice(1),\n) {\n  const versionRange = packageJson.engines.node;\n  const minimumVersion = (semver.minVersion(versionRange) as SemVer).format();\n\n  if (!semver.satisfies(nodeVersion, versionRange)) {\n    error(\n      `Node version ${nodeVersion} is not supported. Please use Node ${minimumVersion} or later.`,\n    );\n    // eslint-disable-next-line n/no-process-exit\n    process.exit(1);\n  }\n}\n\n/**\n * The main CLI entry point function. This processes the command line args, and\n * runs the appropriate function.\n *\n * @param argv - The raw command line arguments, i.e., `process.argv`.\n * @param commands - The list of commands to use.\n */\nexport async function cli(argv: string[], commands: any) {\n  checkNodeVersion();\n\n  await yargs(hideBin(argv))\n    .scriptName('mm-snap')\n    .usage('Usage: $0 <command> [options]')\n\n    .example('$0 build', `Build './src/index.js' as './dist/bundle.js'`)\n    .example(\n      '$0 build --config ./snap.config.build.ts',\n      `Build './src/index.js' as './dist/bundle.js' using the config in './snap.config.build.ts'`,\n    )\n    .example('$0 manifest --fix', `Check the snap manifest, and fix any errors`)\n    .example(\n      '$0 watch --port 8000',\n      `The snap input file for changes, and serve it on port 8000`,\n    )\n    .example('$0 serve --port 8000', `Serve the snap bundle on port 8000`)\n\n    .command(commands)\n\n    .option('config', builders.config)\n    .option('verboseErrors', builders.verboseErrors)\n    .option('suppressWarnings', builders.suppressWarnings)\n\n    .strict()\n\n    .middleware(async (args: any) => {\n      // eslint-disable-next-line require-atomic-updates\n      args.context = {\n        config: await getConfigByArgv(args),\n      };\n\n      sanitizeInputs(args);\n    }, false)\n\n    .demandCommand(1, 'You must specify at least one command.')\n\n    .fail((message, failure) => {\n      error(getYargsErrorMessage(message, failure));\n      // eslint-disable-next-line n/no-process-exit\n      process.exit(1);\n    })\n\n    .help()\n    .alias('help', 'h')\n    .parseAsync();\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AACA,OAAO,iBAAiB;AAExB,OAAO,YAAY;AACnB,OAAO,WAAW;AAClB,SAAS,eAAe;AAYjB,SAAS,iBACd,cAAsB,QAAQ,QAAQ,MAAM,CAAC,GAC7C;AACA,QAAM,eAAe,YAAY,QAAQ;AACzC,QAAM,iBAAkB,OAAO,WAAW,YAAY,EAAa,OAAO;AAE1E,MAAI,CAAC,OAAO,UAAU,aAAa,YAAY,GAAG;AAChD;AAAA,MACE,gBAAgB,WAAW,sCAAsC,cAAc;AAAA,IACjF;AAEA,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AASA,eAAsB,IAAI,MAAgB,UAAe;AACvD,mBAAiB;AAEjB,QAAM,MAAM,QAAQ,IAAI,CAAC,EACtB,WAAW,SAAS,EACpB,MAAM,+BAA+B,EAErC,QAAQ,YAAY,8CAA8C,EAClE;AAAA,IACC;AAAA,IACA;AAAA,EACF,EACC,QAAQ,qBAAqB,6CAA6C,EAC1E;AAAA,IACC;AAAA,IACA;AAAA,EACF,EACC,QAAQ,wBAAwB,oCAAoC,EAEpE,QAAQ,QAAQ,EAEhB,OAAO,UAAU,iBAAS,MAAM,EAChC,OAAO,iBAAiB,iBAAS,aAAa,EAC9C,OAAO,oBAAoB,iBAAS,gBAAgB,EAEpD,OAAO,EAEP,WAAW,OAAO,SAAc;AAE/B,SAAK,UAAU;AAAA,MACb,QAAQ,MAAM,gBAAgB,IAAI;AAAA,IACpC;AAEA,mBAAe,IAAI;AAAA,EACrB,GAAG,KAAK,EAEP,cAAc,GAAG,wCAAwC,EAEzD,KAAK,CAAC,SAAS,YAAY;AAC1B,UAAM,qBAAqB,SAAS,OAAO,CAAC;AAE5C,YAAQ,KAAK,CAAC;AAAA,EAChB,CAAC,EAEA,KAAK,EACL,MAAM,QAAQ,GAAG,EACjB,WAAW;AAChB;","names":[]}