{"version":3,"sources":["../src/commands/manifest/implementation.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,eAAe,cAAc;AACtC,SAAS,KAAK,cAAc;AAE5B,SAAS,eAAe;AAcxB,eAAsB,SACpB,MACA,OACA,SACkB;AAClB,QAAM,EAAE,UAAU,QAAQ,QAAQ,IAAI,MAAM;AAAA,IAC1C,QAAQ,IAAI;AAAA,IACZ;AAAA,EACF;AAEA,MAAI,SAAS,SAAS;AACpB,SAAK,4CAA4C,OAAO;AAAA,EAC1D;AAEA,MAAI,CAAC,SAAS,OAAO,SAAS,GAAG;AAC/B,UAAM,kBAAkB,OACrB,IAAI,CAAC,kBAAkB,OAAO,IAAI,UAAK,aAAa,EAAE,CAAC,CAAC,EACxD,KAAK,IAAI;AAEZ;AAAA,MACE;AAAA;AAAA,EAAyC,eAAe;AAAA;AAAA;AAAA,MACxD;AAAA,IACF;AAEA,aAAS,KAAK;AACd,YAAQ,WAAW;AACnB,WAAO;AAAA,EACT;AAEA,MAAI,SAAS,SAAS,GAAG;AACvB,UAAM,oBAAoB,SAAS;AAAA,MAAI,CAAC,oBACtC,OAAO,OAAO,UAAK,eAAe,EAAE,CAAC;AAAA,IACvC;AAEA;AAAA,MACE;AAAA;AAAA,EAA2C,kBAAkB,KAAK,IAAI,CAAC;AAAA,MACvE;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT","sourcesContent":["import { checkManifest, indent } from '@metamask/snaps-utils/node';\nimport { red, yellow } from 'chalk';\nimport type { Ora } from 'ora';\nimport { dirname } from 'path';\n\nimport { error, info, warn } from '../../utils';\n\n/**\n * Check the snap manifest file at the given path. If `write` is `true`, the\n * manifest will be written to disk if it is invalid. If `write` is `false`,\n * the manifest will not be written to disk, and the function will log any\n * errors and warnings to the console.\n *\n * @param path - The path to the manifest file.\n * @param write - Whether to write the manifest to disk if it is invalid.\n * @param spinner - An optional spinner to use for logging.\n */\nexport async function manifest(\n  path: string,\n  write: boolean,\n  spinner?: Ora,\n): Promise<boolean> {\n  const { warnings, errors, updated } = await checkManifest(\n    dirname(path),\n    write,\n  );\n\n  if (write && updated) {\n    info('The snap manifest file has been updated.', spinner);\n  }\n\n  if (!write && errors.length > 0) {\n    const formattedErrors = errors\n      .map((manifestError) => indent(red(`• ${manifestError}`)))\n      .join('\\n');\n\n    error(\n      `The snap manifest file is invalid.\\n\\n${formattedErrors}\\n\\nRun the command with the \\`--fix\\` flag to attempt to fix the manifest.`,\n      spinner,\n    );\n\n    spinner?.stop();\n    process.exitCode = 1;\n    return false;\n  }\n\n  if (warnings.length > 0) {\n    const formattedWarnings = warnings.map((manifestWarning) =>\n      indent(yellow(`• ${manifestWarning}`)),\n    );\n\n    warn(\n      `The snap manifest file has warnings.\\n\\n${formattedWarnings.join('\\n')}`,\n      spinner,\n    );\n  }\n\n  return true;\n}\n"]}