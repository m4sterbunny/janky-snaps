{"version":3,"sources":["../src/webpack/utils.ts","../src/webpack/loaders/browserify.ts"],"sourcesContent":["import { bytesToBase64 } from '@metamask/utils';\nimport { dim } from 'chalk';\nimport { promises as fs } from 'fs';\nimport { builtinModules } from 'module';\nimport type { Ora } from 'ora';\nimport { dirname, resolve } from 'path';\nimport stripAnsi from 'strip-ansi';\nimport type { Configuration } from 'webpack';\n\nimport type { ProcessedWebpackConfig } from '../config';\nimport { browserify, getFunctionLoader } from './loaders';\n\nexport const BROWSERSLIST_FILE = resolve(\n  dirname(\n    // eslint-disable-next-line n/no-extraneous-require\n    require.resolve('@metamask/snaps-cli/package.json'),\n  ),\n  '.browserslistrc',\n);\n\nexport const WEBPACK_FALLBACKS = {\n  assert: require.resolve('assert/'),\n  buffer: require.resolve('buffer/'),\n  console: require.resolve('console-browserify'),\n  constants: require.resolve('constants-browserify'),\n  crypto: require.resolve('crypto-browserify'),\n  domain: require.resolve('domain-browser'),\n  events: require.resolve('events/'),\n  http: require.resolve('stream-http'),\n  https: require.resolve('https-browserify'),\n  os: require.resolve('os-browserify/browser'),\n  path: require.resolve('path-browserify'),\n  punycode: require.resolve('punycode/'),\n  process: require.resolve('process/browser'),\n  querystring: require.resolve('querystring-es3'),\n  stream: require.resolve('stream-browserify'),\n  /* eslint-disable @typescript-eslint/naming-convention  */\n  _stream_duplex: require.resolve('readable-stream/lib/_stream_duplex'),\n  _stream_passthrough: require.resolve(\n    'readable-stream/lib/_stream_passthrough',\n  ),\n  _stream_readable: require.resolve('readable-stream/lib/_stream_readable'),\n  _stream_transform: require.resolve('readable-stream/lib/_stream_transform'),\n  _stream_writable: require.resolve('readable-stream/lib/_stream_writable'),\n  string_decoder: require.resolve('string_decoder/'),\n  /* eslint-enable @typescript-eslint/naming-convention  */\n  sys: require.resolve('util/'),\n  timers: require.resolve('timers-browserify'),\n  tty: require.resolve('tty-browserify'),\n  url: require.resolve('url/'),\n  util: require.resolve('util/'),\n  vm: require.resolve('vm-browserify'),\n  zlib: require.resolve('browserify-zlib'),\n};\n\n/**\n * Get the default loader for JavaScript and TypeScript files, based on the\n * config object.\n *\n * - If the `legacy` option is set, we use the custom `browserify` loader. This\n * uses the legacy Browserify config to transpile the code.\n * - Otherwise, we use the `swc-loader`. This is a Webpack loader that uses the\n * `SWC` compiler, which is a much faster alternative to Babel and TypeScript's\n * own compiler.\n *\n * @param config - The processed snap Webpack config.\n * @param config.legacy - The legacy config object, if any.\n * @param config.sourceMap - Whether to generate source maps.\n * @see https://swc.rs/docs/usage/swc-loader\n * @returns The default loader.\n */\nexport async function getDefaultLoader({\n  legacy,\n  sourceMap,\n}: ProcessedWebpackConfig) {\n  if (legacy) {\n    /**\n     * If the snap uses the legacy config, we use the custom `browserify`\n     * loader. This uses the legacy Browserify config to transpile the code.\n     * This is necessary for backwards compatibility with the\n     * `bundlerCustomizer` function.\n     */\n    return getFunctionLoader(browserify, legacy);\n  }\n\n  const targets = await getBrowserslistTargets();\n  return {\n    /**\n     * We use the `swc-loader` to transpile TypeScript and JavaScript files.\n     * This is a Webpack loader that uses the `SWC` compiler, which is a much\n     * faster alternative to Babel and TypeScript's own compiler.\n     */\n    loader: require.resolve('swc-loader'),\n\n    /**\n     * The options for the `swc-loader`. These can be overridden in the\n     * `.swcrc` file.\n     *\n     * @see https://swc.rs/docs/configuration/swcrc\n     */\n    options: {\n      sync: false,\n\n      /**\n       * This tells SWC to generate source maps. We set it to the\n       * `sourceMap` value from the config object.\n       *\n       * This must be enabled if source maps are enabled in the config.\n       */\n      sourceMaps: Boolean(getDevTool(sourceMap)),\n\n      jsc: {\n        parser: {\n          /**\n           * This tells the parser to parse TypeScript files. If you\n           * don't need to support TypeScript, you can set this to\n           * `ecmascript` instead, but there's no harm in leaving it\n           * as `typescript`.\n           *\n           * @see https://swc.rs/docs/configuration/compilation#jscparser\n           */\n          syntax: 'typescript',\n        },\n      },\n\n      /**\n       * The module configuration. This tells SWC how to output the\n       * transpiled code.\n       *\n       * @see https://swc.rs/docs/configuration/modules\n       */\n      module: {\n        /**\n         * This tells SWC to output ES6 modules. This will allow Webpack to\n         * optimize the output code better. Snaps don't support ES6 however, so\n         * the output code will be transpiled to CommonJS by Webpack later in\n         * the build process.\n         *\n         * @see https://swc.rs/docs/configuration/modules#es6\n         */\n        type: 'es6',\n      },\n\n      env: {\n        targets: targets.join(', '),\n      },\n    },\n  };\n}\n\n/**\n * Get the Webpack devtool configuration based on the given snap config.\n *\n * - If `sourceMap` is `inline`, return `inline-source-map`.\n * - If `sourceMap` is `true`, return `source-map`.\n * - Otherwise, return `false`.\n *\n * @param sourceMap - The `sourceMap` value from the snap config.\n * @returns The Webpack devtool configuration.\n */\nexport function getDevTool(\n  sourceMap: ProcessedWebpackConfig['sourceMap'],\n): Configuration['devtool'] {\n  if (sourceMap === 'inline') {\n    return 'inline-source-map';\n  }\n\n  if (sourceMap === true) {\n    return 'source-map';\n  }\n\n  return false;\n}\n\n/**\n * Get a function that can be used as handler function for Webpack's\n * `ProgressPlugin`.\n *\n * @param spinner - The spinner to update.\n * @param spinnerText - The initial spinner text. This will be prepended to the\n * percentage.\n * @returns A function that can be used as handler function for Webpack's\n * `ProgressPlugin`.\n */\n// Note: This is extracted for testing purposes.\nexport function getProgressHandler(spinner?: Ora, spinnerText?: string) {\n  return (percentage: number) => {\n    if (spinner && spinnerText) {\n      spinner.text = `${spinnerText} ${dim(\n        `(${Math.round(percentage * 100)}%)`,\n      )}`;\n    }\n  };\n}\n\n/**\n * Get the targets from the `.browserslistrc` file.\n *\n * @returns The browser targets as an array of strings.\n */\nexport async function getBrowserslistTargets() {\n  const contents = await fs.readFile(BROWSERSLIST_FILE, 'utf8');\n  return contents\n    .split('\\n')\n    .map((line) => line.trim())\n    .filter((line) => line && !line.startsWith('#'));\n}\n\n/**\n * Get a singular or plural string based on the given count. This is useful for\n * generating messages like \"1 error\" or \"2 errors\". By default, the plural\n * string is the singular string with an \"s\" appended to it.\n *\n * This assumes that the text is in English, and likely won't work for some\n * other languages.\n *\n * @param count - The count.\n * @param singular - The singular string.\n * @param plural - The plural string.\n * @returns The singular or plural string.\n * @example\n * ```typescript\n * pluralize(1, 'error'); // => 'error'\n * pluralize(2, 'error'); // => 'errors'\n * pluralize(1, 'error', 'problem'); // => 'error'\n * pluralize(2, 'error', 'problems'); // => 'problems'\n * ```\n */\nexport function pluralize(\n  count: number,\n  singular: string,\n  plural = `${singular}s`,\n) {\n  return count === 1 ? singular : plural;\n}\n\n/**\n * Get an object that can be used as fallback config for Webpack's\n * `fallback` config.\n *\n * @param polyfills - The polyfill object from the snap config.\n * @returns The webpack fallback config.\n */\nexport function getFallbacks(polyfills: ProcessedWebpackConfig['polyfills']): {\n  [index: string]: string | false;\n} {\n  if (polyfills === true) {\n    return Object.fromEntries(\n      builtinModules.map((name) => [\n        name,\n        WEBPACK_FALLBACKS[name as keyof typeof WEBPACK_FALLBACKS] ?? false,\n      ]),\n    );\n  }\n\n  if (polyfills === false) {\n    return Object.fromEntries(builtinModules.map((name) => [name, false]));\n  }\n\n  return Object.fromEntries(\n    builtinModules.map((name) => [\n      name,\n      polyfills[name as keyof ProcessedWebpackConfig['polyfills']]\n        ? WEBPACK_FALLBACKS[name as keyof typeof WEBPACK_FALLBACKS]\n        : false,\n    ]),\n  );\n}\n\n/**\n * Get an object that can be used as environment variables for Webpack's\n * `DefinePlugin`.\n *\n * @param environment - The environment object from the Snap config.\n * @param defaults - The default environment variables.\n * @returns The Webpack environment variables.\n */\nexport function getEnvironmentVariables(\n  environment: Record<string, unknown>,\n  defaults = {\n    NODE_DEBUG: 'false',\n    NODE_ENV: 'production',\n    DEBUG: 'false',\n  },\n) {\n  return Object.fromEntries(\n    Object.entries({\n      ...defaults,\n      ...environment,\n    }).map(([key, value]) => [`process.env.${key}`, JSON.stringify(value)]),\n  );\n}\n\n/**\n * Format the given line to fit within the terminal width.\n *\n * @param line - The line to format.\n * @param indent - The indentation to use.\n * @param initialIndent - The initial indentation to use, i.e., the indentation\n * for the first line.\n * @returns The formatted line.\n */\nfunction formatLine(line: string, indent: number, initialIndent: number) {\n  const terminalWidth = process.stdout.columns;\n  if (!terminalWidth) {\n    return `${' '.repeat(initialIndent)}${line}`;\n  }\n\n  return line.split(' ').reduce(\n    ({ formattedText, currentLineLength }, word, index) => {\n      // `chalk` adds ANSI escape codes to the text, which are not visible\n      // characters. We need to strip them to get the visible length of the\n      // text.\n      const visibleWord = stripAnsi(word);\n\n      // Determine if a space should be added before the word.\n      const spaceBeforeWord = index > 0 ? ' ' : '';\n      const wordLengthWithSpace = visibleWord.length + spaceBeforeWord.length;\n\n      // If the word would exceed the terminal width, start a new line.\n      if (currentLineLength + wordLengthWithSpace > terminalWidth) {\n        return {\n          formattedText: `${formattedText}\\n${' '.repeat(indent)}${word}`,\n          currentLineLength: indent + visibleWord.length,\n        };\n      }\n\n      // Otherwise, add the word to the current line.\n      return {\n        formattedText: formattedText + spaceBeforeWord + word,\n        currentLineLength: currentLineLength + wordLengthWithSpace,\n      };\n    },\n    {\n      formattedText: ' '.repeat(initialIndent),\n      currentLineLength: initialIndent,\n    },\n  ).formattedText;\n}\n\n/**\n * Format the given text to fit within the terminal width.\n *\n * @param text - The text to format.\n * @param indent - The indentation to use.\n * @param initialIndent - The initial indentation to use, i.e., the indentation\n * for the first line.\n * @returns The formatted text.\n */\nexport function formatText(\n  text: string,\n  indent: number,\n  initialIndent = indent,\n) {\n  const lines = text.split('\\n');\n\n  // Apply formatting to each line separately and then join them.\n  return lines\n    .map((line, index) => {\n      const lineIndent = index === 0 ? initialIndent : indent;\n      return formatLine(line, indent, lineIndent);\n    })\n    .join('\\n');\n}\n\n/**\n * Get an SVG from the given bytes and mime type.\n *\n * @param mimeType - The mime type of the image.\n * @param bytes - The image bytes.\n * @returns The SVG.\n */\nexport function getImageSVG(mimeType: string, bytes: Uint8Array) {\n  const dataUrl = `data:${mimeType};base64,${bytesToBase64(bytes)}`;\n  return `<svg xmlns=\"http://www.w3.org/2000/svg\"><image href=\"${dataUrl}\" /></svg>`;\n}\n","import browserify from 'browserify';\nimport { Readable } from 'readable-stream';\nimport type { LoaderDefinitionFunction } from 'webpack';\n\nimport { TranspilationModes } from '../../builders';\nimport type { LegacyOptions } from '../../config';\nimport { processDependencies } from '../../utils';\nimport { getBrowserslistTargets } from '../utils';\n\n/**\n * A Browserify loader for Webpack. This exists for backwards compatibility with\n * the legacy configuration format, in order to support the `bundlerCustomizer`\n * function.\n *\n * When this loader is used, the input file will be processed by Browserify, and\n * written to disk by Webpack. Most processing will be handled by Browserify, so\n * there are no benefits like tree-shaking.\n *\n * @param content - The input file contents as a string.\n * @param sourceMap - The source map of the input file.\n */\nconst loader: LoaderDefinitionFunction<LegacyOptions> = async function (\n  content,\n  sourceMap,\n) {\n  const config = this.getOptions();\n\n  const { transpilationMode } = config;\n\n  const bundler = browserify({\n    extensions: ['.js', '.ts'],\n    debug: Boolean(sourceMap),\n    standalone: '<snap>',\n  });\n\n  if (transpilationMode !== TranspilationModes.None) {\n    const babelifyOptions = processDependencies(config);\n\n    // We need to statically import all Browserify transforms, and all Babel\n    // presets and plugins, and calling `require` is the sanest way to do that.\n    /* eslint-disable @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, n/global-require */\n    bundler.transform(require('babelify'), {\n      global: transpilationMode === TranspilationModes.LocalAndDeps,\n      extensions: ['.js', '.ts'],\n      presets: [\n        require('@babel/preset-typescript'),\n        [\n          require('@babel/preset-env'),\n          {\n            targets: {\n              browsers: await getBrowserslistTargets(),\n            },\n          },\n        ],\n      ],\n      plugins: [\n        require('@babel/plugin-transform-runtime'),\n        require('@babel/plugin-transform-class-properties'),\n        require('@babel/plugin-transform-private-methods'),\n        require('@babel/plugin-transform-class-static-block'),\n        require('@babel/plugin-transform-private-property-in-object'),\n      ],\n      ...(babelifyOptions as any),\n    });\n    /* eslint-enable @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, n/global-require */\n  }\n\n  config.bundlerCustomizer?.(bundler);\n\n  // Browserify doesn't accept a string as an entry point, so we need to convert\n  // it to a stream.\n  const stream = new Readable();\n  stream.push(content);\n  stream.push(null);\n\n  bundler.add(stream, {\n    file: this.resourcePath,\n  });\n\n  return new Promise<Buffer>((resolve, reject) => {\n    bundler.bundle((bundleError, buffer: Buffer) => {\n      if (bundleError) {\n        reject(bundleError);\n        return;\n      }\n\n      // Browserify inlines the source map, so we just pass the output buffer back\n      // to Webpack.\n      resolve(buffer);\n    });\n  });\n};\n\nexport default loader;\n"],"mappings":"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","names":["resolve"]}