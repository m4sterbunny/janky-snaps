{"version":3,"sources":["../src/utils/errors.ts"],"sourcesContent":["import { hasProperty, isObject } from '@metamask/utils';\n\nimport { CLIError } from '../errors';\n\n/**\n * Get the error message from an error in a Yargs `fail` handler. If the error\n * is not `undefined`, {@link getErrorMessage} is used to get the error message.\n * Otherwise, the given message is returned.\n *\n * @param message - The error message.\n * @param error - The error object. This may be `undefined`.\n * @returns The error message.\n */\nexport function getYargsErrorMessage(message: string, error?: unknown): string {\n  if (error) {\n    if (error instanceof CLIError) {\n      return error.message;\n    }\n\n    return getErrorMessage(error);\n  }\n\n  return message;\n}\n\n/**\n * Get the error message from an error.\n *\n * - If the error is an object with a `stack` property, the `stack` property is\n * returned.\n * - If the error is an object with a `message` property, the `message`\n * property is returned.\n * - Otherwise, the error is converted to a string and returned.\n *\n * @param error - The error to get the message from.\n * @returns The error message.\n */\nexport function getErrorMessage(error: unknown): string {\n  if (isObject(error)) {\n    if (hasProperty(error, 'stack') && typeof error.stack === 'string') {\n      return error.stack;\n    }\n\n    if (hasProperty(error, 'message') && typeof error.message === 'string') {\n      return error.message;\n    }\n  }\n\n  return String(error);\n}\n"],"mappings":";;;;;AAAA,SAAS,aAAa,gBAAgB;AAa/B,SAAS,qBAAqB,SAAiB,OAAyB;AAC7E,MAAI,OAAO;AACT,QAAI,iBAAiB,UAAU;AAC7B,aAAO,MAAM;AAAA,IACf;AAEA,WAAO,gBAAgB,KAAK;AAAA,EAC9B;AAEA,SAAO;AACT;AAcO,SAAS,gBAAgB,OAAwB;AACtD,MAAI,SAAS,KAAK,GAAG;AACnB,QAAI,YAAY,OAAO,OAAO,KAAK,OAAO,MAAM,UAAU,UAAU;AAClE,aAAO,MAAM;AAAA,IACf;AAEA,QAAI,YAAY,OAAO,SAAS,KAAK,OAAO,MAAM,YAAY,UAAU;AACtE,aAAO,MAAM;AAAA,IACf;AAAA,EACF;AAEA,SAAO,OAAO,KAAK;AACrB;","names":[]}