{"version":3,"sources":["../src/webpack/plugins.ts"],"sourcesContent":["import { assert, hasProperty, isObject } from '@metamask/utils';\nimport { bold, dim, red, yellow } from 'chalk';\nimport { isBuiltin } from 'module';\nimport type { Ora } from 'ora';\nimport type {\n  Compiler,\n  ProvidePlugin,\n  ResolvePluginInstance,\n  Resolver,\n  StatsError,\n  WebpackPluginInstance,\n} from 'webpack';\nimport { WebpackError } from 'webpack';\n\nimport { evaluate } from '../commands/eval';\nimport { error, getErrorMessage, info, warn } from '../utils';\nimport { formatText, pluralize } from './utils';\n\nexport type SnapsStatsPluginOptions = {\n  /**\n   * Whether to log the verbose stats.\n   */\n  verbose?: boolean;\n};\n\n/**\n * A plugin that logs the stats after compilation. This is useful for logging\n * the number of files compiled, and the time taken to compile them.\n */\nexport class SnapsStatsPlugin implements WebpackPluginInstance {\n  /**\n   * The options for the plugin.\n   */\n  readonly options: SnapsStatsPluginOptions;\n\n  /**\n   * The spinner to use for logging.\n   */\n  readonly #spinner?: Ora;\n\n  constructor(\n    options: SnapsStatsPluginOptions = {\n      verbose: false,\n    },\n    spinner?: Ora,\n  ) {\n    this.options = options;\n    this.#spinner = spinner;\n  }\n\n  /**\n   * Apply the plugin to the Webpack compiler.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  apply(compiler: Compiler) {\n    compiler.hooks.afterDone.tap(this.constructor.name, (stats) => {\n      if (!stats) {\n        return;\n      }\n\n      const { modules, time, errors, warnings } = stats.toJson();\n\n      assert(modules, 'Modules must be defined in stats.');\n      assert(time, 'Time must be defined in stats.');\n\n      if (errors?.length) {\n        const formattedErrors = errors\n          .map((statsError) => this.#getStatsErrorMessage(statsError))\n          .join('\\n\\n');\n\n        error(\n          `Compiled ${modules.length} ${pluralize(\n            modules.length,\n            'file',\n          )} in ${time}ms with ${errors.length} ${pluralize(\n            errors.length,\n            'error',\n          )}.\\n\\n${formattedErrors}\\n`,\n          this.#spinner,\n        );\n\n        this.#spinner?.stop();\n\n        process.exitCode = 1;\n        return;\n      }\n\n      if (warnings?.length) {\n        const formattedWarnings = warnings\n          .map((statsWarning) =>\n            this.#getStatsErrorMessage(statsWarning, yellow),\n          )\n          .join('\\n\\n');\n\n        warn(\n          `Compiled ${modules.length} ${pluralize(\n            modules.length,\n            'file',\n          )} in ${time}ms with ${warnings.length} ${pluralize(\n            warnings.length,\n            'warning',\n          )}.\\n\\n${formattedWarnings}\\n`,\n          this.#spinner,\n        );\n      } else {\n        info(\n          `Compiled ${modules.length} ${pluralize(\n            modules.length,\n            'file',\n          )} in ${time}ms.`,\n          this.#spinner,\n        );\n      }\n\n      if (compiler.watchMode) {\n        // The spinner may be restarted by the watch plugin, outside of the\n        // `executeSteps` flow, so we stop it here just in case.\n        this.#spinner?.succeed('Done!');\n      }\n    });\n  }\n\n  /**\n   * Get the error message for the given stats error.\n   *\n   * @param statsError - The stats error.\n   * @param color - The color to use for the error message.\n   * @returns The error message.\n   */\n  #getStatsErrorMessage(statsError: StatsError, color = red) {\n    const baseMessage = this.options.verbose\n      ? getErrorMessage(statsError)\n      : statsError.message;\n\n    const [first, ...rest] = baseMessage.split('\\n');\n\n    return [\n      color(formatText(`â€¢ ${first}`, 4, 2)),\n      ...rest.map((message) => formatText(color(message), 4)),\n      statsError.details && `\\n${formatText(dim(statsError.details), 6)}`,\n    ]\n      .filter(Boolean)\n      .join('\\n');\n  }\n}\n\n/**\n * The options for the {@link SnapsWatchPlugin}.\n */\nexport type SnapsWatchPluginOptions = {\n  /**\n   * The bundle path. This is the file that will be evaluated, if the `evaluate`\n   * option is set.\n   */\n  bundle?: string;\n\n  /**\n   * Whether to evaluate the bundle. This only applies if the `bundle` option is\n   * set.\n   */\n  evaluate?: boolean;\n\n  /**\n   * The extra files to watch.\n   */\n  files?: string[];\n};\n\n/**\n * A plugin that adds extra files to watch. This is useful for watching files\n * that are not imported by the entry point, such as the `snap.manifest.json`\n * file.\n */\nexport class SnapsWatchPlugin implements WebpackPluginInstance {\n  /**\n   * The options for the plugin.\n   */\n  readonly options: SnapsWatchPluginOptions;\n\n  /**\n   * The spinner to use for logging.\n   */\n  readonly #spinner?: Ora;\n\n  constructor(options: SnapsWatchPluginOptions, spinner?: Ora) {\n    this.options = options;\n    this.#spinner = spinner;\n  }\n\n  /**\n   * Apply the plugin to the Webpack compiler.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  apply(compiler: Compiler) {\n    compiler.hooks.invalid.tap(this.constructor.name, (file) => {\n      this.#spinner?.start();\n      info(`Changes detected in ${yellow(file)}, recompiling.`, this.#spinner);\n    });\n\n    compiler.hooks.afterEmit.tapPromise(\n      this.constructor.name,\n      async ({ fileDependencies }) => {\n        this.options.files?.forEach(\n          fileDependencies.add.bind(fileDependencies),\n        );\n\n        if (this.options.bundle && this.options.evaluate) {\n          await this.#safeEvaluate(this.options.bundle);\n        }\n      },\n    );\n  }\n\n  /**\n   * Safely evaluate the bundle at the given path. If an error occurs, it will\n   * be logged to the console, rather than throwing an error.\n   *\n   * This function should never throw an error.\n   *\n   * @param bundlePath - The path to the bundle.\n   */\n  async #safeEvaluate(bundlePath: string) {\n    try {\n      await evaluate(bundlePath);\n      info(`Snap bundle evaluated successfully.`, this.#spinner);\n    } catch (evaluateError) {\n      error(evaluateError.message, this.#spinner);\n    }\n  }\n}\n\n/**\n * The options for the {@link SnapsBuiltInResolver}.\n */\nexport type SnapsBuiltInResolverOptions = {\n  /**\n   * The built-in modules to ignore.\n   */\n  ignore?: string[];\n};\n\n/**\n * A plugin that logs a message when a built-in module is not resolved. The\n * MetaMask Snaps CLI does not support built-in modules by default, and this\n * plugin is used to warn the user when they try to import a built-in module,\n * when no fallback is configured.\n */\nexport class SnapsBuiltInResolver implements ResolvePluginInstance {\n  /**\n   * The built-in modules that have been imported, but not resolved.\n   */\n  readonly unresolvedModules = new Set<string>();\n\n  /**\n   * The name of the resolver hook to tap into.\n   */\n  readonly #source = 'described-resolve';\n\n  /**\n   * The options for the plugin.\n   */\n  readonly options: SnapsBuiltInResolverOptions;\n\n  /**\n   * The spinner to use for logging.\n   */\n  readonly #spinner?: Ora;\n\n  constructor(\n    options: SnapsBuiltInResolverOptions = {\n      ignore: [],\n    },\n    spinner?: Ora,\n  ) {\n    this.options = options;\n    this.#spinner = spinner;\n  }\n\n  /**\n   * Apply the plugin to the Webpack resolver.\n   *\n   * @param resolver - The Webpack resolver.\n   */\n  apply(resolver: Resolver) {\n    resolver\n      .getHook(this.#source)\n      .tapAsync(\n        this.constructor.name,\n        ({ module: isModule, request }, _, callback) => {\n          if (!isModule || !request) {\n            return callback();\n          }\n\n          const baseRequest = request.split('/')[0];\n          if (\n            isBuiltin(baseRequest) &&\n            !this.options.ignore?.includes(baseRequest)\n          ) {\n            const fallback = resolver.options.fallback.find(\n              ({ name }) => name === baseRequest,\n            );\n\n            if (fallback && !fallback.alias) {\n              this.unresolvedModules.add(baseRequest);\n            }\n          }\n\n          return callback();\n        },\n      );\n  }\n}\n\n/**\n * The options for the {@link SnapsBundleWarningsPlugin}.\n */\nexport type SnapsBundleWarningsPluginOptions = {\n  /**\n   * The {@link SnapsBuiltInResolver} instance to use for detecting built-in\n   * modules.\n   */\n  builtInResolver?: SnapsBuiltInResolver | false;\n\n  /**\n   * Whether to show warnings if built-in modules are used, but not provided by\n   * Webpack's `fallback` configuration.\n   */\n  builtIns?: boolean;\n\n  /**\n   * Whether to show warnings if the `Buffer` global is used, but not provided\n   * by Webpack's `DefinePlugin`.\n   */\n  buffer?: boolean;\n};\n\n/**\n * A plugin that logs a message when:\n *\n * - A built-in module is not resolved. The MetaMask Snaps CLI does not support\n * built-in modules by default, and this plugin is used to warn the user when\n * they try to import a built-in module, when no fallback is configured.\n * - A snap uses the `Buffer` global. The MetaMask Snaps CLI does not support\n * the `Buffer` global by default, and this plugin is used to warn the user when\n * they try to use the `Buffer` global.\n *\n * We use both a resolver and a plugin, because the resolver is used to detect\n * when a built-in module is imported, and the plugin is used to log a single\n * message when the compilation is complete. We can't do everything in a single\n * plugin, because the resolver doesn't have access to the compilation, and the\n * plugin doesn't have access to the resolver.\n */\n\nexport class SnapsBundleWarningsPlugin implements WebpackPluginInstance {\n  /**\n   * The options for the plugin.\n   */\n  readonly options: SnapsBundleWarningsPluginOptions;\n\n  constructor(\n    options: SnapsBundleWarningsPluginOptions = {\n      buffer: true,\n      builtIns: true,\n    },\n  ) {\n    this.options = options;\n  }\n\n  /**\n   * Apply the plugin to the Webpack compiler.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  apply(compiler: Compiler) {\n    if (this.options.builtIns) {\n      this.#checkBuiltIns(compiler);\n    }\n\n    if (this.options.buffer) {\n      this.#checkBuffer(compiler);\n    }\n  }\n\n  /**\n   * Check if a built-in module is used, but not provided by Webpack's\n   * `fallback` configuration.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  #checkBuiltIns(compiler: Compiler) {\n    compiler.hooks.afterCompile.tap(this.constructor.name, (compilation) => {\n      if (!this.options.builtInResolver) {\n        return;\n      }\n\n      const { unresolvedModules } = this.options.builtInResolver;\n      if (unresolvedModules.size === 0) {\n        return;\n      }\n\n      const formattedModules = new Array(...unresolvedModules)\n        .map((name) => `â€¢ ${name}`)\n        .join('\\n');\n\n      const webpackError = new WebpackError(\n        `The snap attempted to use one or more Node.js builtins, but no browser fallback has been provided. The MetaMask Snaps CLI does not support Node.js builtins by default. If you want to use this module, you must set ${bold(\n          '`polyfills`',\n        )} to ${bold(\n          '`true`',\n        )} or an object with the builtins to polyfill as the key and ${bold(\n          '`true`',\n        )} as the value. To disable this warning, set ${bold(\n          '`stats.builtIns`',\n        )} to ${bold(\n          '`false`',\n        )} in your snap config file, or add the module to the ${bold(\n          '`stats.builtIns.ignore`',\n        )} array.`,\n      );\n\n      webpackError.details = formattedModules;\n      compilation.warnings.push(webpackError);\n    });\n  }\n\n  /**\n   * Check if the given instance is a `ProvidePlugin`. This is not guaranteed to\n   * be accurate, but it's good enough for our purposes. If we were to use\n   * `instanceof` instead, it might not work if multiple versions of Webpack are\n   * installed.\n   *\n   * @param instance - The instance to check.\n   * @returns Whether the instance is a `ProvidePlugin`, i.e., whether it's an\n   * object with the name `ProvidePlugin` and a `definitions` property.\n   */\n  #isProvidePlugin(instance: unknown): instance is ProvidePlugin {\n    return (\n      isObject(instance) &&\n      instance.constructor.name === 'ProvidePlugin' &&\n      hasProperty(instance, 'definitions')\n    );\n  }\n\n  /**\n   * Check if the `Buffer` global is used, but not provided by Webpack's\n   * `DefinePlugin`.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  #checkBuffer(compiler: Compiler) {\n    const plugin = compiler.options.plugins?.find((instance) =>\n      this.#isProvidePlugin(instance),\n    ) as ProvidePlugin | undefined;\n\n    // If the `ProvidePlugin` is configured to provide `Buffer`, then we don't\n    // need to warn the user.\n    if (plugin) {\n      const { definitions } = plugin;\n      if (definitions.Buffer) {\n        return;\n      }\n    }\n\n    compiler.hooks.compilation.tap(this.constructor.name, (compilation) => {\n      compilation.hooks.afterProcessAssets.tap(\n        this.constructor.name,\n        (assets) => {\n          // Check if assets use `Buffer`.\n          const bufferAssets = Object.entries(assets)\n            .filter(([name]) => name.endsWith('.js'))\n            .filter(([, asset]) => asset.source().includes('Buffer'));\n\n          if (bufferAssets.length === 0) {\n            return;\n          }\n\n          compilation.warnings.push(\n            new WebpackError(\n              `The snap attempted to use the Node.js Buffer global, which is not supported in the MetaMask Snaps CLI by default. To use the Buffer global, you must polyfill Buffer by setting ${bold(\n                '`buffer`',\n              )} to ${bold('`true`')} in the ${bold(\n                '`polyfills`',\n              )} config object in your snap config. To disable this warning, set ${bold(\n                '`stats.buffer`',\n              )} to ${bold('`false`')} in your snap config file.`,\n            ),\n          );\n        },\n      );\n    });\n  }\n}\n"],"mappings":"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","names":["_spinner"]}