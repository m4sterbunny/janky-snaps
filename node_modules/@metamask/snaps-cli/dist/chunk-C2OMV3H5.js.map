{"version":3,"sources":["../src/commands/build/build.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAS,cAAc;AACvB,SAAS,WAAW,mBAAmB;AAavC,IAAM,QAA6B;AAAA,EACjC;AAAA,IACE,MAAM;AAAA,IACN,MAAM,OAAO,EAAE,OAAO,MAAM;AAC1B,YAAM,EAAE,MAAM,IAAI;AAElB,UAAI,CAAE,MAAM,OAAO,KAAK,GAAI;AAC1B,cAAM,IAAI;AAAA,UACR,0BAA0B,KAAK;AAAA,QACjC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM,OAAO,EAAE,QAAQ,QAAQ,MAAM;AAGnC,aAAO,MAAM,MAAM,QAAQ,EAAE,UAAU,OAAO,QAAQ,CAAC;AAAA,IACzD;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,WAAW,CAAC,EAAE,OAAO,MAAM,OAAO;AAAA,IAClC,MAAM,OAAO,EAAE,QAAQ,QAAQ,MAAM;AACnC,YAAM,OAAO;AAAA,QACX,QAAQ,IAAI;AAAA,QACZ,OAAO,OAAO;AAAA,QACd,OAAO,OAAO;AAAA,MAChB;AAEA,YAAM,SAAS,IAAI;AAEnB,WAAK,uCAAuC,OAAO;AAAA,IACrD;AAAA,EACF;AACF;AAUA,eAAsB,aAAa,QAAwC;AACzE,SAAO,MAAM,aAAa,OAAO;AAAA,IAC/B;AAAA,EACF,CAAC;AACH","sourcesContent":["import { isFile } from '@metamask/snaps-utils/node';\nimport { resolve as pathResolve } from 'path';\n\nimport type { ProcessedConfig, ProcessedWebpackConfig } from '../../config';\nimport { CommandError } from '../../errors';\nimport type { Steps } from '../../utils';\nimport { executeSteps, info } from '../../utils';\nimport { evaluate } from '../eval';\nimport { build } from './implementation';\n\ntype BuildContext = {\n  config: ProcessedWebpackConfig;\n};\n\nconst steps: Steps<BuildContext> = [\n  {\n    name: 'Checking the input file.',\n    task: async ({ config }) => {\n      const { input } = config;\n\n      if (!(await isFile(input))) {\n        throw new CommandError(\n          `Input file not found: \"${input}\". Make sure that the \"input\" field in your snap config is correct.`,\n        );\n      }\n    },\n  },\n  {\n    name: 'Building the snap bundle.',\n    task: async ({ config, spinner }) => {\n      // We don't evaluate the bundle here, because it's done in a separate\n      // step.\n      return await build(config, { evaluate: false, spinner });\n    },\n  },\n  {\n    name: 'Evaluating the snap bundle.',\n    condition: ({ config }) => config.evaluate,\n    task: async ({ config, spinner }) => {\n      const path = pathResolve(\n        process.cwd(),\n        config.output.path,\n        config.output.filename,\n      );\n\n      await evaluate(path);\n\n      info(`Snap bundle evaluated successfully.`, spinner);\n    },\n  },\n] as const;\n\n/**\n * Build all files in the given source directory to the given destination\n * directory.\n *\n * This creates the destination directory if it doesn't exist.\n *\n * @param config - The config object.\n */\nexport async function buildHandler(config: ProcessedConfig): Promise<void> {\n  return await executeSteps(steps, {\n    config,\n  });\n}\n"]}