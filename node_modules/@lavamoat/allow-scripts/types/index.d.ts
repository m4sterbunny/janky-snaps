export type PkgConfs = {
    packageJson: LavamoatPackageJson;
    configs: {
        lifecycle: ScriptsConfig;
        bin: BinsConfig;
    };
    somePoliciesAreMissing: boolean;
};
/**
 * Individual package info
 */
export type PkgInfo = {
    canonicalName: string;
    path: string;
    scripts: Object;
};
/**
 * Individual bin link info
 */
export type BinInfo = {
    canonicalName: string;
    isDirect: boolean;
    bin: string;
    path: string;
    link: string;
    fullLinkPath: string;
};
/**
 * Configuration for a type of scripts policies
 */
export type ScriptsConfig = {
    allowConfig: Record<string, any>;
    packagesWithScripts: Map<string, [PkgInfo]>;
    allowedPatterns: Array<string>;
    disallowedPatterns: Array<string>;
    missingPolicies: Array<string>;
    excessPolicies: Array<string>;
};
export type BinCandidates = Map<string, BinInfo[]>;
/**
 * Configuration for a type of bins policies
 */
export type BinsConfig = {
    allowConfig: Record<string, any>;
    binCandidates: BinCandidates;
    allowedBins: Array<BinInfo>;
    firewalledBins: Array<BinInfo>;
    excessPolicies: Array<string>;
    somePoliciesAreMissing: boolean;
};
export type RunScriptOpts = {
    event: string;
    path: string;
};
export type SavePackageConfigurationsOpts = {
    rootDir: string;
    conf: PkgConfs;
};
export type GetOptionsForBinOpts = {
    rootDir: string;
    name: string;
};
export type RunAllowedPackagesOpts = {
    rootDir: string;
};
export type PrintPackagesListOpts = {
    rootDir: string;
};
export type SetDefaultConfigurationOpts = {
    rootDir: string;
};
export type PrintMissingPoliciesIfAnyOpts = {
    missingPolicies?: string[] | undefined;
    packagesWithScripts?: Map<string, unknown[]> | undefined;
};
export type PkgLavamoatConfig = {
    allowScripts?: Record<string, any> | undefined;
    allowBins?: Record<string, any> | undefined;
    allowConfig?: Record<string, any> | undefined;
    allowedPatterns?: Record<string, any> | undefined;
    disallowedPatterns?: Record<string, any> | undefined;
    missingPolicies?: Record<string, any> | undefined;
    excessPolicies?: Record<string, any> | undefined;
};
export type LavamoatPackageJson = import('type-fest').PackageJson & {
    lavamoat: PkgLavamoatConfig;
};
/**
 *
 * @param {GetOptionsForBinOpts} param0
 */
export function getOptionsForBin({ rootDir, name }: GetOptionsForBinOpts): Promise<BinInfo[] | undefined>;
/**
 * @param {RunAllowedPackagesOpts} param0
 * @returns {Promise<void>}
 */
export function runAllowedPackages({ rootDir }: RunAllowedPackagesOpts): Promise<void>;
/**
 * @param {SetDefaultConfigurationOpts} param0
 */
export function setDefaultConfiguration({ rootDir }: SetDefaultConfigurationOpts): Promise<void>;
/**
 * @param {PrintPackagesListOpts} param0
 * @returns {Promise<void>}
 */
export function printPackagesList({ rootDir }: PrintPackagesListOpts): Promise<void>;
import setup = require("./setup");
export { setup };
//# sourceMappingURL=index.d.ts.map