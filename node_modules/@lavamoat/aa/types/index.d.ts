export type Resolver = {
    sync: (path: string, opts: {
        basedir: string;
    }) => string;
};
export type LoadCanonicalNameMapOpts = {
    rootDir: string;
    includeDevDeps?: boolean | undefined;
    resolve?: Resolver | undefined;
};
export type WalkDepTreeOpts = {
    packageDir: string;
    logicalPath?: string[] | undefined;
    includeDevDeps?: boolean | undefined;
    visited?: Set<string> | undefined;
    resolve?: Resolver | undefined;
};
export type CanonicalNameMap = Map<string, string> & {
    rootDir: string;
};
/**
 * @param {LoadCanonicalNameMapOpts} options
 * @returns {Promise<CanonicalNameMap>}
 */
export function loadCanonicalNameMap({ rootDir, includeDevDeps, resolve }: LoadCanonicalNameMapOpts): Promise<CanonicalNameMap>;
/**
 * @param {WalkDepTreeOpts} options
 * @returns {Map<string, string[]>}
 */
export function walkDependencyTreeForBestLogicalPaths({ packageDir, logicalPath, includeDevDeps, visited, resolve, }: WalkDepTreeOpts): Map<string, string[]>;
/**
 * @param {CanonicalNameMap} canonicalNameMap
 * @param {string} modulePath
 * @returns {string|undefined}
 */
export function getPackageDirForModulePath(canonicalNameMap: CanonicalNameMap, modulePath: string): string | undefined;
/**
 * @param {CanonicalNameMap} canonicalNameMap
 * @param {string} modulePath
 * @returns {string}
 */
export function getPackageNameForModulePath(canonicalNameMap: CanonicalNameMap, modulePath: string): string;
/**
 * @returns {Resolver}
 */
export function createPerformantResolve(): Resolver;
//# sourceMappingURL=index.d.ts.map